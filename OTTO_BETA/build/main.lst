ARM GAS  /tmp/ccU23Djm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE,"axG",%progbits,_ZN4otto3
  18              		.align	1
  19              		.weak	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE:
  27              	.LFB219:
  28              		.file 1 "Cpp/gpio.hpp"
   1:Cpp/gpio.hpp  **** #pragma once
   2:Cpp/gpio.hpp  **** 
   3:Cpp/gpio.hpp  **** #include <cstdint>
   4:Cpp/gpio.hpp  **** #include <utility>
   5:Cpp/gpio.hpp  **** 
   6:Cpp/gpio.hpp  **** #include "otto.h"
   7:Cpp/gpio.hpp  **** #include <stm32f4xx_hal.h>
   8:Cpp/gpio.hpp  **** 
   9:Cpp/gpio.hpp  **** namespace otto::mcu {
  10:Cpp/gpio.hpp  **** 
  11:Cpp/gpio.hpp  ****   template<typename T>
  12:Cpp/gpio.hpp  ****   struct function_ptr_impl;
  13:Cpp/gpio.hpp  **** 
  14:Cpp/gpio.hpp  ****   template<typename Ret, typename... Args>
  15:Cpp/gpio.hpp  ****   struct function_ptr_impl<Ret(Args...)> {
  16:Cpp/gpio.hpp  ****     using type = Ret(*)(Args...);
  17:Cpp/gpio.hpp  ****   };
  18:Cpp/gpio.hpp  **** 
  19:Cpp/gpio.hpp  ****   template<typename F>
  20:Cpp/gpio.hpp  ****   using function_ptr = typename function_ptr_impl<F>::type;
  21:Cpp/gpio.hpp  **** 
  22:Cpp/gpio.hpp  ****   struct GpioPin {
  23:Cpp/gpio.hpp  ****     enum struct Mode : std::uint32_t {
  24:Cpp/gpio.hpp  ****       input = GPIO_MODE_INPUT,
  25:Cpp/gpio.hpp  ****       output_pp = GPIO_MODE_OUTPUT_PP,
  26:Cpp/gpio.hpp  ****       output_od = GPIO_MODE_OUTPUT_OD,
  27:Cpp/gpio.hpp  ****       af_pp = GPIO_MODE_AF_PP,
  28:Cpp/gpio.hpp  ****       af_od = GPIO_MODE_AF_OD,
  29:Cpp/gpio.hpp  ****       analog = GPIO_MODE_ANALOG,
  30:Cpp/gpio.hpp  ****       it_rising = GPIO_MODE_IT_RISING,
ARM GAS  /tmp/ccU23Djm.s 			page 2


  31:Cpp/gpio.hpp  ****       it_falling = GPIO_MODE_IT_FALLING,
  32:Cpp/gpio.hpp  ****       it_rising_falling = GPIO_MODE_IT_RISING_FALLING,
  33:Cpp/gpio.hpp  ****       evt_rising = GPIO_MODE_EVT_RISING,
  34:Cpp/gpio.hpp  ****       evt_falling = GPIO_MODE_EVT_FALLING,
  35:Cpp/gpio.hpp  ****       evt_rising_falling = GPIO_MODE_EVT_RISING_FALLING,
  36:Cpp/gpio.hpp  ****     };
  37:Cpp/gpio.hpp  **** 
  38:Cpp/gpio.hpp  ****     enum struct Pull : std::uint32_t { none, up, down };
  39:Cpp/gpio.hpp  **** 
  40:Cpp/gpio.hpp  ****     enum struct Speed : std::uint32_t {
  41:Cpp/gpio.hpp  ****       /// IO works at 2 MHz, please refer to the product datasheet
  42:Cpp/gpio.hpp  ****       freq_low = GPIO_SPEED_FREQ_LOW,
  43:Cpp/gpio.hpp  ****       /// range 12,5 MHz to 50 MHz, please refer to the product datasheet
  44:Cpp/gpio.hpp  ****       freq_medium = GPIO_SPEED_FREQ_MEDIUM,
  45:Cpp/gpio.hpp  ****       /// range 25 MHz to 100 MHz, please refer to the product datasheet
  46:Cpp/gpio.hpp  ****       freq_high = GPIO_SPEED_FREQ_HIGH,
  47:Cpp/gpio.hpp  ****       /// range 50 MHz to 200 MHz, please refer to the product datasheet
  48:Cpp/gpio.hpp  ****       freq_very_high = GPIO_SPEED_FREQ_VERY_HIGH,
  49:Cpp/gpio.hpp  ****     };
  50:Cpp/gpio.hpp  **** 
  51:Cpp/gpio.hpp  ****     void init(Mode mode, Pull pull = Pull::none, Speed speed = Speed::freq_low)
  29              		.loc 1 51 10
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  47 000c 3B60     		str	r3, [r7]
  52:Cpp/gpio.hpp  ****     {
  53:Cpp/gpio.hpp  ****       GPIO_InitTypeDef data = {
  48              		.loc 1 53 24
  49 000e 07F11403 		add	r3, r7, #20
  50 0012 0022     		movs	r2, #0
  51 0014 1A60     		str	r2, [r3]
  52 0016 5A60     		str	r2, [r3, #4]
  53 0018 9A60     		str	r2, [r3, #8]
  54 001a DA60     		str	r2, [r3, #12]
  55 001c 1A61     		str	r2, [r3, #16]
  54:Cpp/gpio.hpp  ****         .Pin = pin,
  56              		.loc 1 54 16
  57 001e FB68     		ldr	r3, [r7, #12]
  58 0020 5B68     		ldr	r3, [r3, #4]
  55:Cpp/gpio.hpp  ****         .Mode = static_cast<std::uint32_t>(mode),
  56:Cpp/gpio.hpp  ****         .Pull = static_cast<std::uint32_t>(pull),
  57:Cpp/gpio.hpp  ****         .Speed = static_cast<std::uint32_t>(speed),
ARM GAS  /tmp/ccU23Djm.s 			page 3


  58:Cpp/gpio.hpp  ****         .Alternate = 0,
  59:Cpp/gpio.hpp  ****       };
  59              		.loc 1 59 7
  60 0022 7B61     		str	r3, [r7, #20]
  61 0024 BB68     		ldr	r3, [r7, #8]
  62 0026 BB61     		str	r3, [r7, #24]
  63 0028 7B68     		ldr	r3, [r7, #4]
  64 002a FB61     		str	r3, [r7, #28]
  65 002c 3B68     		ldr	r3, [r7]
  66 002e 3B62     		str	r3, [r7, #32]
  60:Cpp/gpio.hpp  ****       HAL_GPIO_Init(port, &data);
  67              		.loc 1 60 20
  68 0030 FB68     		ldr	r3, [r7, #12]
  69 0032 1B68     		ldr	r3, [r3]
  70 0034 07F11402 		add	r2, r7, #20
  71 0038 1146     		mov	r1, r2
  72 003a 1846     		mov	r0, r3
  73 003c FFF7FEFF 		bl	HAL_GPIO_Init
  61:Cpp/gpio.hpp  ****     }
  74              		.loc 1 61 5
  75 0040 00BF     		nop
  76 0042 2837     		adds	r7, r7, #40
  77              	.LCFI3:
  78              		.cfi_def_cfa_offset 8
  79 0044 BD46     		mov	sp, r7
  80              	.LCFI4:
  81              		.cfi_def_cfa_register 13
  82              		@ sp needed
  83 0046 80BD     		pop	{r7, pc}
  84              		.cfi_endproc
  85              	.LFE219:
  87              		.section	.text._ZNK4otto3mcu7GpioPin4readEv,"axG",%progbits,_ZNK4otto3mcu7GpioPin4readEv,comdat
  88              		.align	1
  89              		.weak	_ZNK4otto3mcu7GpioPin4readEv
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	_ZNK4otto3mcu7GpioPin4readEv:
  96              	.LFB220:
  62:Cpp/gpio.hpp  **** 
  63:Cpp/gpio.hpp  ****     bool read() const
  97              		.loc 1 63 10
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 16
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101 0000 80B5     		push	{r7, lr}
 102              	.LCFI5:
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 7, -8
 105              		.cfi_offset 14, -4
 106 0002 84B0     		sub	sp, sp, #16
 107              	.LCFI6:
 108              		.cfi_def_cfa_offset 24
 109 0004 00AF     		add	r7, sp, #0
 110              	.LCFI7:
 111              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccU23Djm.s 			page 4


 112 0006 7860     		str	r0, [r7, #4]
  64:Cpp/gpio.hpp  ****     {
  65:Cpp/gpio.hpp  ****       auto res = HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_SET;
 113              		.loc 1 65 35
 114 0008 7B68     		ldr	r3, [r7, #4]
 115 000a 1A68     		ldr	r2, [r3]
 116              		.loc 1 65 41
 117 000c 7B68     		ldr	r3, [r7, #4]
 118 000e 5B68     		ldr	r3, [r3, #4]
 119              		.loc 1 65 34
 120 0010 9BB2     		uxth	r3, r3
 121 0012 1946     		mov	r1, r3
 122 0014 1046     		mov	r0, r2
 123 0016 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 124 001a 0346     		mov	r3, r0
 125              		.loc 1 65 49
 126 001c 012B     		cmp	r3, #1
 127 001e 0CBF     		ite	eq
 128 0020 0123     		moveq	r3, #1
 129 0022 0023     		movne	r3, #0
 130 0024 FB73     		strb	r3, [r7, #15]
  66:Cpp/gpio.hpp  ****       return invert ? !res : res;
 131              		.loc 1 66 14
 132 0026 7B68     		ldr	r3, [r7, #4]
 133 0028 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 134              		.loc 1 66 21
 135 002a 002B     		cmp	r3, #0
 136 002c 04D0     		beq	.L3
 137              		.loc 1 66 21 is_stmt 0 discriminator 1
 138 002e FB7B     		ldrb	r3, [r7, #15]
 139 0030 83F00103 		eor	r3, r3, #1
 140 0034 DBB2     		uxtb	r3, r3
 141 0036 05E0     		b	.L4
 142              	.L3:
 143              		.loc 1 66 30 is_stmt 1 discriminator 2
 144 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 145              		.loc 1 66 21 discriminator 2
 146 003a 002B     		cmp	r3, #0
 147 003c 14BF     		ite	ne
 148 003e 0123     		movne	r3, #1
 149 0040 0023     		moveq	r3, #0
 150 0042 DBB2     		uxtb	r3, r3
 151              	.L4:
  67:Cpp/gpio.hpp  ****     }
 152              		.loc 1 67 5 discriminator 4
 153 0044 1846     		mov	r0, r3
 154 0046 1037     		adds	r7, r7, #16
 155              	.LCFI8:
 156              		.cfi_def_cfa_offset 8
 157 0048 BD46     		mov	sp, r7
 158              	.LCFI9:
 159              		.cfi_def_cfa_register 13
 160              		@ sp needed
 161 004a 80BD     		pop	{r7, pc}
 162              		.cfi_endproc
 163              	.LFE220:
 165              		.section	.text._ZNK4otto3mcu7GpioPin5writeEb,"axG",%progbits,_ZNK4otto3mcu7GpioPin5writeEb,comdat
ARM GAS  /tmp/ccU23Djm.s 			page 5


 166              		.align	1
 167              		.weak	_ZNK4otto3mcu7GpioPin5writeEb
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	_ZNK4otto3mcu7GpioPin5writeEb:
 174              	.LFB221:
  68:Cpp/gpio.hpp  **** 
  69:Cpp/gpio.hpp  ****     void write(bool state) const
 175              		.loc 1 69 10
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 8
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 0000 80B5     		push	{r7, lr}
 180              	.LCFI10:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 82B0     		sub	sp, sp, #8
 185              	.LCFI11:
 186              		.cfi_def_cfa_offset 16
 187 0004 00AF     		add	r7, sp, #0
 188              	.LCFI12:
 189              		.cfi_def_cfa_register 7
 190 0006 7860     		str	r0, [r7, #4]
 191 0008 0B46     		mov	r3, r1
 192 000a FB70     		strb	r3, [r7, #3]
  70:Cpp/gpio.hpp  ****     {
  71:Cpp/gpio.hpp  ****       if (invert) state = !state;
 193              		.loc 1 71 11
 194 000c 7B68     		ldr	r3, [r7, #4]
 195 000e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 196              		.loc 1 71 7
 197 0010 002B     		cmp	r3, #0
 198 0012 03D0     		beq	.L7
 199              		.loc 1 71 25 discriminator 1
 200 0014 FB78     		ldrb	r3, [r7, #3]
 201 0016 83F00103 		eor	r3, r3, #1
 202 001a FB70     		strb	r3, [r7, #3]
 203              	.L7:
  72:Cpp/gpio.hpp  ****       HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 204              		.loc 1 72 25
 205 001c 7B68     		ldr	r3, [r7, #4]
 206 001e 1868     		ldr	r0, [r3]
 207              		.loc 1 72 31
 208 0020 7B68     		ldr	r3, [r7, #4]
 209 0022 5B68     		ldr	r3, [r3, #4]
 210              		.loc 1 72 24
 211 0024 99B2     		uxth	r1, r3
 212 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 213 0028 002B     		cmp	r3, #0
 214 002a 01D0     		beq	.L8
 215              		.loc 1 72 24 is_stmt 0 discriminator 1
 216 002c 0123     		movs	r3, #1
 217 002e 00E0     		b	.L9
 218              	.L8:
ARM GAS  /tmp/ccU23Djm.s 			page 6


 219              		.loc 1 72 24 discriminator 2
 220 0030 0023     		movs	r3, #0
 221              	.L9:
 222              		.loc 1 72 24 discriminator 4
 223 0032 1A46     		mov	r2, r3
 224 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
  73:Cpp/gpio.hpp  ****     }
 225              		.loc 1 73 5 is_stmt 1 discriminator 4
 226 0038 00BF     		nop
 227 003a 0837     		adds	r7, r7, #8
 228              	.LCFI13:
 229              		.cfi_def_cfa_offset 8
 230 003c BD46     		mov	sp, r7
 231              	.LCFI14:
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 003e 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE221:
 238              		.section	.rodata._ZN4otto3mcuL10status_ledE,"a"
 239              		.align	2
 242              	_ZN4otto3mcuL10status_ledE:
 243 0000 00080240 		.word	1073874944
 244 0004 40000000 		.word	64
 245 0008 01       		.byte	1
 246 0009 000000   		.space	3
 247              		.section	.text._ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_,"axG",%progbits,_ZN4otto3mcu7EncoderC5ENS0_
 248              		.align	1
 249              		.weak	_ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	_ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_:
 256              	.LFB224:
 257              		.file 2 "Cpp/encoder.hpp"
   1:Cpp/encoder.hpp **** #pragma once
   2:Cpp/encoder.hpp **** 
   3:Cpp/encoder.hpp **** #include "gpio.hpp"
   4:Cpp/encoder.hpp **** 
   5:Cpp/encoder.hpp **** namespace otto::mcu {
   6:Cpp/encoder.hpp **** 
   7:Cpp/encoder.hpp ****   struct Encoder {
   8:Cpp/encoder.hpp ****     GpioPin pin_a;
   9:Cpp/encoder.hpp ****     GpioPin pin_b;
  10:Cpp/encoder.hpp **** 
  11:Cpp/encoder.hpp ****     Encoder(GpioPin a, GpioPin b) : pin_a(a), pin_b(b) {}
 258              		.loc 2 11 5
 259              		.cfi_startproc
 260              		@ args = 12, pretend = 0, frame = 16
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263 0000 90B4     		push	{r4, r7}
 264              	.LCFI15:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 7, -4
ARM GAS  /tmp/ccU23Djm.s 			page 7


 268 0002 84B0     		sub	sp, sp, #16
 269              	.LCFI16:
 270              		.cfi_def_cfa_offset 24
 271 0004 00AF     		add	r7, sp, #0
 272              	.LCFI17:
 273              		.cfi_def_cfa_register 7
 274 0006 F860     		str	r0, [r7, #12]
 275 0008 3846     		mov	r0, r7
 276 000a 80E80E00 		stm	r0, {r1, r2, r3}
 277              	.LBB2:
 278              		.loc 2 11 54
 279 000e FB68     		ldr	r3, [r7, #12]
 280 0010 1C46     		mov	r4, r3
 281 0012 3B46     		mov	r3, r7
 282 0014 93E80700 		ldm	r3, {r0, r1, r2}
 283 0018 84E80700 		stm	r4, {r0, r1, r2}
 284 001c FB68     		ldr	r3, [r7, #12]
 285 001e 0C33     		adds	r3, r3, #12
 286 0020 07F11802 		add	r2, r7, #24
 287 0024 07CA     		ldm	r2, {r0, r1, r2}
 288 0026 83E80700 		stm	r3, {r0, r1, r2}
 289 002a FB68     		ldr	r3, [r7, #12]
 290 002c 0022     		movs	r2, #0
 291 002e 1A76     		strb	r2, [r3, #24]
 292 0030 FB68     		ldr	r3, [r7, #12]
 293 0032 0022     		movs	r2, #0
 294 0034 DA61     		str	r2, [r3, #28]
 295 0036 FB68     		ldr	r3, [r7, #12]
 296 0038 0022     		movs	r2, #0
 297 003a 83F82020 		strb	r2, [r3, #32]
 298              	.LBE2:
 299              		.loc 2 11 57
 300 003e FB68     		ldr	r3, [r7, #12]
 301 0040 1846     		mov	r0, r3
 302 0042 1037     		adds	r7, r7, #16
 303              	.LCFI18:
 304              		.cfi_def_cfa_offset 8
 305 0044 BD46     		mov	sp, r7
 306              	.LCFI19:
 307              		.cfi_def_cfa_register 13
 308              		@ sp needed
 309 0046 90BC     		pop	{r4, r7}
 310              	.LCFI20:
 311              		.cfi_restore 7
 312              		.cfi_restore 4
 313              		.cfi_def_cfa_offset 0
 314 0048 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE224:
 318              		.weak	_ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_
 319              		.thumb_set _ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_,_ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_
 320              		.section	.text._ZN4otto3mcu7Encoder4initEv,"axG",%progbits,_ZN4otto3mcu7Encoder4initEv,comdat
 321              		.align	1
 322              		.weak	_ZN4otto3mcu7Encoder4initEv
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
ARM GAS  /tmp/ccU23Djm.s 			page 8


 326              		.fpu fpv4-sp-d16
 328              	_ZN4otto3mcu7Encoder4initEv:
 329              	.LFB226:
  12:Cpp/encoder.hpp **** 
  13:Cpp/encoder.hpp ****     void init()
 330              		.loc 2 13 10
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 8
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334 0000 80B5     		push	{r7, lr}
 335              	.LCFI21:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 7, -8
 338              		.cfi_offset 14, -4
 339 0002 82B0     		sub	sp, sp, #8
 340              	.LCFI22:
 341              		.cfi_def_cfa_offset 16
 342 0004 00AF     		add	r7, sp, #0
 343              	.LCFI23:
 344              		.cfi_def_cfa_register 7
 345 0006 7860     		str	r0, [r7, #4]
  14:Cpp/encoder.hpp ****     {
  15:Cpp/encoder.hpp ****       pin_a.init(GpioPin::Mode::it_rising_falling, GpioPin::Pull::up);
 346              		.loc 2 15 17
 347 0008 7868     		ldr	r0, [r7, #4]
 348 000a 0023     		movs	r3, #0
 349 000c 0122     		movs	r2, #1
 350 000e 0749     		ldr	r1, .L13
 351 0010 FFF7FEFF 		bl	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
  16:Cpp/encoder.hpp ****       pin_b.init(GpioPin::Mode::input, GpioPin::Pull::up);
 352              		.loc 2 16 17
 353 0014 7B68     		ldr	r3, [r7, #4]
 354 0016 03F10C00 		add	r0, r3, #12
 355 001a 0023     		movs	r3, #0
 356 001c 0122     		movs	r2, #1
 357 001e 0021     		movs	r1, #0
 358 0020 FFF7FEFF 		bl	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
  17:Cpp/encoder.hpp ****     }
 359              		.loc 2 17 5
 360 0024 00BF     		nop
 361 0026 0837     		adds	r7, r7, #8
 362              	.LCFI24:
 363              		.cfi_def_cfa_offset 8
 364 0028 BD46     		mov	sp, r7
 365              	.LCFI25:
 366              		.cfi_def_cfa_register 13
 367              		@ sp needed
 368 002a 80BD     		pop	{r7, pc}
 369              	.L14:
 370              		.align	2
 371              	.L13:
 372 002c 00003110 		.word	271646720
 373              		.cfi_endproc
 374              	.LFE226:
 376              		.section	.text._ZN4otto3mcu7Encoder11irq_checkedEt,"axG",%progbits,_ZN4otto3mcu7Encoder11irq_check
 377              		.align	1
 378              		.weak	_ZN4otto3mcu7Encoder11irq_checkedEt
ARM GAS  /tmp/ccU23Djm.s 			page 9


 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu fpv4-sp-d16
 384              	_ZN4otto3mcu7Encoder11irq_checkedEt:
 385              	.LFB227:
  18:Cpp/encoder.hpp **** 
  19:Cpp/encoder.hpp ****     void irq_checked(std::uint16_t pin)
 386              		.loc 2 19 10
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              	.LCFI26:
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 7, -8
 394              		.cfi_offset 14, -4
 395 0002 82B0     		sub	sp, sp, #8
 396              	.LCFI27:
 397              		.cfi_def_cfa_offset 16
 398 0004 00AF     		add	r7, sp, #0
 399              	.LCFI28:
 400              		.cfi_def_cfa_register 7
 401 0006 7860     		str	r0, [r7, #4]
 402 0008 0B46     		mov	r3, r1
 403 000a 7B80     		strh	r3, [r7, #2]	@ movhi
  20:Cpp/encoder.hpp ****     {
  21:Cpp/encoder.hpp ****       if (pin != pin_a.pin) return;
 404              		.loc 2 21 11
 405 000c 7A88     		ldrh	r2, [r7, #2]
 406              		.loc 2 21 24
 407 000e 7B68     		ldr	r3, [r7, #4]
 408 0010 5B68     		ldr	r3, [r3, #4]
 409              		.loc 2 21 7
 410 0012 9A42     		cmp	r2, r3
 411 0014 03D1     		bne	.L18
  22:Cpp/encoder.hpp ****       irq();
 412              		.loc 2 22 10
 413 0016 7868     		ldr	r0, [r7, #4]
 414 0018 FFF7FEFF 		bl	_ZN4otto3mcu7Encoder3irqEv
 415 001c 00E0     		b	.L15
 416              	.L18:
  21:Cpp/encoder.hpp ****       irq();
 417              		.loc 2 21 29
 418 001e 00BF     		nop
 419              	.L15:
  23:Cpp/encoder.hpp ****     }
 420              		.loc 2 23 5
 421 0020 0837     		adds	r7, r7, #8
 422              	.LCFI29:
 423              		.cfi_def_cfa_offset 8
 424 0022 BD46     		mov	sp, r7
 425              	.LCFI30:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0024 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
ARM GAS  /tmp/ccU23Djm.s 			page 10


 430              	.LFE227:
 432              		.section	.text._ZN4otto3mcu7Encoder3irqEv,"axG",%progbits,_ZN4otto3mcu7Encoder3irqEv,comdat
 433              		.align	1
 434              		.weak	_ZN4otto3mcu7Encoder3irqEv
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv4-sp-d16
 440              	_ZN4otto3mcu7Encoder3irqEv:
 441              	.LFB228:
  24:Cpp/encoder.hpp **** 
  25:Cpp/encoder.hpp ****     void irq()
 442              		.loc 2 25 10
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 16
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 80B5     		push	{r7, lr}
 447              	.LCFI31:
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 84B0     		sub	sp, sp, #16
 452              	.LCFI32:
 453              		.cfi_def_cfa_offset 24
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI33:
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
  26:Cpp/encoder.hpp ****     {
  27:Cpp/encoder.hpp ****       bool a_now = pin_a.read();
 458              		.loc 2 27 30
 459 0008 7B68     		ldr	r3, [r7, #4]
 460 000a 1846     		mov	r0, r3
 461 000c FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin4readEv
 462 0010 0346     		mov	r3, r0
 463 0012 FB73     		strb	r3, [r7, #15]
  28:Cpp/encoder.hpp ****       bool b_now = pin_b.read();
 464              		.loc 2 28 30
 465 0014 7B68     		ldr	r3, [r7, #4]
 466 0016 0C33     		adds	r3, r3, #12
 467 0018 1846     		mov	r0, r3
 468 001a FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin4readEv
 469 001e 0346     		mov	r3, r0
 470 0020 BB73     		strb	r3, [r7, #14]
  29:Cpp/encoder.hpp ****       if (a_now != a_prev) {
 471              		.loc 2 29 20
 472 0022 7B68     		ldr	r3, [r7, #4]
 473 0024 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 474              		.loc 2 29 7
 475 0028 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 476 002a 9A42     		cmp	r2, r3
 477 002c 15D0     		beq	.L20
  30:Cpp/encoder.hpp ****         a_prev = a_now;
 478              		.loc 2 30 16
 479 002e 7B68     		ldr	r3, [r7, #4]
 480 0030 FA7B     		ldrb	r2, [r7, #15]
 481 0032 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/ccU23Djm.s 			page 11


  31:Cpp/encoder.hpp ****         if (a_now == false) {
 482              		.loc 2 31 19
 483 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 484              		.loc 2 31 9
 485 0038 002B     		cmp	r3, #0
 486 003a 0ED1     		bne	.L20
  32:Cpp/encoder.hpp ****           value += b_now ? 1 : -1;
 487              		.loc 2 32 17
 488 003c 7B68     		ldr	r3, [r7, #4]
 489 003e 93F91830 		ldrsb	r3, [r3, #24]
 490 0042 DBB2     		uxtb	r3, r3
 491 0044 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 492 0046 002A     		cmp	r2, #0
 493 0048 01D0     		beq	.L21
 494              		.loc 2 32 17 is_stmt 0 discriminator 1
 495 004a 0122     		movs	r2, #1
 496 004c 00E0     		b	.L22
 497              	.L21:
 498              		.loc 2 32 17 discriminator 2
 499 004e FF22     		movs	r2, #255
 500              	.L22:
 501              		.loc 2 32 17 discriminator 4
 502 0050 1344     		add	r3, r3, r2
 503 0052 DBB2     		uxtb	r3, r3
 504 0054 5AB2     		sxtb	r2, r3
 505 0056 7B68     		ldr	r3, [r7, #4]
 506 0058 1A76     		strb	r2, [r3, #24]
 507              	.L20:
  33:Cpp/encoder.hpp ****         }
  34:Cpp/encoder.hpp ****       }
  35:Cpp/encoder.hpp ****       if (handler) handler();
 508              		.loc 2 35 11 is_stmt 1
 509 005a 7B68     		ldr	r3, [r7, #4]
 510 005c DB69     		ldr	r3, [r3, #28]
 511              		.loc 2 35 7
 512 005e 002B     		cmp	r3, #0
 513 0060 02D0     		beq	.L24
 514              		.loc 2 35 20 discriminator 1
 515 0062 7B68     		ldr	r3, [r7, #4]
 516 0064 DB69     		ldr	r3, [r3, #28]
 517              		.loc 2 35 27 discriminator 1
 518 0066 9847     		blx	r3
 519              	.LVL0:
 520              	.L24:
  36:Cpp/encoder.hpp ****     }
 521              		.loc 2 36 5
 522 0068 00BF     		nop
 523 006a 1037     		adds	r7, r7, #16
 524              	.LCFI34:
 525              		.cfi_def_cfa_offset 8
 526 006c BD46     		mov	sp, r7
 527              	.LCFI35:
 528              		.cfi_def_cfa_register 13
 529              		@ sp needed
 530 006e 80BD     		pop	{r7, pc}
 531              		.cfi_endproc
 532              	.LFE228:
ARM GAS  /tmp/ccU23Djm.s 			page 12


 534              		.section	.text._ZnwjPv,"axG",%progbits,_ZnwjPv,comdat
 535              		.align	1
 536              		.weak	_ZnwjPv
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv4-sp-d16
 542              	_ZnwjPv:
 543              	.LFB253:
 544              		.file 3 "/usr/arm-none-eabi/include/c++/9.3.0/new"
   1:/usr/arm-none-eabi/include/c++/9.3.0/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/new **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
   5:/usr/arm-none-eabi/include/c++/9.3.0/new **** // This file is part of GCC.
   6:/usr/arm-none-eabi/include/c++/9.3.0/new **** //
   7:/usr/arm-none-eabi/include/c++/9.3.0/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/arm-none-eabi/include/c++/9.3.0/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/arm-none-eabi/include/c++/9.3.0/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/arm-none-eabi/include/c++/9.3.0/new **** // any later version.
  11:/usr/arm-none-eabi/include/c++/9.3.0/new **** // 
  12:/usr/arm-none-eabi/include/c++/9.3.0/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/arm-none-eabi/include/c++/9.3.0/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/arm-none-eabi/include/c++/9.3.0/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/arm-none-eabi/include/c++/9.3.0/new **** // GNU General Public License for more details.
  16:/usr/arm-none-eabi/include/c++/9.3.0/new **** // 
  17:/usr/arm-none-eabi/include/c++/9.3.0/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/arm-none-eabi/include/c++/9.3.0/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/arm-none-eabi/include/c++/9.3.0/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  21:/usr/arm-none-eabi/include/c++/9.3.0/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/arm-none-eabi/include/c++/9.3.0/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/arm-none-eabi/include/c++/9.3.0/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/arm-none-eabi/include/c++/9.3.0/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  26:/usr/arm-none-eabi/include/c++/9.3.0/new **** /** @file new
  27:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  This is a Standard C++ Library header.
  28:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *
  29:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  handling memory allocation errors; see
  31:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/arm-none-eabi/include/c++/9.3.0/new ****  */
  33:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  34:/usr/arm-none-eabi/include/c++/9.3.0/new **** #ifndef _NEW
  35:/usr/arm-none-eabi/include/c++/9.3.0/new **** #define _NEW
  36:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  37:/usr/arm-none-eabi/include/c++/9.3.0/new **** #pragma GCC system_header
  38:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  39:/usr/arm-none-eabi/include/c++/9.3.0/new **** #include <bits/c++config.h>
  40:/usr/arm-none-eabi/include/c++/9.3.0/new **** #include <exception>
  41:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  42:/usr/arm-none-eabi/include/c++/9.3.0/new **** #pragma GCC visibility push(default)
  43:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  44:/usr/arm-none-eabi/include/c++/9.3.0/new **** extern "C++" {
  45:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  46:/usr/arm-none-eabi/include/c++/9.3.0/new **** namespace std 
  47:/usr/arm-none-eabi/include/c++/9.3.0/new **** {
ARM GAS  /tmp/ccU23Djm.s 			page 13


  48:/usr/arm-none-eabi/include/c++/9.3.0/new ****   /**
  49:/usr/arm-none-eabi/include/c++/9.3.0/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/arm-none-eabi/include/c++/9.3.0/new ****    *  @ingroup exceptions
  51:/usr/arm-none-eabi/include/c++/9.3.0/new ****    *
  52:/usr/arm-none-eabi/include/c++/9.3.0/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/arm-none-eabi/include/c++/9.3.0/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/arm-none-eabi/include/c++/9.3.0/new ****   class bad_alloc : public exception 
  55:/usr/arm-none-eabi/include/c++/9.3.0/new ****   {
  56:/usr/arm-none-eabi/include/c++/9.3.0/new ****   public:
  57:/usr/arm-none-eabi/include/c++/9.3.0/new ****     bad_alloc() throw() { }
  58:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  59:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cplusplus >= 201103L
  60:/usr/arm-none-eabi/include/c++/9.3.0/new ****     bad_alloc(const bad_alloc&) = default;
  61:/usr/arm-none-eabi/include/c++/9.3.0/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  62:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif
  63:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  64:/usr/arm-none-eabi/include/c++/9.3.0/new ****     // This declaration is not useless:
  65:/usr/arm-none-eabi/include/c++/9.3.0/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  66:/usr/arm-none-eabi/include/c++/9.3.0/new ****     virtual ~bad_alloc() throw();
  67:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  68:/usr/arm-none-eabi/include/c++/9.3.0/new ****     // See comment in eh_exception.cc.
  69:/usr/arm-none-eabi/include/c++/9.3.0/new ****     virtual const char* what() const throw();
  70:/usr/arm-none-eabi/include/c++/9.3.0/new ****   };
  71:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  72:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cplusplus >= 201103L
  73:/usr/arm-none-eabi/include/c++/9.3.0/new ****   class bad_array_new_length : public bad_alloc
  74:/usr/arm-none-eabi/include/c++/9.3.0/new ****   {
  75:/usr/arm-none-eabi/include/c++/9.3.0/new ****   public:
  76:/usr/arm-none-eabi/include/c++/9.3.0/new ****     bad_array_new_length() throw() { }
  77:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  78:/usr/arm-none-eabi/include/c++/9.3.0/new ****     // This declaration is not useless:
  79:/usr/arm-none-eabi/include/c++/9.3.0/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  80:/usr/arm-none-eabi/include/c++/9.3.0/new ****     virtual ~bad_array_new_length() throw();
  81:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  82:/usr/arm-none-eabi/include/c++/9.3.0/new ****     // See comment in eh_exception.cc.
  83:/usr/arm-none-eabi/include/c++/9.3.0/new ****     virtual const char* what() const throw();
  84:/usr/arm-none-eabi/include/c++/9.3.0/new ****   };
  85:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif
  86:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  87:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cpp_aligned_new
  88:/usr/arm-none-eabi/include/c++/9.3.0/new ****   enum class align_val_t: size_t {};
  89:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif
  90:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  91:/usr/arm-none-eabi/include/c++/9.3.0/new ****   struct nothrow_t
  92:/usr/arm-none-eabi/include/c++/9.3.0/new ****   {
  93:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cplusplus >= 201103L
  94:/usr/arm-none-eabi/include/c++/9.3.0/new ****     explicit nothrow_t() = default;
  95:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif
  96:/usr/arm-none-eabi/include/c++/9.3.0/new ****   };
  97:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
  98:/usr/arm-none-eabi/include/c++/9.3.0/new ****   extern const nothrow_t nothrow;
  99:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 100:/usr/arm-none-eabi/include/c++/9.3.0/new ****   /** If you write your own error handler to be called by @c new, it must
 101:/usr/arm-none-eabi/include/c++/9.3.0/new ****    *  be of this type.  */
 102:/usr/arm-none-eabi/include/c++/9.3.0/new ****   typedef void (*new_handler)();
 103:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 104:/usr/arm-none-eabi/include/c++/9.3.0/new ****   /// Takes a replacement handler as the argument, returns the
ARM GAS  /tmp/ccU23Djm.s 			page 14


 105:/usr/arm-none-eabi/include/c++/9.3.0/new ****   /// previous handler.
 106:/usr/arm-none-eabi/include/c++/9.3.0/new ****   new_handler set_new_handler(new_handler) throw();
 107:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 108:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cplusplus >= 201103L
 109:/usr/arm-none-eabi/include/c++/9.3.0/new ****   /// Return the current new handler.
 110:/usr/arm-none-eabi/include/c++/9.3.0/new ****   new_handler get_new_handler() noexcept;
 111:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif
 112:/usr/arm-none-eabi/include/c++/9.3.0/new **** } // namespace std
 113:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 114:/usr/arm-none-eabi/include/c++/9.3.0/new **** //@{
 115:/usr/arm-none-eabi/include/c++/9.3.0/new **** /** These are replaceable signatures:
 116:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 117:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  - normal array new and delete (same)
 118:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 119:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *    @c NULL on error)
 120:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  - @c nothrow array new and delete (same)
 121:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *
 122:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  Placement new and delete signatures (take a memory address argument,
 123:/usr/arm-none-eabi/include/c++/9.3.0/new ****  *  does nothing) may not be replaced by a user's program.
 124:/usr/arm-none-eabi/include/c++/9.3.0/new **** */
 125:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 126:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 127:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 128:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 129:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 130:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 131:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 132:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 133:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cpp_sized_deallocation
 134:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 135:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 136:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 137:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 138:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif
 139:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 140:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__, __malloc__));
 141:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 142:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__, __malloc__));
 143:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 144:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 145:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 146:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 147:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cpp_aligned_new
 148:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 149:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 150:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 151:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 152:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete(void*, std::align_val_t)
 153:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 154:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 155:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 156:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 157:/usr/arm-none-eabi/include/c++/9.3.0/new ****   __attribute__((__externally_visible__));
 158:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 159:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 160:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete[](void*, std::align_val_t)
 161:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
ARM GAS  /tmp/ccU23Djm.s 			page 15


 162:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 163:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cpp_sized_deallocation
 165:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete(void*, std::size_t, std::align_val_t)
 166:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 167:/usr/arm-none-eabi/include/c++/9.3.0/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 168:/usr/arm-none-eabi/include/c++/9.3.0/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 169:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif // __cpp_sized_deallocation
 170:/usr/arm-none-eabi/include/c++/9.3.0/new **** #endif // __cpp_aligned_new
 171:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 172:/usr/arm-none-eabi/include/c++/9.3.0/new **** // Default placement versions of operator new.
 173:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 174:/usr/arm-none-eabi/include/c++/9.3.0/new **** { return __p; }
 545              		.loc 3 174 1
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 8
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 550 0000 80B4     		push	{r7}
 551              	.LCFI36:
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 7, -4
 554 0002 83B0     		sub	sp, sp, #12
 555              	.LCFI37:
 556              		.cfi_def_cfa_offset 16
 557 0004 00AF     		add	r7, sp, #0
 558              	.LCFI38:
 559              		.cfi_def_cfa_register 7
 560 0006 7860     		str	r0, [r7, #4]
 561 0008 3960     		str	r1, [r7]
 562              		.loc 3 174 10
 563 000a 3B68     		ldr	r3, [r7]
 564              		.loc 3 174 15
 565 000c 1846     		mov	r0, r3
 566 000e 0C37     		adds	r7, r7, #12
 567              	.LCFI39:
 568              		.cfi_def_cfa_offset 4
 569 0010 BD46     		mov	sp, r7
 570              	.LCFI40:
 571              		.cfi_def_cfa_register 13
 572              		@ sp needed
 573 0012 5DF8047B 		ldr	r7, [sp], #4
 574              	.LCFI41:
 575              		.cfi_restore 7
 576              		.cfi_def_cfa_offset 0
 577 0016 7047     		bx	lr
 578              		.cfi_endproc
 579              	.LFE253:
 581              		.section	.text._ZL20__gthread_key_deletei,"ax",%progbits
 582              		.align	1
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	_ZL20__gthread_key_deletei:
 589              	.LFB1317:
 590              		.file 4 "/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.
ARM GAS  /tmp/ccU23Djm.s 			page 16


   1:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Threads compatibility routines for libgcc2 and libobjc.  */
   2:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Compile this one with gcc.  */
   3:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
   5:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** This file is part of GCC.
   6:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
   7:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** GCC is free software; you can redistribute it and/or modify it under
   8:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** the terms of the GNU General Public License as published by the Free
   9:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** Software Foundation; either version 3, or (at your option) any later
  10:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** version.
  11:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  12:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** GCC is distributed in the hope that it will be useful, but WITHOUT ANY
  13:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  15:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** for more details.
  16:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  17:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** Under Section 7 of GPL version 3, you are granted additional
  18:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** permissions described in the GCC Runtime Library Exception, version
  19:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 3.1, as published by the Free Software Foundation.
  20:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  21:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** You should have received a copy of the GNU General Public License and
  22:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** <http://www.gnu.org/licenses/>.  */
  25:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  26:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #ifndef _GLIBCXX_GCC_GTHR_SINGLE_H
  27:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define _GLIBCXX_GCC_GTHR_SINGLE_H
  28:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  29:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Just provide compatibility for mutex handling.  */
  30:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  31:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_key_t;
  32:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_once_t;
  33:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_mutex_t;
  34:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_recursive_mutex_t;
  35:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  36:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_ONCE_INIT 0
  37:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_MUTEX_INIT 0
  38:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_MUTEX_INIT_FUNCTION(mx) do {} while (0)
  39:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT 0
  40:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  41:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define _GLIBCXX_UNUSED __attribute__((__unused__))
  42:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  43:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #ifdef _LIBOBJC
  44:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  45:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Thread local storage for a single thread */
  46:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static void *thread_local_storage = NULL;
  47:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  48:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend initialization functions */
  49:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  50:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Initialize the threads subsystem.  */
  51:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  52:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_init_thread_system (void)
  53:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  54:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  55:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
  56:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  57:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 17


  58:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Close the threads subsystem.  */
  59:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  60:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_close_thread_system (void)
  61:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  62:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  63:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
  64:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  65:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  66:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend thread functions */
  67:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  68:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Create a new thread of execution.  */
  69:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline objc_thread_t
  70:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_detach (void (* func)(void *), void * arg _GLIBCXX_UNUSED)
  71:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  72:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  73:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return NULL;
  74:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  75:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  76:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Set the current thread's priority.  */
  77:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  78:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_set_priority (int priority _GLIBCXX_UNUSED)
  79:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  80:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  81:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
  82:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  83:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  84:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Return the current thread's priority.  */
  85:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  86:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_get_priority (void)
  87:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  88:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return OBJC_THREAD_INTERACTIVE_PRIORITY;
  89:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  90:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  91:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Yield our process time to another thread.  */
  92:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline void
  93:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_yield (void)
  94:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  95:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return;
  96:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  97:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  98:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Terminate the current thread.  */
  99:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 100:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_exit (void)
 101:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 102:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
 103:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* Should we really exit the program */
 104:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* exit (&__objc_thread_exit_status); */
 105:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
 106:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 107:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 108:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Returns an integer value which uniquely describes a thread.  */
 109:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline objc_thread_t
 110:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_id (void)
 111:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 112:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support, use 1.  */
 113:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return (objc_thread_t) 1;
 114:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
ARM GAS  /tmp/ccU23Djm.s 			page 18


 115:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 116:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Sets the thread's local storage pointer.  */
 117:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 118:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_set_data (void *value)
 119:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 120:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   thread_local_storage = value;
 121:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 122:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 123:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 124:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Returns the thread's local storage pointer.  */
 125:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline void *
 126:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_get_data (void)
 127:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 128:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return thread_local_storage;
 129:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 130:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 131:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend mutex functions */
 132:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 133:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Allocate a mutex.  */
 134:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 135:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_allocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 136:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 137:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 138:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 139:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 140:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Deallocate a mutex.  */
 141:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 142:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_deallocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 143:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 144:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 145:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 146:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 147:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Grab a lock on a mutex.  */
 148:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 149:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_lock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 150:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 151:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* There can only be one thread, so we always get the lock */
 152:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 153:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 154:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 155:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Try to grab a lock on a mutex.  */
 156:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 157:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_trylock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 158:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 159:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* There can only be one thread, so we always get the lock */
 160:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 161:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 162:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 163:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Unlock the mutex */
 164:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 165:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_unlock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 166:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 167:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 168:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 169:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 170:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend condition mutex functions */
 171:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 19


 172:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Allocate a condition.  */
 173:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 174:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_allocate (objc_condition_t condition _GLIBCXX_UNUSED)
 175:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 176:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 177:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 178:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 179:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Deallocate a condition.  */
 180:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 181:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_deallocate (objc_condition_t condition _GLIBCXX_UNUSED)
 182:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 183:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 184:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 185:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 186:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Wait on the condition */
 187:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 188:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_wait (objc_condition_t condition _GLIBCXX_UNUSED,
 189:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 			       objc_mutex_t mutex _GLIBCXX_UNUSED)
 190:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 191:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 192:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 193:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 194:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Wake up all threads waiting on this condition.  */
 195:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 196:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_broadcast (objc_condition_t condition _GLIBCXX_UNUSED)
 197:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 198:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 199:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 200:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 201:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Wake up one thread waiting on this condition.  */
 202:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 203:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_signal (objc_condition_t condition _GLIBCXX_UNUSED)
 204:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 205:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 206:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 207:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 208:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #else /* _LIBOBJC */
 209:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 210:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 211:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_active_p (void)
 212:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 213:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 214:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 215:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 216:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 217:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_once (__gthread_once_t *__once _GLIBCXX_UNUSED, void (*__func) (void) _GLIBCXX_UNUSED)
 218:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 219:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 220:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 221:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 222:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int _GLIBCXX_UNUSED
 223:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_key_create (__gthread_key_t *__key _GLIBCXX_UNUSED, void (*__func) (void *) _GLIBCXX_UNUS
 224:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 225:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 226:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 227:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 228:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static int _GLIBCXX_UNUSED
ARM GAS  /tmp/ccU23Djm.s 			page 20


 229:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
 230:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 591              		.loc 4 230 1
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 8
 594              		@ frame_needed = 1, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 596 0000 80B4     		push	{r7}
 597              	.LCFI42:
 598              		.cfi_def_cfa_offset 4
 599              		.cfi_offset 7, -4
 600 0002 83B0     		sub	sp, sp, #12
 601              	.LCFI43:
 602              		.cfi_def_cfa_offset 16
 603 0004 00AF     		add	r7, sp, #0
 604              	.LCFI44:
 605              		.cfi_def_cfa_register 7
 606 0006 7860     		str	r0, [r7, #4]
 231:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 607              		.loc 4 231 10
 608 0008 0023     		movs	r3, #0
 232:/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 609              		.loc 4 232 1
 610 000a 1846     		mov	r0, r3
 611 000c 0C37     		adds	r7, r7, #12
 612              	.LCFI45:
 613              		.cfi_def_cfa_offset 4
 614 000e BD46     		mov	sp, r7
 615              	.LCFI46:
 616              		.cfi_def_cfa_register 13
 617              		@ sp needed
 618 0010 5DF8047B 		ldr	r7, [sp], #4
 619              	.LCFI47:
 620              		.cfi_restore 7
 621              		.cfi_def_cfa_offset 0
 622 0014 7047     		bx	lr
 623              		.cfi_endproc
 624              	.LFE1317:
 626              		.section	.rodata._ZN2tlL8in_placeE,"a"
 627              		.align	2
 630              	_ZN2tlL8in_placeE:
 631 0000 00       		.space	1
 632              		.section	.rodata._ZN2tlL8unexpectE,"a"
 633              		.align	2
 636              	_ZN2tlL8unexpectE:
 637 0000 00       		.space	1
 638              		.section	.rodata._ZN2tl6detailL7no_initE,"a"
 639              		.align	2
 642              	_ZN2tl6detailL7no_initE:
 643 0000 00       		.space	1
 644              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv,"axG",%progb
 645              		.align	1
 646              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU23Djm.s 			page 21


 652              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv:
 653              	.LFB3874:
 654              		.file 5 "Cpp/local_vector.hpp"
   1:Cpp/local_vector.hpp **** #pragma once
   2:Cpp/local_vector.hpp **** 
   3:Cpp/local_vector.hpp **** #include <initializer_list>
   4:Cpp/local_vector.hpp **** #include <new>
   5:Cpp/local_vector.hpp **** #include <iterator>
   6:Cpp/local_vector.hpp **** 
   7:Cpp/local_vector.hpp **** #include "expected.hpp"
   8:Cpp/local_vector.hpp **** 
   9:Cpp/local_vector.hpp **** namespace otto::util {
  10:Cpp/local_vector.hpp **** 
  11:Cpp/local_vector.hpp ****   template<typename T, std::size_t Capacity>
  12:Cpp/local_vector.hpp ****   struct local_vector {
  13:Cpp/local_vector.hpp ****     using value_type = T;
  14:Cpp/local_vector.hpp ****     using iterator = value_type*;
  15:Cpp/local_vector.hpp ****     using const_iterator = const value_type*;
  16:Cpp/local_vector.hpp **** 
  17:Cpp/local_vector.hpp ****     /// Error codes
  18:Cpp/local_vector.hpp ****     enum struct error {
  19:Cpp/local_vector.hpp ****       /// The vector is at capacity
  20:Cpp/local_vector.hpp ****       full,
  21:Cpp/local_vector.hpp ****       /// The vecctor is empty
  22:Cpp/local_vector.hpp ****       empty
  23:Cpp/local_vector.hpp ****     };
  24:Cpp/local_vector.hpp **** 
  25:Cpp/local_vector.hpp ****     constexpr local_vector() : _data(), _size(0) {}
  26:Cpp/local_vector.hpp **** 
  27:Cpp/local_vector.hpp ****     constexpr local_vector(std::initializer_list<value_type> il)
  28:Cpp/local_vector.hpp ****     {
  29:Cpp/local_vector.hpp ****       for (const T& v : il) {
  30:Cpp/local_vector.hpp ****         push_back(v);
  31:Cpp/local_vector.hpp ****       }
  32:Cpp/local_vector.hpp ****     }
  33:Cpp/local_vector.hpp **** 
  34:Cpp/local_vector.hpp ****     ~local_vector() noexcept
  35:Cpp/local_vector.hpp ****     {
  36:Cpp/local_vector.hpp ****       // Destroy elements
  37:Cpp/local_vector.hpp ****       clear();
  38:Cpp/local_vector.hpp ****     }
  39:Cpp/local_vector.hpp **** 
  40:Cpp/local_vector.hpp ****     // Queries
  41:Cpp/local_vector.hpp **** 
  42:Cpp/local_vector.hpp ****     static constexpr std::size_t capacity() noexcept
 655              		.loc 5 42 34
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660 0000 80B4     		push	{r7}
 661              	.LCFI48:
 662              		.cfi_def_cfa_offset 4
 663              		.cfi_offset 7, -4
 664 0002 00AF     		add	r7, sp, #0
 665              	.LCFI49:
 666              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccU23Djm.s 			page 22


  43:Cpp/local_vector.hpp ****     {
  44:Cpp/local_vector.hpp ****       return Capacity;
 667              		.loc 5 44 14
 668 0004 4FF48063 		mov	r3, #1024
  45:Cpp/local_vector.hpp ****     }
 669              		.loc 5 45 5
 670 0008 1846     		mov	r0, r3
 671 000a BD46     		mov	sp, r7
 672              	.LCFI50:
 673              		.cfi_def_cfa_register 13
 674              		@ sp needed
 675 000c 5DF8047B 		ldr	r7, [sp], #4
 676              	.LCFI51:
 677              		.cfi_restore 7
 678              		.cfi_def_cfa_offset 0
 679 0010 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE3874:
 683              		.section	.text._ZNK4otto3mcu9Scheduler4TaskgtERKS2_,"axG",%progbits,_ZNK4otto3mcu9Scheduler4Taskgt
 684              		.align	1
 685              		.weak	_ZNK4otto3mcu9Scheduler4TaskgtERKS2_
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu fpv4-sp-d16
 691              	_ZNK4otto3mcu9Scheduler4TaskgtERKS2_:
 692              	.LFB3875:
 693              		.file 6 "Cpp/scheduler.hpp"
   1:Cpp/scheduler.hpp **** #pragma once
   2:Cpp/scheduler.hpp **** 
   3:Cpp/scheduler.hpp **** #include "local_vector.hpp"
   4:Cpp/scheduler.hpp **** 
   5:Cpp/scheduler.hpp **** #include "fixed_size_function.hpp"
   6:Cpp/scheduler.hpp **** #include "stm32f4xx_hal.h"
   7:Cpp/scheduler.hpp **** 
   8:Cpp/scheduler.hpp **** namespace otto::mcu {
   9:Cpp/scheduler.hpp **** 
  10:Cpp/scheduler.hpp ****   /// Time-trigger scheduler supporting repeated tasks
  11:Cpp/scheduler.hpp ****   struct Scheduler {
  12:Cpp/scheduler.hpp ****     /// Move-only function with max size of 48
  13:Cpp/scheduler.hpp ****     using Function = fixed_size_function<void(), 64, construct_type::move>;
  14:Cpp/scheduler.hpp ****     /// Move-only function with max size of 32
  15:Cpp/scheduler.hpp ****     using CondRepeatFunction = fixed_size_function<std::uint32_t(), 32, construct_type::move>;
  16:Cpp/scheduler.hpp ****     /// Move only task type
  17:Cpp/scheduler.hpp ****     struct Task {
  18:Cpp/scheduler.hpp ****       /// Function to execute
  19:Cpp/scheduler.hpp ****       Function func;
  20:Cpp/scheduler.hpp ****       /// Absolute time to execute function in milliseconds
  21:Cpp/scheduler.hpp ****       std::uint32_t time;
  22:Cpp/scheduler.hpp ****       /// Upon execution, the task will be requeued in X milliseconds after execution started.
  23:Cpp/scheduler.hpp ****       /// If 0, the task will not be repeated
  24:Cpp/scheduler.hpp ****       std::uint32_t repeat = 0;
  25:Cpp/scheduler.hpp **** 
  26:Cpp/scheduler.hpp ****       bool operator>(const Task& rhs) const
 694              		.loc 6 26 12
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccU23Djm.s 			page 23


 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 699 0000 80B4     		push	{r7}
 700              	.LCFI52:
 701              		.cfi_def_cfa_offset 4
 702              		.cfi_offset 7, -4
 703 0002 83B0     		sub	sp, sp, #12
 704              	.LCFI53:
 705              		.cfi_def_cfa_offset 16
 706 0004 00AF     		add	r7, sp, #0
 707              	.LCFI54:
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 710 0008 3960     		str	r1, [r7]
  27:Cpp/scheduler.hpp ****       {
  28:Cpp/scheduler.hpp ****         return time > rhs.time;
 711              		.loc 6 28 16
 712 000a 7B68     		ldr	r3, [r7, #4]
 713 000c 9A6C     		ldr	r2, [r3, #72]
 714              		.loc 6 28 27
 715 000e 3B68     		ldr	r3, [r7]
 716 0010 9B6C     		ldr	r3, [r3, #72]
 717 0012 9A42     		cmp	r2, r3
 718 0014 8CBF     		ite	hi
 719 0016 0123     		movhi	r3, #1
 720 0018 0023     		movls	r3, #0
 721 001a DBB2     		uxtb	r3, r3
  29:Cpp/scheduler.hpp ****       }
 722              		.loc 6 29 7
 723 001c 1846     		mov	r0, r3
 724 001e 0C37     		adds	r7, r7, #12
 725              	.LCFI55:
 726              		.cfi_def_cfa_offset 4
 727 0020 BD46     		mov	sp, r7
 728              	.LCFI56:
 729              		.cfi_def_cfa_register 13
 730              		@ sp needed
 731 0022 5DF8047B 		ldr	r7, [sp], #4
 732              	.LCFI57:
 733              		.cfi_restore 7
 734              		.cfi_def_cfa_offset 0
 735 0026 7047     		bx	lr
 736              		.cfi_endproc
 737              	.LFE3875:
 739              		.section	.text._ZN4otto3mcu9Scheduler4TaskD2Ev,"axG",%progbits,_ZN4otto3mcu9Scheduler4TaskD5Ev,com
 740              		.align	1
 741              		.weak	_ZN4otto3mcu9Scheduler4TaskD2Ev
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu fpv4-sp-d16
 747              	_ZN4otto3mcu9Scheduler4TaskD2Ev:
 748              	.LFB3878:
  17:Cpp/scheduler.hpp ****       /// Function to execute
 749              		.loc 6 17 12
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccU23Djm.s 			page 24


 752              		@ frame_needed = 1, uses_anonymous_args = 0
 753 0000 80B5     		push	{r7, lr}
 754              	.LCFI58:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 7, -8
 757              		.cfi_offset 14, -4
 758 0002 82B0     		sub	sp, sp, #8
 759              	.LCFI59:
 760              		.cfi_def_cfa_offset 16
 761 0004 00AF     		add	r7, sp, #0
 762              	.LCFI60:
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 765              	.LBB3:
  17:Cpp/scheduler.hpp ****       /// Function to execute
 766              		.loc 6 17 12
 767 0008 7B68     		ldr	r3, [r7, #4]
 768 000a 1846     		mov	r0, r3
 769 000c FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev
 770              	.LBE3:
 771 0010 7B68     		ldr	r3, [r7, #4]
 772 0012 1846     		mov	r0, r3
 773 0014 0837     		adds	r7, r7, #8
 774              	.LCFI61:
 775              		.cfi_def_cfa_offset 8
 776 0016 BD46     		mov	sp, r7
 777              	.LCFI62:
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 0018 80BD     		pop	{r7, pc}
 781              		.cfi_endproc
 782              	.LFE3878:
 784              		.weak	_ZN4otto3mcu9Scheduler4TaskD1Ev
 785              		.thumb_set _ZN4otto3mcu9Scheduler4TaskD1Ev,_ZN4otto3mcu9Scheduler4TaskD2Ev
 786              		.section	.rodata
 787              		.align	2
 788              	.LC9:
 789 0000 4370702F 		.ascii	"Cpp/scheduler.hpp\000"
 789      73636865 
 789      64756C65 
 789      722E6870 
 789      7000
 790              		.section	.text._ZN4otto3mcu9Scheduler4execEv,"axG",%progbits,_ZN4otto3mcu9Scheduler4execEv,comdat
 791              		.align	1
 792              		.weak	_ZN4otto3mcu9Scheduler4execEv
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	_ZN4otto3mcu9Scheduler4execEv:
 799              	.LFB3876:
  30:Cpp/scheduler.hpp ****     };
  31:Cpp/scheduler.hpp **** 
  32:Cpp/scheduler.hpp ****     /// Execute a task if available.
  33:Cpp/scheduler.hpp ****     ///
  34:Cpp/scheduler.hpp ****     /// Returns true if a task was executed
  35:Cpp/scheduler.hpp ****     bool exec()
ARM GAS  /tmp/ccU23Djm.s 			page 25


 800              		.loc 6 35 10
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 96
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804 0000 90B5     		push	{r4, r7, lr}
 805              	.LCFI63:
 806              		.cfi_def_cfa_offset 12
 807              		.cfi_offset 4, -12
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 99B0     		sub	sp, sp, #100
 811              	.LCFI64:
 812              		.cfi_def_cfa_offset 112
 813 0004 00AF     		add	r7, sp, #0
 814              	.LCFI65:
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
  36:Cpp/scheduler.hpp ****     {
  37:Cpp/scheduler.hpp ****       auto time = HAL_GetTick();
 817              		.loc 6 37 30
 818 0008 FFF7FEFF 		bl	HAL_GetTick
 819 000c F865     		str	r0, [r7, #92]
  38:Cpp/scheduler.hpp ****       if (queue_.empty()) return false;
 820              		.loc 6 38 23
 821 000e 7B68     		ldr	r3, [r7, #4]
 822 0010 1846     		mov	r0, r3
 823 0012 FFF7FEFF 		bl	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv
 824 0016 0346     		mov	r3, r0
 825              		.loc 6 38 7
 826 0018 002B     		cmp	r3, #0
 827 001a 01D0     		beq	.L36
 828              		.loc 6 38 34 discriminator 1
 829 001c 0024     		movs	r4, #0
 830 001e 3DE0     		b	.L37
 831              	.L36:
 832              	.LBB4:
  39:Cpp/scheduler.hpp ****       if (queue_.front().time <= time) {
 833              		.loc 6 39 24
 834 0020 7B68     		ldr	r3, [r7, #4]
 835 0022 1846     		mov	r0, r3
 836 0024 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv
 837 0028 0346     		mov	r3, r0
 838              		.loc 6 39 26
 839 002a 9B6C     		ldr	r3, [r3, #72]
 840              		.loc 6 39 31
 841 002c FA6D     		ldr	r2, [r7, #92]
 842 002e 9A42     		cmp	r2, r3
 843 0030 2CBF     		ite	cs
 844 0032 0123     		movcs	r3, #1
 845 0034 0023     		movcc	r3, #0
 846 0036 DBB2     		uxtb	r3, r3
 847              		.loc 6 39 7
 848 0038 002B     		cmp	r3, #0
 849 003a 2ED0     		beq	.L38
 850              	.LBB5:
  40:Cpp/scheduler.hpp ****         auto task = pop();
 851              		.loc 6 40 25
ARM GAS  /tmp/ccU23Djm.s 			page 26


 852 003c 07F10803 		add	r3, r7, #8
 853 0040 7968     		ldr	r1, [r7, #4]
 854 0042 1846     		mov	r0, r3
 855 0044 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler3popEv
  41:Cpp/scheduler.hpp ****         assert_param(task.func);
 856              		.loc 6 41 9
 857 0048 07F10803 		add	r3, r7, #8
 858 004c 1846     		mov	r0, r3
 859 004e FFF7FEFF 		bl	_ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv
 860 0052 0346     		mov	r3, r0
 861 0054 002B     		cmp	r3, #0
 862 0056 03D1     		bne	.L39
 863              		.loc 6 41 9 is_stmt 0 discriminator 1
 864 0058 2921     		movs	r1, #41
 865 005a 1348     		ldr	r0, .L41
 866 005c FFF7FEFF 		bl	assert_failed
 867              	.L39:
  42:Cpp/scheduler.hpp ****         task.func();
 868              		.loc 6 42 18 is_stmt 1
 869 0060 07F10803 		add	r3, r7, #8
 870 0064 1846     		mov	r0, r3
 871 0066 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv
  43:Cpp/scheduler.hpp ****         if (task.repeat > 0) {
 872              		.loc 6 43 18
 873 006a 7B6D     		ldr	r3, [r7, #84]
 874              		.loc 6 43 9
 875 006c 002B     		cmp	r3, #0
 876 006e 0DD0     		beq	.L40
  44:Cpp/scheduler.hpp ****           task.time = time + task.repeat;
 877              		.loc 6 44 35
 878 0070 7A6D     		ldr	r2, [r7, #84]
 879              		.loc 6 44 28
 880 0072 FB6D     		ldr	r3, [r7, #92]
 881 0074 1344     		add	r3, r3, r2
 882              		.loc 6 44 21
 883 0076 3B65     		str	r3, [r7, #80]
  45:Cpp/scheduler.hpp ****           push(std::move(task));
 884              		.loc 6 45 30
 885 0078 07F10803 		add	r3, r7, #8
 886 007c 1846     		mov	r0, r3
 887 007e FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 888 0082 0346     		mov	r3, r0
 889              		.loc 6 45 15
 890 0084 1946     		mov	r1, r3
 891 0086 7868     		ldr	r0, [r7, #4]
 892 0088 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4pushEONS1_4TaskE
 893              	.L40:
  46:Cpp/scheduler.hpp ****         }
  47:Cpp/scheduler.hpp ****         return true;
 894              		.loc 6 47 16
 895 008c 0124     		movs	r4, #1
  40:Cpp/scheduler.hpp ****         assert_param(task.func);
 896              		.loc 6 40 25
 897 008e 07F10803 		add	r3, r7, #8
 898 0092 1846     		mov	r0, r3
 899 0094 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 900 0098 00E0     		b	.L37
ARM GAS  /tmp/ccU23Djm.s 			page 27


 901              	.L38:
 902              	.LBE5:
 903              	.LBE4:
  48:Cpp/scheduler.hpp ****       }
  49:Cpp/scheduler.hpp ****       return false;
 904              		.loc 6 49 14
 905 009a 0024     		movs	r4, #0
 906              	.L37:
 907 009c 2346     		mov	r3, r4
  50:Cpp/scheduler.hpp ****     }
 908              		.loc 6 50 5 discriminator 1
 909 009e 1846     		mov	r0, r3
 910 00a0 6437     		adds	r7, r7, #100
 911              	.LCFI66:
 912              		.cfi_def_cfa_offset 12
 913 00a2 BD46     		mov	sp, r7
 914              	.LCFI67:
 915              		.cfi_def_cfa_register 13
 916              		@ sp needed
 917 00a4 90BD     		pop	{r4, r7, pc}
 918              	.L42:
 919 00a6 00BF     		.align	2
 920              	.L41:
 921 00a8 00000000 		.word	.LC9
 922              		.cfi_endproc
 923              	.LFE3876:
 925              		.section	.text._ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EE
 926              		.align	1
 927              		.weak	_ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm
 928              		.syntax unified
 929              		.thumb
 930              		.thumb_func
 931              		.fpu fpv4-sp-d16
 933              	_ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm:
 934              	.LFB3880:
  51:Cpp/scheduler.hpp **** 
  52:Cpp/scheduler.hpp ****     /// Schedule function `f` to be run at least `delay` ms from now, repeating each `repeat` ms.
  53:Cpp/scheduler.hpp ****     /// 
  54:Cpp/scheduler.hpp ****     /// Repeats do not accumulate, i.e, after each execution of `f`, it simply reschedules with a d
  55:Cpp/scheduler.hpp ****     /// `repeat`.
  56:Cpp/scheduler.hpp ****     /// 
  57:Cpp/scheduler.hpp ****     /// `repeat == 0` means no repetition
  58:Cpp/scheduler.hpp ****     void schedule(Function f, std::uint32_t delay = 0, std::uint32_t repeat = 0)
 935              		.loc 6 58 10
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 96
 938              		@ frame_needed = 1, uses_anonymous_args = 0
 939 0000 80B5     		push	{r7, lr}
 940              	.LCFI68:
 941              		.cfi_def_cfa_offset 8
 942              		.cfi_offset 7, -8
 943              		.cfi_offset 14, -4
 944 0002 98B0     		sub	sp, sp, #96
 945              	.LCFI69:
 946              		.cfi_def_cfa_offset 104
 947 0004 00AF     		add	r7, sp, #0
 948              	.LCFI70:
ARM GAS  /tmp/ccU23Djm.s 			page 28


 949              		.cfi_def_cfa_register 7
 950 0006 F860     		str	r0, [r7, #12]
 951 0008 B960     		str	r1, [r7, #8]
 952 000a 7A60     		str	r2, [r7, #4]
 953 000c 3B60     		str	r3, [r7]
  59:Cpp/scheduler.hpp ****     {
  60:Cpp/scheduler.hpp ****       push({std::move(f), HAL_GetTick() + delay, repeat});
 954              		.loc 6 60 24
 955 000e B868     		ldr	r0, [r7, #8]
 956 0010 FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 957 0014 0246     		mov	r2, r0
 958              		.loc 6 60 11
 959 0016 07F11003 		add	r3, r7, #16
 960 001a 1146     		mov	r1, r2
 961 001c 1846     		mov	r0, r3
 962 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1EOS2_
 963              		.loc 6 60 38
 964 0022 FFF7FEFF 		bl	HAL_GetTick
 965 0026 0246     		mov	r2, r0
 966              		.loc 6 60 41
 967 0028 7B68     		ldr	r3, [r7, #4]
 968 002a 1344     		add	r3, r3, r2
 969              		.loc 6 60 11
 970 002c BB65     		str	r3, [r7, #88]
 971 002e 3B68     		ldr	r3, [r7]
 972 0030 FB65     		str	r3, [r7, #92]
 973 0032 07F11003 		add	r3, r7, #16
 974 0036 1946     		mov	r1, r3
 975 0038 F868     		ldr	r0, [r7, #12]
 976 003a FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4pushEONS1_4TaskE
 977              		.loc 6 60 57
 978 003e 07F11003 		add	r3, r7, #16
 979 0042 1846     		mov	r0, r3
 980 0044 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
  61:Cpp/scheduler.hpp ****     }
 981              		.loc 6 61 5
 982 0048 00BF     		nop
 983 004a 6037     		adds	r7, r7, #96
 984              	.LCFI71:
 985              		.cfi_def_cfa_offset 8
 986 004c BD46     		mov	sp, r7
 987              	.LCFI72:
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 004e 80BD     		pop	{r7, pc}
 991              		.cfi_endproc
 992              	.LFE3880:
 994              		.section	.text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14con
 995              		.align	1
 996              		.weak	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_ty
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmE
 1003              	.LFB3882:
  62:Cpp/scheduler.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 29


  63:Cpp/scheduler.hpp ****     void schedule_cond_repeat(CondRepeatFunction f, std::uint32_t delay = 0) {
  64:Cpp/scheduler.hpp ****       schedule([this, ff = std::move(f)] () mutable {
 1004              		.loc 6 64 16
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 56
 1007              		@ frame_needed = 1, uses_anonymous_args = 0
 1008 0000 90B5     		push	{r4, r7, lr}
 1009              	.LCFI73:
 1010              		.cfi_def_cfa_offset 12
 1011              		.cfi_offset 4, -12
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 8FB0     		sub	sp, sp, #60
 1015              	.LCFI74:
 1016              		.cfi_def_cfa_offset 72
 1017 0004 00AF     		add	r7, sp, #0
 1018              	.LCFI75:
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
 1021              	.LBB6:
  65:Cpp/scheduler.hpp ****         auto repeat = ff();
 1022              		.loc 6 65 25
 1023 0008 7B68     		ldr	r3, [r7, #4]
 1024 000a 0833     		adds	r3, r3, #8
 1025 000c 1846     		mov	r0, r3
 1026 000e FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv
 1027 0012 7863     		str	r0, [r7, #52]
  66:Cpp/scheduler.hpp ****         if (repeat) {
 1028              		.loc 6 66 9
 1029 0014 7B6B     		ldr	r3, [r7, #52]
 1030 0016 002B     		cmp	r3, #0
 1031 0018 19D0     		beq	.L46
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1032              		.loc 6 64 45
 1033 001a 7B68     		ldr	r3, [r7, #4]
 1034 001c 1C68     		ldr	r4, [r3]
  67:Cpp/scheduler.hpp ****           schedule_cond_repeat(std::move(ff), repeat);
 1035              		.loc 6 67 42
 1036 001e 7B68     		ldr	r3, [r7, #4]
 1037 0020 0833     		adds	r3, r3, #8
 1038              		.loc 6 67 44
 1039 0022 1846     		mov	r0, r3
 1040 0024 FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 1041 0028 0246     		mov	r2, r0
 1042              		.loc 6 67 31
 1043 002a 07F10803 		add	r3, r7, #8
 1044 002e 1146     		mov	r1, r2
 1045 0030 1846     		mov	r0, r3
 1046 0032 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1EOS2_
 1047 0036 07F10803 		add	r3, r7, #8
 1048 003a 7A6B     		ldr	r2, [r7, #52]
 1049 003c 1946     		mov	r1, r3
 1050 003e 2046     		mov	r0, r4
 1051 0040 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2E
 1052              		.loc 6 67 53
 1053 0044 07F10803 		add	r3, r7, #8
 1054 0048 1846     		mov	r0, r3
ARM GAS  /tmp/ccU23Djm.s 			page 30


 1055 004a FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EED1Ev
 1056              	.L46:
 1057              	.LBE6:
  68:Cpp/scheduler.hpp ****         }
  69:Cpp/scheduler.hpp ****       }, delay);
 1058              		.loc 6 69 7
 1059 004e 00BF     		nop
 1060 0050 3C37     		adds	r7, r7, #60
 1061              	.LCFI76:
 1062              		.cfi_def_cfa_offset 12
 1063 0052 BD46     		mov	sp, r7
 1064              	.LCFI77:
 1065              		.cfi_def_cfa_register 13
 1066              		@ sp needed
 1067 0054 90BD     		pop	{r4, r7, pc}
 1068              		.cfi_endproc
 1069              	.LFE3882:
 1071              		.section	.text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14con
 1072              		.align	1
 1073              		.weak	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_ty
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv4-sp-d16
 1079              	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmE
 1080              	.LFB3884:
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1081              		.loc 6 64 40
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 8
 1084              		@ frame_needed = 1, uses_anonymous_args = 0
 1085 0000 80B5     		push	{r7, lr}
 1086              	.LCFI78:
 1087              		.cfi_def_cfa_offset 8
 1088              		.cfi_offset 7, -8
 1089              		.cfi_offset 14, -4
 1090 0002 82B0     		sub	sp, sp, #8
 1091              	.LCFI79:
 1092              		.cfi_def_cfa_offset 16
 1093 0004 00AF     		add	r7, sp, #0
 1094              	.LCFI80:
 1095              		.cfi_def_cfa_register 7
 1096 0006 7860     		str	r0, [r7, #4]
 1097              	.LBB7:
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1098              		.loc 6 64 40
 1099 0008 7B68     		ldr	r3, [r7, #4]
 1100 000a 0833     		adds	r3, r3, #8
 1101 000c 1846     		mov	r0, r3
 1102 000e FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EED1Ev
 1103              	.LBE7:
 1104 0012 7B68     		ldr	r3, [r7, #4]
 1105 0014 1846     		mov	r0, r3
 1106 0016 0837     		adds	r7, r7, #8
 1107              	.LCFI81:
 1108              		.cfi_def_cfa_offset 8
 1109 0018 BD46     		mov	sp, r7
ARM GAS  /tmp/ccU23Djm.s 			page 31


 1110              	.LCFI82:
 1111              		.cfi_def_cfa_register 13
 1112              		@ sp needed
 1113 001a 80BD     		pop	{r7, pc}
 1114              		.cfi_endproc
 1115              	.LFE3884:
 1117              		.weak	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_ty
 1118              		.thumb_set _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14constru
 1119              		.section	.text._ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14cons
 1120              		.align	1
 1121              		.weak	_ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_typ
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	_ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEm:
 1128              	.LFB3881:
  63:Cpp/scheduler.hpp ****       schedule([this, ff = std::move(f)] () mutable {
 1129              		.loc 6 63 10
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 136
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133 0000 80B5     		push	{r7, lr}
 1134              	.LCFI83:
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 A2B0     		sub	sp, sp, #136
 1139              	.LCFI84:
 1140              		.cfi_def_cfa_offset 144
 1141 0004 00AF     		add	r7, sp, #0
 1142              	.LCFI85:
 1143              		.cfi_def_cfa_register 7
 1144 0006 F860     		str	r0, [r7, #12]
 1145 0008 B960     		str	r1, [r7, #8]
 1146 000a 7A60     		str	r2, [r7, #4]
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1147              		.loc 6 64 15
 1148 000c FB68     		ldr	r3, [r7, #12]
 1149 000e BB65     		str	r3, [r7, #88]
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1150              		.loc 6 64 39
 1151 0010 B868     		ldr	r0, [r7, #8]
 1152 0012 FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 1153 0016 0246     		mov	r2, r0
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1154              		.loc 6 64 15
 1155 0018 07F15803 		add	r3, r7, #88
 1156 001c 0833     		adds	r3, r3, #8
 1157 001e 1146     		mov	r1, r2
 1158 0020 1846     		mov	r0, r3
 1159 0022 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1EOS2_
 1160 0026 07F15802 		add	r2, r7, #88
 1161 002a 07F11003 		add	r3, r7, #16
 1162 002e 1146     		mov	r1, r2
 1163 0030 1846     		mov	r0, r3
 1164 0032 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZN4otto3mcu9Scheduler20schedule_cond_r
ARM GAS  /tmp/ccU23Djm.s 			page 32


 1165 0036 07F11001 		add	r1, r7, #16
 1166 003a 0023     		movs	r3, #0
 1167 003c 7A68     		ldr	r2, [r7, #4]
 1168 003e F868     		ldr	r0, [r7, #12]
 1169 0040 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm
 1170              		.loc 6 69 15
 1171 0044 07F11003 		add	r3, r7, #16
 1172 0048 1846     		mov	r0, r3
 1173 004a FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 1174              		.loc 6 64 16
 1175 004e 07F15803 		add	r3, r7, #88
 1176 0052 1846     		mov	r0, r3
 1177 0054 FFF7FEFF 		bl	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2
  70:Cpp/scheduler.hpp ****     }
 1178              		.loc 6 70 5
 1179 0058 00BF     		nop
 1180 005a 8837     		adds	r7, r7, #136
 1181              	.LCFI86:
 1182              		.cfi_def_cfa_offset 8
 1183 005c BD46     		mov	sp, r7
 1184              	.LCFI87:
 1185              		.cfi_def_cfa_register 13
 1186              		@ sp needed
 1187 005e 80BD     		pop	{r7, pc}
 1188              		.cfi_endproc
 1189              	.LFE3881:
 1191              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv,"axG",%progbits
 1192              		.align	1
 1193              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1197              		.fpu fpv4-sp-d16
 1199              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv:
 1200              	.LFB3887:
  46:Cpp/local_vector.hpp **** 
  47:Cpp/local_vector.hpp ****     constexpr std::size_t size() const noexcept
  48:Cpp/local_vector.hpp ****     {
  49:Cpp/local_vector.hpp ****       return _size;
  50:Cpp/local_vector.hpp ****     }
  51:Cpp/local_vector.hpp **** 
  52:Cpp/local_vector.hpp ****     constexpr bool empty() const noexcept
  53:Cpp/local_vector.hpp ****     {
  54:Cpp/local_vector.hpp ****       return size() == 0;
  55:Cpp/local_vector.hpp ****     }
  56:Cpp/local_vector.hpp **** 
  57:Cpp/local_vector.hpp ****     constexpr bool full() const noexcept
  58:Cpp/local_vector.hpp ****     {
  59:Cpp/local_vector.hpp ****       return size() == capacity();
  60:Cpp/local_vector.hpp ****     }
  61:Cpp/local_vector.hpp **** 
  62:Cpp/local_vector.hpp ****     // Iterators
  63:Cpp/local_vector.hpp **** 
  64:Cpp/local_vector.hpp ****     constexpr auto begin() noexcept
 1201              		.loc 5 64 20
 1202              		.cfi_startproc
ARM GAS  /tmp/ccU23Djm.s 			page 33


 1203              		@ args = 0, pretend = 0, frame = 8
 1204              		@ frame_needed = 1, uses_anonymous_args = 0
 1205 0000 80B5     		push	{r7, lr}
 1206              	.LCFI88:
 1207              		.cfi_def_cfa_offset 8
 1208              		.cfi_offset 7, -8
 1209              		.cfi_offset 14, -4
 1210 0002 82B0     		sub	sp, sp, #8
 1211              	.LCFI89:
 1212              		.cfi_def_cfa_offset 16
 1213 0004 00AF     		add	r7, sp, #0
 1214              	.LCFI90:
 1215              		.cfi_def_cfa_register 7
 1216 0006 7860     		str	r0, [r7, #4]
  65:Cpp/local_vector.hpp ****     {
  66:Cpp/local_vector.hpp ****       return data();
 1217              		.loc 5 66 19
 1218 0008 7868     		ldr	r0, [r7, #4]
 1219 000a FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
 1220 000e 0346     		mov	r3, r0
  67:Cpp/local_vector.hpp ****     }
 1221              		.loc 5 67 5
 1222 0010 1846     		mov	r0, r3
 1223 0012 0837     		adds	r7, r7, #8
 1224              	.LCFI91:
 1225              		.cfi_def_cfa_offset 8
 1226 0014 BD46     		mov	sp, r7
 1227              	.LCFI92:
 1228              		.cfi_def_cfa_register 13
 1229              		@ sp needed
 1230 0016 80BD     		pop	{r7, pc}
 1231              		.cfi_endproc
 1232              	.LFE3887:
 1234              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv,"axG",%progbits,_
 1235              		.align	1
 1236              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv
 1237              		.syntax unified
 1238              		.thumb
 1239              		.thumb_func
 1240              		.fpu fpv4-sp-d16
 1242              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv:
 1243              	.LFB3888:
  68:Cpp/local_vector.hpp **** 
  69:Cpp/local_vector.hpp ****     constexpr auto begin() const noexcept
  70:Cpp/local_vector.hpp ****     {
  71:Cpp/local_vector.hpp ****       return data();
  72:Cpp/local_vector.hpp ****     }
  73:Cpp/local_vector.hpp **** 
  74:Cpp/local_vector.hpp ****     constexpr auto end() noexcept
 1244              		.loc 5 74 20
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 8
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248 0000 80B5     		push	{r7, lr}
 1249              	.LCFI93:
 1250              		.cfi_def_cfa_offset 8
 1251              		.cfi_offset 7, -8
ARM GAS  /tmp/ccU23Djm.s 			page 34


 1252              		.cfi_offset 14, -4
 1253 0002 82B0     		sub	sp, sp, #8
 1254              	.LCFI94:
 1255              		.cfi_def_cfa_offset 16
 1256 0004 00AF     		add	r7, sp, #0
 1257              	.LCFI95:
 1258              		.cfi_def_cfa_register 7
 1259 0006 7860     		str	r0, [r7, #4]
  75:Cpp/local_vector.hpp ****     {
  76:Cpp/local_vector.hpp ****       return data() + _size;
 1260              		.loc 5 76 21
 1261 0008 7868     		ldr	r0, [r7, #4]
 1262 000a FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
 1263 000e 0146     		mov	r1, r0
 1264              		.loc 5 76 23
 1265 0010 7B68     		ldr	r3, [r7, #4]
 1266 0012 03F5A033 		add	r3, r3, #81920
 1267 0016 1A68     		ldr	r2, [r3]
 1268              		.loc 5 76 21
 1269 0018 1346     		mov	r3, r2
 1270 001a 9B00     		lsls	r3, r3, #2
 1271 001c 1344     		add	r3, r3, r2
 1272 001e 1B01     		lsls	r3, r3, #4
 1273              		.loc 5 76 23
 1274 0020 0B44     		add	r3, r3, r1
  77:Cpp/local_vector.hpp ****     }
 1275              		.loc 5 77 5
 1276 0022 1846     		mov	r0, r3
 1277 0024 0837     		adds	r7, r7, #8
 1278              	.LCFI96:
 1279              		.cfi_def_cfa_offset 8
 1280 0026 BD46     		mov	sp, r7
 1281              	.LCFI97:
 1282              		.cfi_def_cfa_register 13
 1283              		@ sp needed
 1284 0028 80BD     		pop	{r7, pc}
 1285              		.cfi_endproc
 1286              	.LFE3888:
 1288              		.section	.text._ZN4otto3mcu9Scheduler4TaskC2EOS2_,"axG",%progbits,_ZN4otto3mcu9Scheduler4TaskC5EOS
 1289              		.align	1
 1290              		.weak	_ZN4otto3mcu9Scheduler4TaskC2EOS2_
 1291              		.syntax unified
 1292              		.thumb
 1293              		.thumb_func
 1294              		.fpu fpv4-sp-d16
 1296              	_ZN4otto3mcu9Scheduler4TaskC2EOS2_:
 1297              	.LFB3890:
  17:Cpp/scheduler.hpp ****       /// Function to execute
 1298              		.loc 6 17 12
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 8
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302 0000 80B5     		push	{r7, lr}
 1303              	.LCFI98:
 1304              		.cfi_def_cfa_offset 8
 1305              		.cfi_offset 7, -8
 1306              		.cfi_offset 14, -4
ARM GAS  /tmp/ccU23Djm.s 			page 35


 1307 0002 82B0     		sub	sp, sp, #8
 1308              	.LCFI99:
 1309              		.cfi_def_cfa_offset 16
 1310 0004 00AF     		add	r7, sp, #0
 1311              	.LCFI100:
 1312              		.cfi_def_cfa_register 7
 1313 0006 7860     		str	r0, [r7, #4]
 1314 0008 3960     		str	r1, [r7]
 1315              	.LBB8:
  17:Cpp/scheduler.hpp ****       /// Function to execute
 1316              		.loc 6 17 12
 1317 000a 7B68     		ldr	r3, [r7, #4]
 1318 000c 3A68     		ldr	r2, [r7]
 1319 000e 1146     		mov	r1, r2
 1320 0010 1846     		mov	r0, r3
 1321 0012 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1EOS2_
 1322 0016 3B68     		ldr	r3, [r7]
 1323 0018 9A6C     		ldr	r2, [r3, #72]
 1324 001a 7B68     		ldr	r3, [r7, #4]
 1325 001c 9A64     		str	r2, [r3, #72]
 1326 001e 3B68     		ldr	r3, [r7]
 1327 0020 DA6C     		ldr	r2, [r3, #76]
 1328 0022 7B68     		ldr	r3, [r7, #4]
 1329 0024 DA64     		str	r2, [r3, #76]
 1330              	.LBE8:
 1331 0026 7B68     		ldr	r3, [r7, #4]
 1332 0028 1846     		mov	r0, r3
 1333 002a 0837     		adds	r7, r7, #8
 1334              	.LCFI101:
 1335              		.cfi_def_cfa_offset 8
 1336 002c BD46     		mov	sp, r7
 1337              	.LCFI102:
 1338              		.cfi_def_cfa_register 13
 1339              		@ sp needed
 1340 002e 80BD     		pop	{r7, pc}
 1341              		.cfi_endproc
 1342              	.LFE3890:
 1344              		.weak	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 1345              		.thumb_set _ZN4otto3mcu9Scheduler4TaskC1EOS2_,_ZN4otto3mcu9Scheduler4TaskC2EOS2_
 1346              		.section	.text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv,"axG",%progbits
 1347              		.align	1
 1348              		.weak	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
 1352              		.fpu fpv4-sp-d16
 1354              	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv:
 1355              	.LFB3894:
  47:Cpp/local_vector.hpp ****     {
 1356              		.loc 5 47 27
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 8
 1359              		@ frame_needed = 1, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
 1361 0000 80B4     		push	{r7}
 1362              	.LCFI103:
 1363              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccU23Djm.s 			page 36


 1364              		.cfi_offset 7, -4
 1365 0002 83B0     		sub	sp, sp, #12
 1366              	.LCFI104:
 1367              		.cfi_def_cfa_offset 16
 1368 0004 00AF     		add	r7, sp, #0
 1369              	.LCFI105:
 1370              		.cfi_def_cfa_register 7
 1371 0006 7860     		str	r0, [r7, #4]
  49:Cpp/local_vector.hpp ****     }
 1372              		.loc 5 49 14
 1373 0008 7B68     		ldr	r3, [r7, #4]
 1374 000a 03F5A033 		add	r3, r3, #81920
 1375 000e 1B68     		ldr	r3, [r3]
  50:Cpp/local_vector.hpp **** 
 1376              		.loc 5 50 5
 1377 0010 1846     		mov	r0, r3
 1378 0012 0C37     		adds	r7, r7, #12
 1379              	.LCFI106:
 1380              		.cfi_def_cfa_offset 4
 1381 0014 BD46     		mov	sp, r7
 1382              	.LCFI107:
 1383              		.cfi_def_cfa_register 13
 1384              		@ sp needed
 1385 0016 5DF8047B 		ldr	r7, [sp], #4
 1386              	.LCFI108:
 1387              		.cfi_restore 7
 1388              		.cfi_def_cfa_offset 0
 1389 001a 7047     		bx	lr
 1390              		.cfi_endproc
 1391              	.LFE3894:
 1393              		.section	.text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv,"axG",%progbit
 1394              		.align	1
 1395              		.weak	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu fpv4-sp-d16
 1401              	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv:
 1402              	.LFB3893:
  52:Cpp/local_vector.hpp ****     {
 1403              		.loc 5 52 20
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 8
 1406              		@ frame_needed = 1, uses_anonymous_args = 0
 1407 0000 80B5     		push	{r7, lr}
 1408              	.LCFI109:
 1409              		.cfi_def_cfa_offset 8
 1410              		.cfi_offset 7, -8
 1411              		.cfi_offset 14, -4
 1412 0002 82B0     		sub	sp, sp, #8
 1413              	.LCFI110:
 1414              		.cfi_def_cfa_offset 16
 1415 0004 00AF     		add	r7, sp, #0
 1416              	.LCFI111:
 1417              		.cfi_def_cfa_register 7
 1418 0006 7860     		str	r0, [r7, #4]
  54:Cpp/local_vector.hpp ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 37


 1419              		.loc 5 54 21
 1420 0008 7868     		ldr	r0, [r7, #4]
 1421 000a FFF7FEFF 		bl	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv
 1422 000e 0346     		mov	r3, r0
  54:Cpp/local_vector.hpp ****     }
 1423              		.loc 5 54 24
 1424 0010 002B     		cmp	r3, #0
 1425 0012 0CBF     		ite	eq
 1426 0014 0123     		moveq	r3, #1
 1427 0016 0023     		movne	r3, #0
 1428 0018 DBB2     		uxtb	r3, r3
  55:Cpp/local_vector.hpp **** 
 1429              		.loc 5 55 5
 1430 001a 1846     		mov	r0, r3
 1431 001c 0837     		adds	r7, r7, #8
 1432              	.LCFI112:
 1433              		.cfi_def_cfa_offset 8
 1434 001e BD46     		mov	sp, r7
 1435              	.LCFI113:
 1436              		.cfi_def_cfa_register 13
 1437              		@ sp needed
 1438 0020 80BD     		pop	{r7, pc}
 1439              		.cfi_endproc
 1440              	.LFE3893:
 1442              		.section	.text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Schedul
 1443              		.align	1
 1444              		.weak	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskEL
 1445              		.syntax unified
 1446              		.thumb
 1447              		.thumb_func
 1448              		.fpu fpv4-sp-d16
 1450              	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE
 1451              	.LFB3901:
 1452              		.file 7 "Cpp/expected.hpp"
   1:Cpp/expected.hpp **** ///
   2:Cpp/expected.hpp **** // expected - An implementation of std::expected with extensions
   3:Cpp/expected.hpp **** // Written in 2017 by Simon Brand (@TartanLlama)
   4:Cpp/expected.hpp **** //
   5:Cpp/expected.hpp **** // To the extent possible under law, the author(s) have dedicated all
   6:Cpp/expected.hpp **** // copyright and related and neighboring rights to this software to the
   7:Cpp/expected.hpp **** // public domain worldwide. This software is distributed without any warranty.
   8:Cpp/expected.hpp **** //
   9:Cpp/expected.hpp **** // You should have received a copy of the CC0 Public Domain Dedication
  10:Cpp/expected.hpp **** // along with this software. If not, see
  11:Cpp/expected.hpp **** // <http://creativecommons.org/publicdomain/zero/1.0/>.
  12:Cpp/expected.hpp **** ///
  13:Cpp/expected.hpp **** 
  14:Cpp/expected.hpp **** #ifndef TL_EXPECTED_HPP
  15:Cpp/expected.hpp **** #define TL_EXPECTED_HPP
  16:Cpp/expected.hpp **** 
  17:Cpp/expected.hpp **** #define TL_EXPECTED_VERSION_MAJOR 0
  18:Cpp/expected.hpp **** #define TL_EXPECTED_VERSION_MINOR 2
  19:Cpp/expected.hpp **** 
  20:Cpp/expected.hpp **** #include <exception>
  21:Cpp/expected.hpp **** #include <functional>
  22:Cpp/expected.hpp **** #include <type_traits>
  23:Cpp/expected.hpp **** #include <utility>
ARM GAS  /tmp/ccU23Djm.s 			page 38


  24:Cpp/expected.hpp **** 
  25:Cpp/expected.hpp **** #if defined(__EXCEPTIONS) || defined(_CPPUNWIND)
  26:Cpp/expected.hpp **** #define TL_EXPECTED_EXCEPTIONS_ENABLED
  27:Cpp/expected.hpp **** #endif
  28:Cpp/expected.hpp **** 
  29:Cpp/expected.hpp **** #if (defined(_MSC_VER) && _MSC_VER == 1900)
  30:Cpp/expected.hpp **** /// \exclude
  31:Cpp/expected.hpp **** #define TL_EXPECTED_MSVC2015
  32:Cpp/expected.hpp **** #define TL_EXPECTED_MSVC2015_CONSTEXPR
  33:Cpp/expected.hpp **** #else
  34:Cpp/expected.hpp **** #define TL_EXPECTED_MSVC2015_CONSTEXPR constexpr
  35:Cpp/expected.hpp **** #endif
  36:Cpp/expected.hpp **** 
  37:Cpp/expected.hpp **** #if (defined(__GNUC__) && __GNUC__ == 4 && __GNUC_MINOR__ <= 9 &&              \
  38:Cpp/expected.hpp ****      !defined(__clang__))
  39:Cpp/expected.hpp **** /// \exclude
  40:Cpp/expected.hpp **** #define TL_EXPECTED_GCC49
  41:Cpp/expected.hpp **** #endif
  42:Cpp/expected.hpp **** 
  43:Cpp/expected.hpp **** #if (defined(__GNUC__) && __GNUC__ == 5 && __GNUC_MINOR__ <= 4 &&              \
  44:Cpp/expected.hpp ****      !defined(__clang__))
  45:Cpp/expected.hpp **** /// \exclude
  46:Cpp/expected.hpp **** #define TL_EXPECTED_GCC54
  47:Cpp/expected.hpp **** #endif
  48:Cpp/expected.hpp **** 
  49:Cpp/expected.hpp **** #if (defined(__GNUC__) && __GNUC__ == 5 && __GNUC_MINOR__ <= 5 &&              \
  50:Cpp/expected.hpp ****      !defined(__clang__))
  51:Cpp/expected.hpp **** /// \exclude
  52:Cpp/expected.hpp **** #define TL_EXPECTED_GCC55
  53:Cpp/expected.hpp **** #endif
  54:Cpp/expected.hpp **** 
  55:Cpp/expected.hpp **** #if (defined(__GNUC__) && __GNUC__ == 4 && __GNUC_MINOR__ <= 9 &&              \
  56:Cpp/expected.hpp ****      !defined(__clang__))
  57:Cpp/expected.hpp **** // GCC < 5 doesn't support overloading on const&& for member functions
  58:Cpp/expected.hpp **** /// \exclude
  59:Cpp/expected.hpp **** #define TL_EXPECTED_NO_CONSTRR
  60:Cpp/expected.hpp **** 
  61:Cpp/expected.hpp **** // GCC < 5 doesn't support some standard C++11 type traits
  62:Cpp/expected.hpp **** /// \exclude
  63:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T)                         \
  64:Cpp/expected.hpp ****   std::has_trivial_copy_constructor<T>
  65:Cpp/expected.hpp **** /// \exclude
  66:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_COPY_ASSIGNABLE(T)                            \
  67:Cpp/expected.hpp ****   std::has_trivial_copy_assign<T>
  68:Cpp/expected.hpp **** 
  69:Cpp/expected.hpp **** // This one will be different for GCC 5.7 if it's ever supported
  70:Cpp/expected.hpp **** /// \exclude
  71:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(T)                               \
  72:Cpp/expected.hpp ****   std::is_trivially_destructible<T>
  73:Cpp/expected.hpp **** 
  74:Cpp/expected.hpp **** // GCC 5 < v < 8 has a bug in is_trivially_copy_constructible which breaks std::vector
  75:Cpp/expected.hpp **** // for non-copyable types
  76:Cpp/expected.hpp **** #elif (defined(__GNUC__) && __GNUC__ < 8 &&                                                \
  77:Cpp/expected.hpp ****      !defined(__clang__))
  78:Cpp/expected.hpp **** #ifndef TL_GCC_LESS_8_TRIVIALLY_COPY_CONSTRUCTIBLE_MUTEX
  79:Cpp/expected.hpp **** #define TL_GCC_LESS_8_TRIVIALLY_COPY_CONSTRUCTIBLE_MUTEX
  80:Cpp/expected.hpp **** namespace tl {
ARM GAS  /tmp/ccU23Djm.s 			page 39


  81:Cpp/expected.hpp ****   namespace detail {
  82:Cpp/expected.hpp ****       template<class T>
  83:Cpp/expected.hpp ****       struct is_trivially_copy_constructible : std::is_trivially_copy_constructible<T>{};
  84:Cpp/expected.hpp **** #ifdef _GLIBCXX_VECTOR
  85:Cpp/expected.hpp ****       template<class T, class A>
  86:Cpp/expected.hpp ****       struct is_trivially_copy_constructible<std::vector<T,A>>
  87:Cpp/expected.hpp ****           : std::is_trivially_copy_constructible<T>{};
  88:Cpp/expected.hpp **** #endif
  89:Cpp/expected.hpp ****   }
  90:Cpp/expected.hpp **** }
  91:Cpp/expected.hpp **** #endif
  92:Cpp/expected.hpp **** 
  93:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T)                                     \
  94:Cpp/expected.hpp ****   tl::detail::is_trivially_copy_constructible<T>
  95:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_COPY_ASSIGNABLE(T)                                        \
  96:Cpp/expected.hpp ****   std::is_trivially_copy_assignable<T>
  97:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(T) std::is_trivially_destructible<T>
  98:Cpp/expected.hpp **** #else
  99:Cpp/expected.hpp **** /// \exclude
 100:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T)                         \
 101:Cpp/expected.hpp ****   std::is_trivially_copy_constructible<T>
 102:Cpp/expected.hpp **** /// \exclude
 103:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_COPY_ASSIGNABLE(T)                            \
 104:Cpp/expected.hpp ****   std::is_trivially_copy_assignable<T>
 105:Cpp/expected.hpp **** /// \exclude
 106:Cpp/expected.hpp **** #define TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(T)                               \
 107:Cpp/expected.hpp ****   std::is_trivially_destructible<T>
 108:Cpp/expected.hpp **** #endif
 109:Cpp/expected.hpp **** 
 110:Cpp/expected.hpp **** #if __cplusplus > 201103L
 111:Cpp/expected.hpp **** /// \exclude
 112:Cpp/expected.hpp **** #define TL_EXPECTED_CXX14
 113:Cpp/expected.hpp **** #endif
 114:Cpp/expected.hpp **** 
 115:Cpp/expected.hpp **** #ifdef TL_EXPECTED_GCC49
 116:Cpp/expected.hpp **** #define TL_EXPECTED_GCC49_CONSTEXPR
 117:Cpp/expected.hpp **** #else
 118:Cpp/expected.hpp **** #define TL_EXPECTED_GCC49_CONSTEXPR constexpr
 119:Cpp/expected.hpp **** #endif
 120:Cpp/expected.hpp **** 
 121:Cpp/expected.hpp **** #if (__cplusplus == 201103L || defined(TL_EXPECTED_MSVC2015) ||                \
 122:Cpp/expected.hpp ****      defined(TL_EXPECTED_GCC49))
 123:Cpp/expected.hpp **** /// \exclude
 124:Cpp/expected.hpp **** #define TL_EXPECTED_11_CONSTEXPR
 125:Cpp/expected.hpp **** #else
 126:Cpp/expected.hpp **** /// \exclude
 127:Cpp/expected.hpp **** #define TL_EXPECTED_11_CONSTEXPR constexpr
 128:Cpp/expected.hpp **** #endif
 129:Cpp/expected.hpp **** 
 130:Cpp/expected.hpp **** namespace tl {
 131:Cpp/expected.hpp **** template <class T, class E> class expected;
 132:Cpp/expected.hpp **** 
 133:Cpp/expected.hpp **** #ifndef TL_MONOSTATE_INPLACE_MUTEX
 134:Cpp/expected.hpp **** #define TL_MONOSTATE_INPLACE_MUTEX
 135:Cpp/expected.hpp **** /// \brief Used to represent an expected with no data
 136:Cpp/expected.hpp **** class monostate {};
 137:Cpp/expected.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 40


 138:Cpp/expected.hpp **** /// \brief A tag type to tell expected to construct its value in-place
 139:Cpp/expected.hpp **** struct in_place_t {
 140:Cpp/expected.hpp ****   explicit in_place_t() = default;
 141:Cpp/expected.hpp **** };
 142:Cpp/expected.hpp **** /// \brief A tag to tell expected to construct its value in-place
 143:Cpp/expected.hpp **** static constexpr in_place_t in_place{};
 144:Cpp/expected.hpp **** #endif
 145:Cpp/expected.hpp **** 
 146:Cpp/expected.hpp **** /// Used as a wrapper to store the unexpected value
 147:Cpp/expected.hpp **** template <class E> class unexpected {
 148:Cpp/expected.hpp **** public:
 149:Cpp/expected.hpp ****   static_assert(!std::is_same<E, void>::value, "E must not be void");
 150:Cpp/expected.hpp **** 
 151:Cpp/expected.hpp ****   unexpected() = delete;
 152:Cpp/expected.hpp ****   constexpr explicit unexpected(const E &e) : m_val(e) {}
 153:Cpp/expected.hpp **** 
 154:Cpp/expected.hpp ****   constexpr explicit unexpected(E &&e) : m_val(std::move(e)) {}
 155:Cpp/expected.hpp **** 
 156:Cpp/expected.hpp ****   /// \returns the contained value
 157:Cpp/expected.hpp ****   /// \group unexpected_value
 158:Cpp/expected.hpp ****   constexpr const E &value() const & { return m_val; }
 159:Cpp/expected.hpp ****   /// \group unexpected_value
 160:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR E &value() & { return m_val; }
 161:Cpp/expected.hpp ****   /// \group unexpected_value
 162:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR E &&value() && { return std::move(m_val); }
 163:Cpp/expected.hpp ****   /// \exclude
 164:Cpp/expected.hpp ****   constexpr const E &&value() const && { return std::move(m_val); }
 165:Cpp/expected.hpp **** 
 166:Cpp/expected.hpp **** private:
 167:Cpp/expected.hpp ****   E m_val;
 168:Cpp/expected.hpp **** };
 169:Cpp/expected.hpp **** 
 170:Cpp/expected.hpp **** /// \brief Compares two unexpected objects
 171:Cpp/expected.hpp **** /// \details Simply compares lhs.value() to rhs.value()
 172:Cpp/expected.hpp **** /// \group unexpected_relop
 173:Cpp/expected.hpp **** template <class E>
 174:Cpp/expected.hpp **** constexpr bool operator==(const unexpected<E> &lhs, const unexpected<E> &rhs) {
 175:Cpp/expected.hpp ****   return lhs.value() == rhs.value();
 176:Cpp/expected.hpp **** }
 177:Cpp/expected.hpp **** /// \group unexpected_relop
 178:Cpp/expected.hpp **** template <class E>
 179:Cpp/expected.hpp **** constexpr bool operator!=(const unexpected<E> &lhs, const unexpected<E> &rhs) {
 180:Cpp/expected.hpp ****   return lhs.value() != rhs.value();
 181:Cpp/expected.hpp **** }
 182:Cpp/expected.hpp **** /// \group unexpected_relop
 183:Cpp/expected.hpp **** template <class E>
 184:Cpp/expected.hpp **** constexpr bool operator<(const unexpected<E> &lhs, const unexpected<E> &rhs) {
 185:Cpp/expected.hpp ****   return lhs.value() < rhs.value();
 186:Cpp/expected.hpp **** }
 187:Cpp/expected.hpp **** /// \group unexpected_relop
 188:Cpp/expected.hpp **** template <class E>
 189:Cpp/expected.hpp **** constexpr bool operator<=(const unexpected<E> &lhs, const unexpected<E> &rhs) {
 190:Cpp/expected.hpp ****   return lhs.value() <= rhs.value();
 191:Cpp/expected.hpp **** }
 192:Cpp/expected.hpp **** /// \group unexpected_relop
 193:Cpp/expected.hpp **** template <class E>
 194:Cpp/expected.hpp **** constexpr bool operator>(const unexpected<E> &lhs, const unexpected<E> &rhs) {
ARM GAS  /tmp/ccU23Djm.s 			page 41


 195:Cpp/expected.hpp ****   return lhs.value() > rhs.value();
 196:Cpp/expected.hpp **** }
 197:Cpp/expected.hpp **** /// \group unexpected_relop
 198:Cpp/expected.hpp **** template <class E>
 199:Cpp/expected.hpp **** constexpr bool operator>=(const unexpected<E> &lhs, const unexpected<E> &rhs) {
 200:Cpp/expected.hpp ****   return lhs.value() >= rhs.value();
 201:Cpp/expected.hpp **** }
 202:Cpp/expected.hpp **** 
 203:Cpp/expected.hpp **** /// Create an `unexpected` from `e`, deducing the return type
 204:Cpp/expected.hpp **** ///
 205:Cpp/expected.hpp **** /// *Example:*
 206:Cpp/expected.hpp **** /// auto e1 = tl::make_unexpected(42);
 207:Cpp/expected.hpp **** /// unexpected<int> e2 (42); //same semantics
 208:Cpp/expected.hpp **** template <class E>
 209:Cpp/expected.hpp **** unexpected<typename std::decay<E>::type> make_unexpected(E &&e) {
 210:Cpp/expected.hpp ****   return unexpected<typename std::decay<E>::type>(std::forward<E>(e));
 211:Cpp/expected.hpp **** }
 212:Cpp/expected.hpp **** 
 213:Cpp/expected.hpp **** /// \brief A tag type to tell expected to construct the unexpected value
 214:Cpp/expected.hpp **** struct unexpect_t {
 215:Cpp/expected.hpp ****   unexpect_t() = default;
 216:Cpp/expected.hpp **** };
 217:Cpp/expected.hpp **** /// \brief A tag to tell expected to construct the unexpected value
 218:Cpp/expected.hpp **** static constexpr unexpect_t unexpect{};
 219:Cpp/expected.hpp **** 
 220:Cpp/expected.hpp **** /// \exclude
 221:Cpp/expected.hpp **** namespace detail {
 222:Cpp/expected.hpp **** template<typename E>
 223:Cpp/expected.hpp **** [[noreturn]] TL_EXPECTED_11_CONSTEXPR void throw_exception(E &&e) {
 224:Cpp/expected.hpp **** #ifdef TL_EXPECTED_EXCEPTIONS_ENABLED
 225:Cpp/expected.hpp ****     throw std::forward<E>(e);
 226:Cpp/expected.hpp **** #else
 227:Cpp/expected.hpp ****   #ifdef _MSC_VER
 228:Cpp/expected.hpp ****     __assume(0);
 229:Cpp/expected.hpp ****   #else
 230:Cpp/expected.hpp ****     __builtin_unreachable();
 231:Cpp/expected.hpp ****   #endif
 232:Cpp/expected.hpp **** #endif
 233:Cpp/expected.hpp **** }
 234:Cpp/expected.hpp **** 
 235:Cpp/expected.hpp **** #ifndef TL_TRAITS_MUTEX
 236:Cpp/expected.hpp **** #define TL_TRAITS_MUTEX
 237:Cpp/expected.hpp **** // C++14-style aliases for brevity
 238:Cpp/expected.hpp **** template <class T> using remove_const_t = typename std::remove_const<T>::type;
 239:Cpp/expected.hpp **** template <class T>
 240:Cpp/expected.hpp **** using remove_reference_t = typename std::remove_reference<T>::type;
 241:Cpp/expected.hpp **** template <class T> using decay_t = typename std::decay<T>::type;
 242:Cpp/expected.hpp **** template <bool E, class T = void>
 243:Cpp/expected.hpp **** using enable_if_t = typename std::enable_if<E, T>::type;
 244:Cpp/expected.hpp **** template <bool B, class T, class F>
 245:Cpp/expected.hpp **** using conditional_t = typename std::conditional<B, T, F>::type;
 246:Cpp/expected.hpp **** 
 247:Cpp/expected.hpp **** // std::conjunction from C++17
 248:Cpp/expected.hpp **** template <class...> struct conjunction : std::true_type {};
 249:Cpp/expected.hpp **** template <class B> struct conjunction<B> : B {};
 250:Cpp/expected.hpp **** template <class B, class... Bs>
 251:Cpp/expected.hpp **** struct conjunction<B, Bs...>
ARM GAS  /tmp/ccU23Djm.s 			page 42


 252:Cpp/expected.hpp ****     : std::conditional<bool(B::value), conjunction<Bs...>, B>::type {};
 253:Cpp/expected.hpp **** 
 254:Cpp/expected.hpp **** // std::invoke from C++17
 255:Cpp/expected.hpp **** // https://stackoverflow.com/questions/38288042/c11-14-invoke-workaround
 256:Cpp/expected.hpp **** template <typename Fn, typename... Args,
 257:Cpp/expected.hpp ****           typename = enable_if_t<std::is_member_pointer<decay_t<Fn>>{}>,
 258:Cpp/expected.hpp ****           int = 0>
 259:Cpp/expected.hpp **** constexpr auto invoke(Fn &&f, Args &&... args) noexcept(
 260:Cpp/expected.hpp ****     noexcept(std::mem_fn(f)(std::forward<Args>(args)...)))
 261:Cpp/expected.hpp ****     -> decltype(std::mem_fn(f)(std::forward<Args>(args)...)) {
 262:Cpp/expected.hpp ****   return std::mem_fn(f)(std::forward<Args>(args)...);
 263:Cpp/expected.hpp **** }
 264:Cpp/expected.hpp **** 
 265:Cpp/expected.hpp **** template <typename Fn, typename... Args,
 266:Cpp/expected.hpp ****           typename = enable_if_t<!std::is_member_pointer<decay_t<Fn>>{}>>
 267:Cpp/expected.hpp **** constexpr auto invoke(Fn &&f, Args &&... args) noexcept(
 268:Cpp/expected.hpp ****     noexcept(std::forward<Fn>(f)(std::forward<Args>(args)...)))
 269:Cpp/expected.hpp ****     -> decltype(std::forward<Fn>(f)(std::forward<Args>(args)...)) {
 270:Cpp/expected.hpp ****   return std::forward<Fn>(f)(std::forward<Args>(args)...);
 271:Cpp/expected.hpp **** }
 272:Cpp/expected.hpp **** 
 273:Cpp/expected.hpp **** // std::invoke_result from C++17
 274:Cpp/expected.hpp **** template <class F, class, class... Us> struct invoke_result_impl;
 275:Cpp/expected.hpp **** 
 276:Cpp/expected.hpp **** template <class F, class... Us>
 277:Cpp/expected.hpp **** struct invoke_result_impl<
 278:Cpp/expected.hpp ****     F, decltype(detail::invoke(std::declval<F>(), std::declval<Us>()...), void()),
 279:Cpp/expected.hpp ****     Us...> {
 280:Cpp/expected.hpp ****   using type = decltype(detail::invoke(std::declval<F>(), std::declval<Us>()...));
 281:Cpp/expected.hpp **** };
 282:Cpp/expected.hpp **** 
 283:Cpp/expected.hpp **** template <class F, class... Us>
 284:Cpp/expected.hpp **** using invoke_result = invoke_result_impl<F, void, Us...>;
 285:Cpp/expected.hpp **** 
 286:Cpp/expected.hpp **** template <class F, class... Us>
 287:Cpp/expected.hpp **** using invoke_result_t = typename invoke_result<F, Us...>::type;
 288:Cpp/expected.hpp **** #endif
 289:Cpp/expected.hpp **** 
 290:Cpp/expected.hpp **** // Trait for checking if a type is a tl::expected
 291:Cpp/expected.hpp **** template <class T> struct is_expected_impl : std::false_type {};
 292:Cpp/expected.hpp **** template <class T, class E>
 293:Cpp/expected.hpp **** struct is_expected_impl<expected<T, E>> : std::true_type {};
 294:Cpp/expected.hpp **** template <class T> using is_expected = is_expected_impl<decay_t<T>>;
 295:Cpp/expected.hpp **** 
 296:Cpp/expected.hpp **** template <class T, class E, class U>
 297:Cpp/expected.hpp **** using expected_enable_forward_value = detail::enable_if_t<
 298:Cpp/expected.hpp ****     std::is_constructible<T, U &&>::value &&
 299:Cpp/expected.hpp ****     !std::is_same<detail::decay_t<U>, in_place_t>::value &&
 300:Cpp/expected.hpp ****     !std::is_same<expected<T, E>, detail::decay_t<U>>::value &&
 301:Cpp/expected.hpp ****     !std::is_same<unexpected<E>, detail::decay_t<U>>::value>;
 302:Cpp/expected.hpp **** 
 303:Cpp/expected.hpp **** template <class T, class E, class U, class G, class UR, class GR>
 304:Cpp/expected.hpp **** using expected_enable_from_other = detail::enable_if_t<
 305:Cpp/expected.hpp ****     std::is_constructible<T, UR>::value &&
 306:Cpp/expected.hpp ****     std::is_constructible<E, GR>::value &&
 307:Cpp/expected.hpp ****     !std::is_constructible<T, expected<U, G> &>::value &&
 308:Cpp/expected.hpp ****     !std::is_constructible<T, expected<U, G> &&>::value &&
ARM GAS  /tmp/ccU23Djm.s 			page 43


 309:Cpp/expected.hpp ****     !std::is_constructible<T, const expected<U, G> &>::value &&
 310:Cpp/expected.hpp ****     !std::is_constructible<T, const expected<U, G> &&>::value &&
 311:Cpp/expected.hpp ****     !std::is_convertible<expected<U, G> &, T>::value &&
 312:Cpp/expected.hpp ****     !std::is_convertible<expected<U, G> &&, T>::value &&
 313:Cpp/expected.hpp ****     !std::is_convertible<const expected<U, G> &, T>::value &&
 314:Cpp/expected.hpp ****     !std::is_convertible<const expected<U, G> &&, T>::value>;
 315:Cpp/expected.hpp **** 
 316:Cpp/expected.hpp **** template <class T, class U>
 317:Cpp/expected.hpp **** using is_void_or = conditional_t<std::is_void<T>::value, std::true_type, U>;
 318:Cpp/expected.hpp **** 
 319:Cpp/expected.hpp **** template <class T>
 320:Cpp/expected.hpp **** using is_copy_constructible_or_void =
 321:Cpp/expected.hpp ****     is_void_or<T, std::is_copy_constructible<T>>;
 322:Cpp/expected.hpp **** 
 323:Cpp/expected.hpp **** template <class T>
 324:Cpp/expected.hpp **** using is_move_constructible_or_void =
 325:Cpp/expected.hpp ****     is_void_or<T, std::is_move_constructible<T>>;
 326:Cpp/expected.hpp **** 
 327:Cpp/expected.hpp **** template <class T>
 328:Cpp/expected.hpp **** using is_copy_assignable_or_void =
 329:Cpp/expected.hpp ****     is_void_or<T, std::is_copy_assignable<T>>;
 330:Cpp/expected.hpp **** 
 331:Cpp/expected.hpp **** 
 332:Cpp/expected.hpp **** template <class T>
 333:Cpp/expected.hpp **** using is_move_assignable_or_void =
 334:Cpp/expected.hpp ****     is_void_or<T, std::is_move_assignable<T>>;
 335:Cpp/expected.hpp ****     
 336:Cpp/expected.hpp **** 
 337:Cpp/expected.hpp **** } // namespace detail
 338:Cpp/expected.hpp **** 
 339:Cpp/expected.hpp **** /// \exclude
 340:Cpp/expected.hpp **** namespace detail {
 341:Cpp/expected.hpp **** struct no_init_t {};
 342:Cpp/expected.hpp **** static constexpr no_init_t no_init{};
 343:Cpp/expected.hpp **** 
 344:Cpp/expected.hpp **** // Implements the storage of the values, and ensures that the destructor is
 345:Cpp/expected.hpp **** // trivial if it can be.
 346:Cpp/expected.hpp **** //
 347:Cpp/expected.hpp **** // This specialization is for where neither `T` or `E` is trivially
 348:Cpp/expected.hpp **** // destructible, so the destructors must be called on destruction of the
 349:Cpp/expected.hpp **** // `expected`
 350:Cpp/expected.hpp **** template <class T, class E, bool = std::is_trivially_destructible<T>::value,
 351:Cpp/expected.hpp ****           bool = std::is_trivially_destructible<E>::value>
 352:Cpp/expected.hpp **** struct expected_storage_base {
 353:Cpp/expected.hpp ****   constexpr expected_storage_base() : m_val(T{}), m_has_val(true) {}
 354:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_no_init(), m_has_val(false) {}
 355:Cpp/expected.hpp **** 
 356:Cpp/expected.hpp ****   template <class... Args,
 357:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<T, Args &&...>::value> * =
 358:Cpp/expected.hpp ****                 nullptr>
 359:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, Args &&... args)
 360:Cpp/expected.hpp ****       : m_val(std::forward<Args>(args)...), m_has_val(true) {}
 361:Cpp/expected.hpp **** 
 362:Cpp/expected.hpp ****   template <class U, class... Args,
 363:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 364:Cpp/expected.hpp ****                 T, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 365:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, std::initializer_list<U> il,
ARM GAS  /tmp/ccU23Djm.s 			page 44


 366:Cpp/expected.hpp ****                                   Args &&... args)
 367:Cpp/expected.hpp ****       : m_val(il, std::forward<Args>(args)...), m_has_val(true) {}
 368:Cpp/expected.hpp ****   template <class... Args,
 369:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
 370:Cpp/expected.hpp ****                 nullptr>
 371:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
 372:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 373:Cpp/expected.hpp **** 
 374:Cpp/expected.hpp ****   template <class U, class... Args,
 375:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 376:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 377:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t,
 378:Cpp/expected.hpp ****                                            std::initializer_list<U> il,
 379:Cpp/expected.hpp ****                                            Args &&... args)
 380:Cpp/expected.hpp ****       : m_unexpect(il, std::forward<Args>(args)...), m_has_val(false) {}
 381:Cpp/expected.hpp **** 
 382:Cpp/expected.hpp ****   ~expected_storage_base() {
 383:Cpp/expected.hpp ****     if (m_has_val) {
 384:Cpp/expected.hpp ****       m_val.~T();
 385:Cpp/expected.hpp ****     } else {
 386:Cpp/expected.hpp ****       m_unexpect.~unexpected<E>();
 387:Cpp/expected.hpp ****     }
 388:Cpp/expected.hpp ****   }
 389:Cpp/expected.hpp ****   union {
 390:Cpp/expected.hpp ****     char m_no_init;
 391:Cpp/expected.hpp ****     T m_val;
 392:Cpp/expected.hpp ****     unexpected<E> m_unexpect;
 393:Cpp/expected.hpp ****   };
 394:Cpp/expected.hpp ****   bool m_has_val;
 395:Cpp/expected.hpp **** };
 396:Cpp/expected.hpp **** 
 397:Cpp/expected.hpp **** // This specialization is for when both `T` and `E` are trivially-destructible,
 398:Cpp/expected.hpp **** // so the destructor of the `expected` can be trivial.
 399:Cpp/expected.hpp **** template <class T, class E> struct expected_storage_base<T, E, true, true> {
 400:Cpp/expected.hpp ****   constexpr expected_storage_base() : m_val(T{}), m_has_val(true) {}
 401:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_no_init(), m_has_val(false) {}
 402:Cpp/expected.hpp **** 
 403:Cpp/expected.hpp ****   template <class... Args,
 404:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<T, Args &&...>::value> * =
 405:Cpp/expected.hpp ****                 nullptr>
 406:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, Args &&... args)
 407:Cpp/expected.hpp ****       : m_val(std::forward<Args>(args)...), m_has_val(true) {}
 408:Cpp/expected.hpp **** 
 409:Cpp/expected.hpp ****   template <class U, class... Args,
 410:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 411:Cpp/expected.hpp ****                 T, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 412:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, std::initializer_list<U> il,
 413:Cpp/expected.hpp ****                                   Args &&... args)
 414:Cpp/expected.hpp ****       : m_val(il, std::forward<Args>(args)...), m_has_val(true) {}
 415:Cpp/expected.hpp ****   template <class... Args,
 416:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
 417:Cpp/expected.hpp ****                 nullptr>
 418:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
 419:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 420:Cpp/expected.hpp **** 
 421:Cpp/expected.hpp ****   template <class U, class... Args,
 422:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
ARM GAS  /tmp/ccU23Djm.s 			page 45


 423:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 424:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t,
 425:Cpp/expected.hpp ****                                            std::initializer_list<U> il,
 426:Cpp/expected.hpp ****                                            Args &&... args)
 427:Cpp/expected.hpp ****       : m_unexpect(il, std::forward<Args>(args)...), m_has_val(false) {}
 428:Cpp/expected.hpp **** 
 429:Cpp/expected.hpp ****   ~expected_storage_base() = default;
 430:Cpp/expected.hpp ****   union {
 431:Cpp/expected.hpp ****     char m_no_init;
 432:Cpp/expected.hpp ****     T m_val;
 433:Cpp/expected.hpp ****     unexpected<E> m_unexpect;
 434:Cpp/expected.hpp ****   };
 435:Cpp/expected.hpp ****   bool m_has_val;
 436:Cpp/expected.hpp **** };
 437:Cpp/expected.hpp **** 
 438:Cpp/expected.hpp **** // T is trivial, E is not.
 439:Cpp/expected.hpp **** template <class T, class E> struct expected_storage_base<T, E, true, false> {
 440:Cpp/expected.hpp ****   constexpr expected_storage_base() : m_val(T{}), m_has_val(true) {}
 441:Cpp/expected.hpp ****   TL_EXPECTED_MSVC2015_CONSTEXPR expected_storage_base(no_init_t)
 442:Cpp/expected.hpp ****       : m_no_init(), m_has_val(false) {}
 443:Cpp/expected.hpp **** 
 444:Cpp/expected.hpp ****   template <class... Args,
 445:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<T, Args &&...>::value> * =
 446:Cpp/expected.hpp ****                 nullptr>
 447:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, Args &&... args)
 448:Cpp/expected.hpp ****       : m_val(std::forward<Args>(args)...), m_has_val(true) {}
 449:Cpp/expected.hpp **** 
 450:Cpp/expected.hpp ****   template <class U, class... Args,
 451:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 452:Cpp/expected.hpp ****                 T, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 453:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, std::initializer_list<U> il,
 454:Cpp/expected.hpp ****                                   Args &&... args)
 455:Cpp/expected.hpp ****       : m_val(il, std::forward<Args>(args)...), m_has_val(true) {}
 456:Cpp/expected.hpp ****   template <class... Args,
 457:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
 458:Cpp/expected.hpp ****                 nullptr>
 459:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
 460:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 461:Cpp/expected.hpp **** 
 462:Cpp/expected.hpp ****   template <class U, class... Args,
 463:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 464:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 465:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t,
 466:Cpp/expected.hpp ****                                            std::initializer_list<U> il,
 467:Cpp/expected.hpp ****                                            Args &&... args)
 468:Cpp/expected.hpp ****       : m_unexpect(il, std::forward<Args>(args)...), m_has_val(false) {}
 469:Cpp/expected.hpp **** 
 470:Cpp/expected.hpp ****   ~expected_storage_base() {
 471:Cpp/expected.hpp ****     if (!m_has_val) {
 472:Cpp/expected.hpp ****       m_unexpect.~unexpected<E>();
 473:Cpp/expected.hpp ****     }
 474:Cpp/expected.hpp ****   }
 475:Cpp/expected.hpp **** 
 476:Cpp/expected.hpp ****   union {
 477:Cpp/expected.hpp ****     char m_no_init;
 478:Cpp/expected.hpp ****     T m_val;
 479:Cpp/expected.hpp ****     unexpected<E> m_unexpect;
ARM GAS  /tmp/ccU23Djm.s 			page 46


 480:Cpp/expected.hpp ****   };
 481:Cpp/expected.hpp ****   bool m_has_val;
 482:Cpp/expected.hpp **** };
 483:Cpp/expected.hpp **** 
 484:Cpp/expected.hpp **** // E is trivial, T is not.
 485:Cpp/expected.hpp **** template <class T, class E> struct expected_storage_base<T, E, false, true> {
 486:Cpp/expected.hpp ****   constexpr expected_storage_base() : m_val(T{}), m_has_val(true) {}
 487:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_no_init(), m_has_val(false) {}
 488:Cpp/expected.hpp **** 
 489:Cpp/expected.hpp ****   template <class... Args,
 490:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<T, Args &&...>::value> * =
 491:Cpp/expected.hpp ****                 nullptr>
 492:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, Args &&... args)
 493:Cpp/expected.hpp ****       : m_val(std::forward<Args>(args)...), m_has_val(true) {}
 494:Cpp/expected.hpp **** 
 495:Cpp/expected.hpp ****   template <class U, class... Args,
 496:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 497:Cpp/expected.hpp ****                 T, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 498:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t, std::initializer_list<U> il,
 499:Cpp/expected.hpp ****                                   Args &&... args)
 500:Cpp/expected.hpp ****       : m_val(il, std::forward<Args>(args)...), m_has_val(true) {}
 501:Cpp/expected.hpp ****   template <class... Args,
 502:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
 503:Cpp/expected.hpp ****                 nullptr>
 504:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
 505:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 506:Cpp/expected.hpp **** 
 507:Cpp/expected.hpp ****   template <class U, class... Args,
 508:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 509:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 510:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t,
 511:Cpp/expected.hpp ****                                            std::initializer_list<U> il,
 512:Cpp/expected.hpp ****                                            Args &&... args)
 513:Cpp/expected.hpp ****       : m_unexpect(il, std::forward<Args>(args)...), m_has_val(false) {}
 514:Cpp/expected.hpp **** 
 515:Cpp/expected.hpp ****   ~expected_storage_base() {
 516:Cpp/expected.hpp ****     if (m_has_val) {
 517:Cpp/expected.hpp ****       m_val.~T();
 518:Cpp/expected.hpp ****     }
 519:Cpp/expected.hpp ****   }
 520:Cpp/expected.hpp ****   union {
 521:Cpp/expected.hpp ****     char m_no_init;
 522:Cpp/expected.hpp ****     T m_val;
 523:Cpp/expected.hpp ****     unexpected<E> m_unexpect;
 524:Cpp/expected.hpp ****   };
 525:Cpp/expected.hpp ****   bool m_has_val;
 526:Cpp/expected.hpp **** };
 527:Cpp/expected.hpp **** 
 528:Cpp/expected.hpp **** // `T` is `void`, `E` is trivially-destructible
 529:Cpp/expected.hpp **** template <class E> struct expected_storage_base<void, E, false, true> {
 530:Cpp/expected.hpp ****   TL_EXPECTED_MSVC2015_CONSTEXPR expected_storage_base() : m_has_val(true) {}
 531:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_val(), m_has_val(false) {}
 532:Cpp/expected.hpp **** 
 533:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t) : m_has_val(true) {}
 534:Cpp/expected.hpp **** 
 535:Cpp/expected.hpp ****   template <class... Args,
 536:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
ARM GAS  /tmp/ccU23Djm.s 			page 47


 537:Cpp/expected.hpp ****                 nullptr>
 538:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
 539:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 540:Cpp/expected.hpp **** 
 541:Cpp/expected.hpp ****   template <class U, class... Args,
 542:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 543:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 544:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t,
 545:Cpp/expected.hpp ****                                            std::initializer_list<U> il,
 546:Cpp/expected.hpp ****                                            Args &&... args)
 547:Cpp/expected.hpp ****       : m_unexpect(il, std::forward<Args>(args)...), m_has_val(false) {}
 548:Cpp/expected.hpp **** 
 549:Cpp/expected.hpp ****   ~expected_storage_base() = default;
 550:Cpp/expected.hpp ****   struct dummy {};
 551:Cpp/expected.hpp ****   union {
 552:Cpp/expected.hpp ****     dummy m_val;
 553:Cpp/expected.hpp ****     unexpected<E> m_unexpect;
 554:Cpp/expected.hpp ****   };
 555:Cpp/expected.hpp ****   bool m_has_val;
 556:Cpp/expected.hpp **** };
 557:Cpp/expected.hpp **** 
 558:Cpp/expected.hpp **** // `T` is `void`, `E` is not trivially-destructible
 559:Cpp/expected.hpp **** template <class E> struct expected_storage_base<void, E, false, false> {
 560:Cpp/expected.hpp ****   constexpr expected_storage_base() : m_dummy(), m_has_val(true) {}
 561:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_dummy(), m_has_val(false) {}
 562:Cpp/expected.hpp **** 
 563:Cpp/expected.hpp ****   constexpr expected_storage_base(in_place_t) : m_dummy(), m_has_val(true) {}
 564:Cpp/expected.hpp **** 
 565:Cpp/expected.hpp ****   template <class... Args,
 566:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
 567:Cpp/expected.hpp ****                 nullptr>
 568:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
 569:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 570:Cpp/expected.hpp **** 
 571:Cpp/expected.hpp ****   template <class U, class... Args,
 572:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
 573:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
 574:Cpp/expected.hpp ****   constexpr explicit expected_storage_base(unexpect_t,
 575:Cpp/expected.hpp ****                                            std::initializer_list<U> il,
 576:Cpp/expected.hpp ****                                            Args &&... args)
 577:Cpp/expected.hpp ****       : m_unexpect(il, std::forward<Args>(args)...), m_has_val(false) {}
 578:Cpp/expected.hpp **** 
 579:Cpp/expected.hpp ****   ~expected_storage_base() {
 580:Cpp/expected.hpp ****     if (!m_has_val) {
 581:Cpp/expected.hpp ****       m_unexpect.~unexpected<E>();
 582:Cpp/expected.hpp ****     }
 583:Cpp/expected.hpp ****   }
 584:Cpp/expected.hpp **** 
 585:Cpp/expected.hpp ****   union {
 586:Cpp/expected.hpp ****     char m_dummy;
 587:Cpp/expected.hpp ****     unexpected<E> m_unexpect;
 588:Cpp/expected.hpp ****   };
 589:Cpp/expected.hpp ****   bool m_has_val;
 590:Cpp/expected.hpp **** };
 591:Cpp/expected.hpp **** 
 592:Cpp/expected.hpp **** // This base class provides some handy member functions which can be used in
 593:Cpp/expected.hpp **** // further derived classes
ARM GAS  /tmp/ccU23Djm.s 			page 48


 594:Cpp/expected.hpp **** template <class T, class E>
 595:Cpp/expected.hpp **** struct expected_operations_base : expected_storage_base<T, E> {
 596:Cpp/expected.hpp ****   using expected_storage_base<T, E>::expected_storage_base;
 597:Cpp/expected.hpp **** 
 598:Cpp/expected.hpp ****   template <class... Args> void construct(Args &&... args) noexcept {
 599:Cpp/expected.hpp ****     new (std::addressof(this->m_val)) T(std::forward<Args>(args)...);
 600:Cpp/expected.hpp ****     this->m_has_val = true;
 601:Cpp/expected.hpp ****   }
 602:Cpp/expected.hpp **** 
 603:Cpp/expected.hpp ****   template <class Rhs> void construct_with(Rhs &&rhs) noexcept {
 604:Cpp/expected.hpp ****     new (std::addressof(this->m_val)) T(std::forward<Rhs>(rhs).get());
 605:Cpp/expected.hpp ****     this->m_has_val = true;
 606:Cpp/expected.hpp ****   }
 607:Cpp/expected.hpp **** 
 608:Cpp/expected.hpp ****   template <class... Args> void construct_error(Args &&... args) noexcept {
 609:Cpp/expected.hpp ****     new (std::addressof(this->m_unexpect))
 610:Cpp/expected.hpp ****         unexpected<E>(std::forward<Args>(args)...);
 611:Cpp/expected.hpp ****     this->m_has_val = false;
 612:Cpp/expected.hpp ****   }
 613:Cpp/expected.hpp **** 
 614:Cpp/expected.hpp ****   #ifdef TL_EXPECTED_EXCEPTIONS_ENABLED
 615:Cpp/expected.hpp **** 
 616:Cpp/expected.hpp ****   // These assign overloads ensure that the most efficient assignment
 617:Cpp/expected.hpp ****   // implementation is used while maintaining the strong exception guarantee.
 618:Cpp/expected.hpp ****   // The problematic case is where rhs has a value, but *this does not.
 619:Cpp/expected.hpp ****   //
 620:Cpp/expected.hpp ****   // This overload handles the case where we can just copy-construct `T`
 621:Cpp/expected.hpp ****   // directly into place without throwing.
 622:Cpp/expected.hpp ****   template <class U = T,
 623:Cpp/expected.hpp ****             detail::enable_if_t<std::is_nothrow_copy_constructible<U>::value>
 624:Cpp/expected.hpp ****                 * = nullptr>
 625:Cpp/expected.hpp ****   void assign(const expected_operations_base &rhs) noexcept {
 626:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 627:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 628:Cpp/expected.hpp ****       construct(rhs.get());
 629:Cpp/expected.hpp ****     } else {
 630:Cpp/expected.hpp ****       assign_common(rhs);
 631:Cpp/expected.hpp ****     }
 632:Cpp/expected.hpp ****   }
 633:Cpp/expected.hpp **** 
 634:Cpp/expected.hpp ****   // This overload handles the case where we can attempt to create a copy of
 635:Cpp/expected.hpp ****   // `T`, then no-throw move it into place if the copy was successful.
 636:Cpp/expected.hpp ****   template <class U = T,
 637:Cpp/expected.hpp ****             detail::enable_if_t<!std::is_nothrow_copy_constructible<U>::value &&
 638:Cpp/expected.hpp ****                                 std::is_nothrow_move_constructible<U>::value>
 639:Cpp/expected.hpp ****                 * = nullptr>
 640:Cpp/expected.hpp ****   void assign(const expected_operations_base &rhs) noexcept {
 641:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 642:Cpp/expected.hpp ****       T tmp = rhs.get();
 643:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 644:Cpp/expected.hpp ****       construct(std::move(tmp));
 645:Cpp/expected.hpp ****     } else {
 646:Cpp/expected.hpp ****       assign_common(rhs);
 647:Cpp/expected.hpp ****     }
 648:Cpp/expected.hpp ****   }
 649:Cpp/expected.hpp **** 
 650:Cpp/expected.hpp ****   // This overload is the worst-case, where we have to move-construct the
ARM GAS  /tmp/ccU23Djm.s 			page 49


 651:Cpp/expected.hpp ****   // unexpected value into temporary storage, then try to copy the T into place.
 652:Cpp/expected.hpp ****   // If the construction succeeds, then everything is fine, but if it throws,
 653:Cpp/expected.hpp ****   // then we move the old unexpected value back into place before rethrowing the
 654:Cpp/expected.hpp ****   // exception.
 655:Cpp/expected.hpp ****   template <class U = T,
 656:Cpp/expected.hpp ****             detail::enable_if_t<!std::is_nothrow_copy_constructible<U>::value &&
 657:Cpp/expected.hpp ****                                 !std::is_nothrow_move_constructible<U>::value>
 658:Cpp/expected.hpp ****                 * = nullptr>
 659:Cpp/expected.hpp ****   void assign(const expected_operations_base &rhs) {
 660:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 661:Cpp/expected.hpp ****       auto tmp = std::move(geterr());
 662:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 663:Cpp/expected.hpp **** 
 664:Cpp/expected.hpp ****       try {
 665:Cpp/expected.hpp ****         construct(rhs.get());
 666:Cpp/expected.hpp ****       } catch (...) {
 667:Cpp/expected.hpp ****         geterr() = std::move(tmp);
 668:Cpp/expected.hpp ****         throw;
 669:Cpp/expected.hpp ****       }
 670:Cpp/expected.hpp ****     } else {
 671:Cpp/expected.hpp ****       assign_common(rhs);
 672:Cpp/expected.hpp ****     }
 673:Cpp/expected.hpp ****   }
 674:Cpp/expected.hpp **** 
 675:Cpp/expected.hpp ****   // These overloads do the same as above, but for rvalues
 676:Cpp/expected.hpp ****   template <class U = T,
 677:Cpp/expected.hpp ****             detail::enable_if_t<std::is_nothrow_move_constructible<U>::value>
 678:Cpp/expected.hpp ****                 * = nullptr>
 679:Cpp/expected.hpp ****   void assign(expected_operations_base &&rhs) noexcept {
 680:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 681:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 682:Cpp/expected.hpp ****       construct(std::move(rhs).get());
 683:Cpp/expected.hpp ****     } else {
 684:Cpp/expected.hpp ****       assign_common(std::move(rhs));
 685:Cpp/expected.hpp ****     }
 686:Cpp/expected.hpp ****   }
 687:Cpp/expected.hpp **** 
 688:Cpp/expected.hpp ****   template <class U = T,
 689:Cpp/expected.hpp ****             detail::enable_if_t<!std::is_nothrow_move_constructible<U>::value>
 690:Cpp/expected.hpp ****                 * = nullptr>
 691:Cpp/expected.hpp ****   void assign(expected_operations_base &&rhs) {
 692:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 693:Cpp/expected.hpp ****       auto tmp = std::move(geterr());
 694:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 695:Cpp/expected.hpp ****       try {
 696:Cpp/expected.hpp ****         construct(std::move(rhs).get());
 697:Cpp/expected.hpp ****       } catch (...) {
 698:Cpp/expected.hpp ****         geterr() = std::move(tmp);
 699:Cpp/expected.hpp ****         throw;
 700:Cpp/expected.hpp ****       }
 701:Cpp/expected.hpp ****     } else {
 702:Cpp/expected.hpp ****       assign_common(std::move(rhs));
 703:Cpp/expected.hpp ****     }
 704:Cpp/expected.hpp ****   }
 705:Cpp/expected.hpp **** 
 706:Cpp/expected.hpp ****   #else
 707:Cpp/expected.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 50


 708:Cpp/expected.hpp ****   // If exceptions are disabled then we can just copy-construct
 709:Cpp/expected.hpp ****   void assign(const expected_operations_base &rhs) noexcept {
 710:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 711:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 712:Cpp/expected.hpp ****       construct(rhs.get());
 713:Cpp/expected.hpp ****     } else {
 714:Cpp/expected.hpp ****       assign_common(rhs);
 715:Cpp/expected.hpp ****     }
 716:Cpp/expected.hpp ****   }
 717:Cpp/expected.hpp **** 
 718:Cpp/expected.hpp ****   void assign(expected_operations_base &&rhs) noexcept {
 719:Cpp/expected.hpp ****     if (!this->m_has_val && rhs.m_has_val) {
 720:Cpp/expected.hpp ****       geterr().~unexpected<E>();
 721:Cpp/expected.hpp ****       construct(std::move(rhs).get());
 722:Cpp/expected.hpp ****     } else {
 723:Cpp/expected.hpp ****       assign_common(rhs);
 724:Cpp/expected.hpp ****     }
 725:Cpp/expected.hpp ****   }
 726:Cpp/expected.hpp **** 
 727:Cpp/expected.hpp ****   #endif
 728:Cpp/expected.hpp **** 
 729:Cpp/expected.hpp ****   // The common part of move/copy assigning
 730:Cpp/expected.hpp ****   template <class Rhs> void assign_common(Rhs &&rhs) {
 731:Cpp/expected.hpp ****     if (this->m_has_val) {
 732:Cpp/expected.hpp ****       if (rhs.m_has_val) {
 733:Cpp/expected.hpp ****         get() = std::forward<Rhs>(rhs).get();
 734:Cpp/expected.hpp ****       } else {
 735:Cpp/expected.hpp ****         get().~T();
 736:Cpp/expected.hpp ****         construct_error(std::forward<Rhs>(rhs).geterr());
 737:Cpp/expected.hpp ****       }
 738:Cpp/expected.hpp ****     } else {
 739:Cpp/expected.hpp ****       if (!rhs.m_has_val) {
 740:Cpp/expected.hpp ****         geterr() = std::forward<Rhs>(rhs).geterr();
 741:Cpp/expected.hpp ****       }
 742:Cpp/expected.hpp ****     }
 743:Cpp/expected.hpp ****   }
 744:Cpp/expected.hpp **** 
 745:Cpp/expected.hpp ****   bool has_value() const { return this->m_has_val; }
 746:Cpp/expected.hpp **** 
 747:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR T &get() & { return this->m_val; }
 748:Cpp/expected.hpp ****   constexpr const T &get() const & { return this->m_val; }
 749:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR T &&get() && { return std::move(this->m_val); }
 750:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
 751:Cpp/expected.hpp ****   constexpr const T &&get() const && { return std::move(this->m_val); }
 752:Cpp/expected.hpp **** #endif
 753:Cpp/expected.hpp **** 
 754:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR unexpected<E> &geterr() & {
 755:Cpp/expected.hpp ****     return this->m_unexpect;
 756:Cpp/expected.hpp ****   }
 757:Cpp/expected.hpp ****   constexpr const unexpected<E> &geterr() const & { return this->m_unexpect; }
 758:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR unexpected<E> &&geterr() && {
 759:Cpp/expected.hpp ****     return std::move(this->m_unexpect);
 760:Cpp/expected.hpp ****   }
 761:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
 762:Cpp/expected.hpp ****   constexpr const unexpected<E> &&geterr() const && {
 763:Cpp/expected.hpp ****     return std::move(this->m_unexpect);
 764:Cpp/expected.hpp ****   }
ARM GAS  /tmp/ccU23Djm.s 			page 51


 765:Cpp/expected.hpp **** #endif
 766:Cpp/expected.hpp **** };
 767:Cpp/expected.hpp **** 
 768:Cpp/expected.hpp **** // This base class provides some handy member functions which can be used in
 769:Cpp/expected.hpp **** // further derived classes
 770:Cpp/expected.hpp **** template <class E>
 771:Cpp/expected.hpp **** struct expected_operations_base<void, E> : expected_storage_base<void, E> {
 1453              		.loc 7 771 8
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 8
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457 0000 80B5     		push	{r7, lr}
 1458              	.LCFI114:
 1459              		.cfi_def_cfa_offset 8
 1460              		.cfi_offset 7, -8
 1461              		.cfi_offset 14, -4
 1462 0002 82B0     		sub	sp, sp, #8
 1463              	.LCFI115:
 1464              		.cfi_def_cfa_offset 16
 1465 0004 00AF     		add	r7, sp, #0
 1466              	.LCFI116:
 1467              		.cfi_def_cfa_register 7
 1468 0006 7860     		str	r0, [r7, #4]
 1469              	.LBB9:
 1470              		.loc 7 771 8
 1471 0008 7B68     		ldr	r3, [r7, #4]
 1472 000a 1846     		mov	r0, r3
 1473 000c FFF7FEFF 		bl	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1474              	.LBE9:
 1475 0010 7B68     		ldr	r3, [r7, #4]
 1476 0012 1846     		mov	r0, r3
 1477 0014 0837     		adds	r7, r7, #8
 1478              	.LCFI117:
 1479              		.cfi_def_cfa_offset 8
 1480 0016 BD46     		mov	sp, r7
 1481              	.LCFI118:
 1482              		.cfi_def_cfa_register 13
 1483              		@ sp needed
 1484 0018 80BD     		pop	{r7, pc}
 1485              		.cfi_endproc
 1486              	.LFE3901:
 1488              		.weak	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskEL
 1489              		.thumb_set _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4T
 1490              		.section	.text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Tas
 1491              		.align	1
 1492              		.weak	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1496              		.fpu fpv4-sp-d16
 1498              	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5error
 1499              	.LFB3903:
 772:Cpp/expected.hpp ****   using expected_storage_base<void, E>::expected_storage_base;
 773:Cpp/expected.hpp **** 
 774:Cpp/expected.hpp ****   template <class... Args> void construct() noexcept { this->m_has_val = true; }
 775:Cpp/expected.hpp **** 
 776:Cpp/expected.hpp ****   // This function doesn't use its argument, but needs it so that code in
ARM GAS  /tmp/ccU23Djm.s 			page 52


 777:Cpp/expected.hpp ****   // levels above this can work independently of whether T is void
 778:Cpp/expected.hpp ****   template <class Rhs> void construct_with(Rhs &&) noexcept {
 779:Cpp/expected.hpp ****     this->m_has_val = true;
 780:Cpp/expected.hpp ****   }
 781:Cpp/expected.hpp **** 
 782:Cpp/expected.hpp ****   template <class... Args> void construct_error(Args &&... args) noexcept {
 783:Cpp/expected.hpp ****     new (std::addressof(this->m_unexpect))
 784:Cpp/expected.hpp ****         unexpected<E>(std::forward<Args>(args)...);
 785:Cpp/expected.hpp ****     this->m_has_val = false;
 786:Cpp/expected.hpp ****   }
 787:Cpp/expected.hpp **** 
 788:Cpp/expected.hpp ****   template <class Rhs> void assign(Rhs &&rhs) noexcept {
 789:Cpp/expected.hpp ****     if (!this->m_has_val) {
 790:Cpp/expected.hpp ****       if (rhs.m_has_val) {
 791:Cpp/expected.hpp ****         geterr().~unexpected<E>();
 792:Cpp/expected.hpp ****         construct();
 793:Cpp/expected.hpp ****       } else {
 794:Cpp/expected.hpp ****         geterr() = std::forward<Rhs>(rhs).geterr();
 795:Cpp/expected.hpp ****       }
 796:Cpp/expected.hpp ****     } else {
 797:Cpp/expected.hpp ****       if (!rhs.m_has_val) {
 798:Cpp/expected.hpp ****         construct_error(std::forward<Rhs>(rhs).geterr());
 799:Cpp/expected.hpp ****       }
 800:Cpp/expected.hpp ****     }
 801:Cpp/expected.hpp ****   }
 802:Cpp/expected.hpp **** 
 803:Cpp/expected.hpp ****   bool has_value() const { return this->m_has_val; }
 804:Cpp/expected.hpp **** 
 805:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR unexpected<E> &geterr() & {
 806:Cpp/expected.hpp ****     return this->m_unexpect;
 807:Cpp/expected.hpp ****   }
 808:Cpp/expected.hpp ****   constexpr const unexpected<E> &geterr() const & { return this->m_unexpect; }
 809:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR unexpected<E> &&geterr() && {
 810:Cpp/expected.hpp ****     return std::move(this->m_unexpect);
 811:Cpp/expected.hpp ****   }
 812:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
 813:Cpp/expected.hpp ****   constexpr const unexpected<E> &&geterr() const && {
 814:Cpp/expected.hpp ****     return std::move(this->m_unexpect);
 815:Cpp/expected.hpp ****   }
 816:Cpp/expected.hpp **** #endif
 817:Cpp/expected.hpp **** };
 818:Cpp/expected.hpp **** 
 819:Cpp/expected.hpp **** // This class manages conditionally having a trivial copy constructor
 820:Cpp/expected.hpp **** // This specialization is for when T and E are trivially copy constructible
 821:Cpp/expected.hpp **** template <class T, class E,
 822:Cpp/expected.hpp ****           bool = is_void_or<T, TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T)>::
 823:Cpp/expected.hpp ****               value &&TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(E)::value>
 824:Cpp/expected.hpp **** struct expected_copy_base : expected_operations_base<T, E> {
 1500              		.loc 7 824 8
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 8
 1503              		@ frame_needed = 1, uses_anonymous_args = 0
 1504 0000 80B5     		push	{r7, lr}
 1505              	.LCFI119:
 1506              		.cfi_def_cfa_offset 8
 1507              		.cfi_offset 7, -8
 1508              		.cfi_offset 14, -4
ARM GAS  /tmp/ccU23Djm.s 			page 53


 1509 0002 82B0     		sub	sp, sp, #8
 1510              	.LCFI120:
 1511              		.cfi_def_cfa_offset 16
 1512 0004 00AF     		add	r7, sp, #0
 1513              	.LCFI121:
 1514              		.cfi_def_cfa_register 7
 1515 0006 7860     		str	r0, [r7, #4]
 1516              	.LBB10:
 1517              		.loc 7 824 8
 1518 0008 7B68     		ldr	r3, [r7, #4]
 1519 000a 1846     		mov	r0, r3
 1520 000c FFF7FEFF 		bl	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj10
 1521              	.LBE10:
 1522 0010 7B68     		ldr	r3, [r7, #4]
 1523 0012 1846     		mov	r0, r3
 1524 0014 0837     		adds	r7, r7, #8
 1525              	.LCFI122:
 1526              		.cfi_def_cfa_offset 8
 1527 0016 BD46     		mov	sp, r7
 1528              	.LCFI123:
 1529              		.cfi_def_cfa_register 13
 1530              		@ sp needed
 1531 0018 80BD     		pop	{r7, pc}
 1532              		.cfi_endproc
 1533              	.LFE3903:
 1535              		.weak	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1536              		.thumb_set _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj
 1537              		.section	.text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Tas
 1538              		.align	1
 1539              		.weak	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1540              		.syntax unified
 1541              		.thumb
 1542              		.thumb_func
 1543              		.fpu fpv4-sp-d16
 1545              	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5error
 1546              	.LFB3905:
 825:Cpp/expected.hpp ****   using expected_operations_base<T, E>::expected_operations_base;
 826:Cpp/expected.hpp **** };
 827:Cpp/expected.hpp **** 
 828:Cpp/expected.hpp **** // This specialization is for when T or E are not trivially copy constructible
 829:Cpp/expected.hpp **** template <class T, class E>
 830:Cpp/expected.hpp **** struct expected_copy_base<T, E, false> : expected_operations_base<T, E> {
 831:Cpp/expected.hpp ****   using expected_operations_base<T, E>::expected_operations_base;
 832:Cpp/expected.hpp **** 
 833:Cpp/expected.hpp ****   expected_copy_base() = default;
 834:Cpp/expected.hpp ****   expected_copy_base(const expected_copy_base &rhs)
 835:Cpp/expected.hpp ****       : expected_operations_base<T, E>(no_init) {
 836:Cpp/expected.hpp ****     if (rhs.has_value()) {
 837:Cpp/expected.hpp ****       this->construct_with(rhs);
 838:Cpp/expected.hpp ****     } else {
 839:Cpp/expected.hpp ****       this->construct_error(rhs.geterr());
 840:Cpp/expected.hpp ****     }
 841:Cpp/expected.hpp ****   }
 842:Cpp/expected.hpp **** 
 843:Cpp/expected.hpp ****   expected_copy_base(expected_copy_base &&rhs) = default;
 844:Cpp/expected.hpp ****   expected_copy_base &operator=(const expected_copy_base &rhs) = default;
 845:Cpp/expected.hpp ****   expected_copy_base &operator=(expected_copy_base &&rhs) = default;
ARM GAS  /tmp/ccU23Djm.s 			page 54


 846:Cpp/expected.hpp **** };
 847:Cpp/expected.hpp **** 
 848:Cpp/expected.hpp **** // This class manages conditionally having a trivial move constructor
 849:Cpp/expected.hpp **** // Unfortunately there's no way to achieve this in GCC < 5 AFAIK, since it
 850:Cpp/expected.hpp **** // doesn't implement an analogue to std::is_trivially_move_constructible. We
 851:Cpp/expected.hpp **** // have to make do with a non-trivial move constructor even if T is trivially
 852:Cpp/expected.hpp **** // move constructible
 853:Cpp/expected.hpp **** #ifndef TL_EXPECTED_GCC49
 854:Cpp/expected.hpp **** template <class T, class E,
 855:Cpp/expected.hpp ****           bool = is_void_or<T, std::is_trivially_move_constructible<T>>::value
 856:Cpp/expected.hpp ****               &&std::is_trivially_move_constructible<E>::value>
 857:Cpp/expected.hpp **** struct expected_move_base : expected_copy_base<T, E> {
 1547              		.loc 7 857 8
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 8
 1550              		@ frame_needed = 1, uses_anonymous_args = 0
 1551 0000 80B5     		push	{r7, lr}
 1552              	.LCFI124:
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 7, -8
 1555              		.cfi_offset 14, -4
 1556 0002 82B0     		sub	sp, sp, #8
 1557              	.LCFI125:
 1558              		.cfi_def_cfa_offset 16
 1559 0004 00AF     		add	r7, sp, #0
 1560              	.LCFI126:
 1561              		.cfi_def_cfa_register 7
 1562 0006 7860     		str	r0, [r7, #4]
 1563              	.LBB11:
 1564              		.loc 7 857 8
 1565 0008 7B68     		ldr	r3, [r7, #4]
 1566 000a 1846     		mov	r0, r3
 1567 000c FFF7FEFF 		bl	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5e
 1568              	.LBE11:
 1569 0010 7B68     		ldr	r3, [r7, #4]
 1570 0012 1846     		mov	r0, r3
 1571 0014 0837     		adds	r7, r7, #8
 1572              	.LCFI127:
 1573              		.cfi_def_cfa_offset 8
 1574 0016 BD46     		mov	sp, r7
 1575              	.LCFI128:
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 0018 80BD     		pop	{r7, pc}
 1579              		.cfi_endproc
 1580              	.LFE3905:
 1582              		.weak	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1583              		.thumb_set _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj
 1584              		.section	.text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Schedu
 1585              		.align	1
 1586              		.weak	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1593              	.LFB3907:
ARM GAS  /tmp/ccU23Djm.s 			page 55


 858:Cpp/expected.hpp ****   using expected_copy_base<T, E>::expected_copy_base;
 859:Cpp/expected.hpp **** };
 860:Cpp/expected.hpp **** #else
 861:Cpp/expected.hpp **** template <class T, class E, bool = false> struct expected_move_base;
 862:Cpp/expected.hpp **** #endif
 863:Cpp/expected.hpp **** template <class T, class E>
 864:Cpp/expected.hpp **** struct expected_move_base<T, E, false> : expected_copy_base<T, E> {
 865:Cpp/expected.hpp ****   using expected_copy_base<T, E>::expected_copy_base;
 866:Cpp/expected.hpp **** 
 867:Cpp/expected.hpp ****   expected_move_base() = default;
 868:Cpp/expected.hpp ****   expected_move_base(const expected_move_base &rhs) = default;
 869:Cpp/expected.hpp **** 
 870:Cpp/expected.hpp ****   expected_move_base(expected_move_base &&rhs) noexcept(
 871:Cpp/expected.hpp ****       std::is_nothrow_move_constructible<T>::value)
 872:Cpp/expected.hpp ****       : expected_copy_base<T, E>(no_init) {
 873:Cpp/expected.hpp ****     if (rhs.has_value()) {
 874:Cpp/expected.hpp ****       this->construct_with(std::move(rhs));
 875:Cpp/expected.hpp ****     } else {
 876:Cpp/expected.hpp ****       this->construct_error(std::move(rhs.geterr()));
 877:Cpp/expected.hpp ****     }
 878:Cpp/expected.hpp ****   }
 879:Cpp/expected.hpp ****   expected_move_base &operator=(const expected_move_base &rhs) = default;
 880:Cpp/expected.hpp ****   expected_move_base &operator=(expected_move_base &&rhs) = default;
 881:Cpp/expected.hpp **** };
 882:Cpp/expected.hpp **** 
 883:Cpp/expected.hpp **** // This class manages conditionally having a trivial copy assignment operator
 884:Cpp/expected.hpp **** template <class T, class E,
 885:Cpp/expected.hpp ****           bool = is_void_or<
 886:Cpp/expected.hpp ****               T, conjunction<TL_EXPECTED_IS_TRIVIALLY_COPY_ASSIGNABLE(T),
 887:Cpp/expected.hpp ****                              TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T),
 888:Cpp/expected.hpp ****                              TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(T)>>::value
 889:Cpp/expected.hpp ****               &&TL_EXPECTED_IS_TRIVIALLY_COPY_ASSIGNABLE(E)::value
 890:Cpp/expected.hpp ****                   &&TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(E)::value
 891:Cpp/expected.hpp ****                       &&TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(E)::value>
 892:Cpp/expected.hpp **** struct expected_copy_assign_base : expected_move_base<T, E> {
 1594              		.loc 7 892 8
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 80B5     		push	{r7, lr}
 1599              	.LCFI129:
 1600              		.cfi_def_cfa_offset 8
 1601              		.cfi_offset 7, -8
 1602              		.cfi_offset 14, -4
 1603 0002 82B0     		sub	sp, sp, #8
 1604              	.LCFI130:
 1605              		.cfi_def_cfa_offset 16
 1606 0004 00AF     		add	r7, sp, #0
 1607              	.LCFI131:
 1608              		.cfi_def_cfa_register 7
 1609 0006 7860     		str	r0, [r7, #4]
 1610              	.LBB12:
 1611              		.loc 7 892 8
 1612 0008 7B68     		ldr	r3, [r7, #4]
 1613 000a 1846     		mov	r0, r3
 1614 000c FFF7FEFF 		bl	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5e
 1615              	.LBE12:
ARM GAS  /tmp/ccU23Djm.s 			page 56


 1616 0010 7B68     		ldr	r3, [r7, #4]
 1617 0012 1846     		mov	r0, r3
 1618 0014 0837     		adds	r7, r7, #8
 1619              	.LCFI132:
 1620              		.cfi_def_cfa_offset 8
 1621 0016 BD46     		mov	sp, r7
 1622              	.LCFI133:
 1623              		.cfi_def_cfa_register 13
 1624              		@ sp needed
 1625 0018 80BD     		pop	{r7, pc}
 1626              		.cfi_endproc
 1627              	.LFE3907:
 1629              		.weak	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 1630              		.thumb_set _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4
 1631              		.section	.text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Schedu
 1632              		.align	1
 1633              		.weak	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 1634              		.syntax unified
 1635              		.thumb
 1636              		.thumb_func
 1637              		.fpu fpv4-sp-d16
 1639              	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 1640              	.LFB3909:
 893:Cpp/expected.hpp ****   using expected_move_base<T, E>::expected_move_base;
 894:Cpp/expected.hpp **** };
 895:Cpp/expected.hpp **** 
 896:Cpp/expected.hpp **** template <class T, class E>
 897:Cpp/expected.hpp **** struct expected_copy_assign_base<T, E, false> : expected_move_base<T, E> {
 898:Cpp/expected.hpp ****   using expected_move_base<T, E>::expected_move_base;
 899:Cpp/expected.hpp **** 
 900:Cpp/expected.hpp ****   expected_copy_assign_base() = default;
 901:Cpp/expected.hpp ****   expected_copy_assign_base(const expected_copy_assign_base &rhs) = default;
 902:Cpp/expected.hpp **** 
 903:Cpp/expected.hpp ****   expected_copy_assign_base(expected_copy_assign_base &&rhs) = default;
 904:Cpp/expected.hpp ****   expected_copy_assign_base &operator=(const expected_copy_assign_base &rhs) {
 905:Cpp/expected.hpp ****     this->assign(rhs);
 906:Cpp/expected.hpp ****     return *this;
 907:Cpp/expected.hpp ****   }
 908:Cpp/expected.hpp ****   expected_copy_assign_base &
 909:Cpp/expected.hpp ****   operator=(expected_copy_assign_base &&rhs) = default;
 910:Cpp/expected.hpp **** };
 911:Cpp/expected.hpp **** 
 912:Cpp/expected.hpp **** // This class manages conditionally having a trivial move assignment operator
 913:Cpp/expected.hpp **** // Unfortunately there's no way to achieve this in GCC < 5 AFAIK, since it
 914:Cpp/expected.hpp **** // doesn't implement an analogue to std::is_trivially_move_assignable. We have
 915:Cpp/expected.hpp **** // to make do with a non-trivial move assignment operator even if T is trivially
 916:Cpp/expected.hpp **** // move assignable
 917:Cpp/expected.hpp **** #ifndef TL_EXPECTED_GCC49
 918:Cpp/expected.hpp **** template <class T, class E,
 919:Cpp/expected.hpp ****           bool =
 920:Cpp/expected.hpp ****               is_void_or<T, conjunction<std::is_trivially_destructible<T>,
 921:Cpp/expected.hpp ****                                         std::is_trivially_move_constructible<T>,
 922:Cpp/expected.hpp ****                                         std::is_trivially_move_assignable<T>>>::
 923:Cpp/expected.hpp ****                   value &&std::is_trivially_destructible<E>::value
 924:Cpp/expected.hpp ****                       &&std::is_trivially_move_constructible<E>::value
 925:Cpp/expected.hpp ****                           &&std::is_trivially_move_assignable<E>::value>
 926:Cpp/expected.hpp **** struct expected_move_assign_base : expected_copy_assign_base<T, E> {
ARM GAS  /tmp/ccU23Djm.s 			page 57


 1641              		.loc 7 926 8
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 8
 1644              		@ frame_needed = 1, uses_anonymous_args = 0
 1645 0000 80B5     		push	{r7, lr}
 1646              	.LCFI134:
 1647              		.cfi_def_cfa_offset 8
 1648              		.cfi_offset 7, -8
 1649              		.cfi_offset 14, -4
 1650 0002 82B0     		sub	sp, sp, #8
 1651              	.LCFI135:
 1652              		.cfi_def_cfa_offset 16
 1653 0004 00AF     		add	r7, sp, #0
 1654              	.LCFI136:
 1655              		.cfi_def_cfa_register 7
 1656 0006 7860     		str	r0, [r7, #4]
 1657              	.LBB13:
 1658              		.loc 7 926 8
 1659 0008 7B68     		ldr	r3, [r7, #4]
 1660 000a 1846     		mov	r0, r3
 1661 000c FFF7FEFF 		bl	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1
 1662              	.LBE13:
 1663 0010 7B68     		ldr	r3, [r7, #4]
 1664 0012 1846     		mov	r0, r3
 1665 0014 0837     		adds	r7, r7, #8
 1666              	.LCFI137:
 1667              		.cfi_def_cfa_offset 8
 1668 0016 BD46     		mov	sp, r7
 1669              	.LCFI138:
 1670              		.cfi_def_cfa_register 13
 1671              		@ sp needed
 1672 0018 80BD     		pop	{r7, pc}
 1673              		.cfi_endproc
 1674              	.LFE3909:
 1676              		.weak	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 1677              		.thumb_set _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4
 1678              		.section	.text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE
 1679              		.align	1
 1680              		.weak	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1684              		.fpu fpv4-sp-d16
 1686              	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:
 1687              	.LFB3911:
 927:Cpp/expected.hpp ****   using expected_copy_assign_base<T, E>::expected_copy_assign_base;
 928:Cpp/expected.hpp **** };
 929:Cpp/expected.hpp **** #else
 930:Cpp/expected.hpp **** template <class T, class E, bool = false> struct expected_move_assign_base;
 931:Cpp/expected.hpp **** #endif
 932:Cpp/expected.hpp **** 
 933:Cpp/expected.hpp **** template <class T, class E>
 934:Cpp/expected.hpp **** struct expected_move_assign_base<T, E, false>
 935:Cpp/expected.hpp ****     : expected_copy_assign_base<T, E> {
 936:Cpp/expected.hpp ****   using expected_copy_assign_base<T, E>::expected_copy_assign_base;
 937:Cpp/expected.hpp **** 
 938:Cpp/expected.hpp ****   expected_move_assign_base() = default;
ARM GAS  /tmp/ccU23Djm.s 			page 58


 939:Cpp/expected.hpp ****   expected_move_assign_base(const expected_move_assign_base &rhs) = default;
 940:Cpp/expected.hpp **** 
 941:Cpp/expected.hpp ****   expected_move_assign_base(expected_move_assign_base &&rhs) = default;
 942:Cpp/expected.hpp **** 
 943:Cpp/expected.hpp ****   expected_move_assign_base &
 944:Cpp/expected.hpp ****   operator=(const expected_move_assign_base &rhs) = default;
 945:Cpp/expected.hpp **** 
 946:Cpp/expected.hpp ****   expected_move_assign_base &
 947:Cpp/expected.hpp ****   operator=(expected_move_assign_base &&rhs) noexcept(
 948:Cpp/expected.hpp ****       std::is_nothrow_move_constructible<T>::value
 949:Cpp/expected.hpp ****           &&std::is_nothrow_move_assignable<T>::value) {
 950:Cpp/expected.hpp ****     this->assign(std::move(rhs));
 951:Cpp/expected.hpp ****     return *this;
 952:Cpp/expected.hpp ****   }
 953:Cpp/expected.hpp **** };
 954:Cpp/expected.hpp **** 
 955:Cpp/expected.hpp **** // expected_delete_ctor_base will conditionally delete copy and move
 956:Cpp/expected.hpp **** // constructors depending on whether T is copy/move constructible
 957:Cpp/expected.hpp **** template <class T, class E,
 958:Cpp/expected.hpp ****           bool EnableCopy = (is_copy_constructible_or_void<T>::value &&
 959:Cpp/expected.hpp ****                              std::is_copy_constructible<E>::value),
 960:Cpp/expected.hpp ****           bool EnableMove = (is_move_constructible_or_void<T>::value &&
 961:Cpp/expected.hpp ****                              std::is_move_constructible<E>::value)>
 962:Cpp/expected.hpp **** struct expected_delete_ctor_base {
 963:Cpp/expected.hpp ****   expected_delete_ctor_base() = default;
 964:Cpp/expected.hpp ****   expected_delete_ctor_base(const expected_delete_ctor_base &) = default;
 965:Cpp/expected.hpp ****   expected_delete_ctor_base(expected_delete_ctor_base &&) noexcept = default;
 966:Cpp/expected.hpp ****   expected_delete_ctor_base &
 967:Cpp/expected.hpp ****   operator=(const expected_delete_ctor_base &) = default;
 968:Cpp/expected.hpp ****   expected_delete_ctor_base &
 969:Cpp/expected.hpp ****   operator=(expected_delete_ctor_base &&) noexcept = default;
 970:Cpp/expected.hpp **** };
 971:Cpp/expected.hpp **** 
 972:Cpp/expected.hpp **** template <class T, class E>
 973:Cpp/expected.hpp **** struct expected_delete_ctor_base<T, E, true, false> {
 974:Cpp/expected.hpp ****   expected_delete_ctor_base() = default;
 975:Cpp/expected.hpp ****   expected_delete_ctor_base(const expected_delete_ctor_base &) = default;
 976:Cpp/expected.hpp ****   expected_delete_ctor_base(expected_delete_ctor_base &&) noexcept = delete;
 977:Cpp/expected.hpp ****   expected_delete_ctor_base &
 978:Cpp/expected.hpp ****   operator=(const expected_delete_ctor_base &) = default;
 979:Cpp/expected.hpp ****   expected_delete_ctor_base &
 980:Cpp/expected.hpp ****   operator=(expected_delete_ctor_base &&) noexcept = default;
 981:Cpp/expected.hpp **** };
 982:Cpp/expected.hpp **** 
 983:Cpp/expected.hpp **** template <class T, class E>
 984:Cpp/expected.hpp **** struct expected_delete_ctor_base<T, E, false, true> {
 985:Cpp/expected.hpp ****   expected_delete_ctor_base() = default;
 986:Cpp/expected.hpp ****   expected_delete_ctor_base(const expected_delete_ctor_base &) = delete;
 987:Cpp/expected.hpp ****   expected_delete_ctor_base(expected_delete_ctor_base &&) noexcept = default;
 988:Cpp/expected.hpp ****   expected_delete_ctor_base &
 989:Cpp/expected.hpp ****   operator=(const expected_delete_ctor_base &) = default;
 990:Cpp/expected.hpp ****   expected_delete_ctor_base &
 991:Cpp/expected.hpp ****   operator=(expected_delete_ctor_base &&) noexcept = default;
 992:Cpp/expected.hpp **** };
 993:Cpp/expected.hpp **** 
 994:Cpp/expected.hpp **** template <class T, class E>
 995:Cpp/expected.hpp **** struct expected_delete_ctor_base<T, E, false, false> {
ARM GAS  /tmp/ccU23Djm.s 			page 59


 996:Cpp/expected.hpp ****   expected_delete_ctor_base() = default;
 997:Cpp/expected.hpp ****   expected_delete_ctor_base(const expected_delete_ctor_base &) = delete;
 998:Cpp/expected.hpp ****   expected_delete_ctor_base(expected_delete_ctor_base &&) noexcept = delete;
 999:Cpp/expected.hpp ****   expected_delete_ctor_base &
1000:Cpp/expected.hpp ****   operator=(const expected_delete_ctor_base &) = default;
1001:Cpp/expected.hpp ****   expected_delete_ctor_base &
1002:Cpp/expected.hpp ****   operator=(expected_delete_ctor_base &&) noexcept = default;
1003:Cpp/expected.hpp **** };
1004:Cpp/expected.hpp **** 
1005:Cpp/expected.hpp **** // expected_delete_assign_base will conditionally delete copy and move
1006:Cpp/expected.hpp **** // constructors depending on whether T and E are copy/move constructible +
1007:Cpp/expected.hpp **** // assignable
1008:Cpp/expected.hpp **** template <class T, class E,
1009:Cpp/expected.hpp ****           bool EnableCopy = (is_copy_constructible_or_void<T>::value &&
1010:Cpp/expected.hpp ****                              std::is_copy_constructible<E>::value &&
1011:Cpp/expected.hpp ****                              is_copy_assignable_or_void<T>::value &&
1012:Cpp/expected.hpp ****                              std::is_copy_assignable<E>::value),
1013:Cpp/expected.hpp ****           bool EnableMove = (is_move_constructible_or_void<T>::value &&
1014:Cpp/expected.hpp ****                              std::is_move_constructible<E>::value &&
1015:Cpp/expected.hpp ****                              is_move_assignable_or_void<T>::value &&
1016:Cpp/expected.hpp ****                              std::is_move_assignable<E>::value)>
1017:Cpp/expected.hpp **** struct expected_delete_assign_base {
1018:Cpp/expected.hpp ****   expected_delete_assign_base() = default;
1019:Cpp/expected.hpp ****   expected_delete_assign_base(const expected_delete_assign_base &) = default;
1020:Cpp/expected.hpp ****   expected_delete_assign_base(expected_delete_assign_base &&) noexcept =
1021:Cpp/expected.hpp ****       default;
1022:Cpp/expected.hpp ****   expected_delete_assign_base &
1023:Cpp/expected.hpp ****   operator=(const expected_delete_assign_base &) = default;
1024:Cpp/expected.hpp ****   expected_delete_assign_base &
1025:Cpp/expected.hpp ****   operator=(expected_delete_assign_base &&) noexcept = default;
1026:Cpp/expected.hpp **** };
1027:Cpp/expected.hpp **** 
1028:Cpp/expected.hpp **** template <class T, class E>
1029:Cpp/expected.hpp **** struct expected_delete_assign_base<T, E, true, false> {
1030:Cpp/expected.hpp ****   expected_delete_assign_base() = default;
1031:Cpp/expected.hpp ****   expected_delete_assign_base(const expected_delete_assign_base &) = default;
1032:Cpp/expected.hpp ****   expected_delete_assign_base(expected_delete_assign_base &&) noexcept =
1033:Cpp/expected.hpp ****       default;
1034:Cpp/expected.hpp ****   expected_delete_assign_base &
1035:Cpp/expected.hpp ****   operator=(const expected_delete_assign_base &) = default;
1036:Cpp/expected.hpp ****   expected_delete_assign_base &
1037:Cpp/expected.hpp ****   operator=(expected_delete_assign_base &&) noexcept = delete;
1038:Cpp/expected.hpp **** };
1039:Cpp/expected.hpp **** 
1040:Cpp/expected.hpp **** template <class T, class E>
1041:Cpp/expected.hpp **** struct expected_delete_assign_base<T, E, false, true> {
1042:Cpp/expected.hpp ****   expected_delete_assign_base() = default;
1043:Cpp/expected.hpp ****   expected_delete_assign_base(const expected_delete_assign_base &) = default;
1044:Cpp/expected.hpp ****   expected_delete_assign_base(expected_delete_assign_base &&) noexcept =
1045:Cpp/expected.hpp ****       default;
1046:Cpp/expected.hpp ****   expected_delete_assign_base &
1047:Cpp/expected.hpp ****   operator=(const expected_delete_assign_base &) = delete;
1048:Cpp/expected.hpp ****   expected_delete_assign_base &
1049:Cpp/expected.hpp ****   operator=(expected_delete_assign_base &&) noexcept = default;
1050:Cpp/expected.hpp **** };
1051:Cpp/expected.hpp **** 
1052:Cpp/expected.hpp **** template <class T, class E>
ARM GAS  /tmp/ccU23Djm.s 			page 60


1053:Cpp/expected.hpp **** struct expected_delete_assign_base<T, E, false, false> {
1054:Cpp/expected.hpp ****   expected_delete_assign_base() = default;
1055:Cpp/expected.hpp ****   expected_delete_assign_base(const expected_delete_assign_base &) = default;
1056:Cpp/expected.hpp ****   expected_delete_assign_base(expected_delete_assign_base &&) noexcept =
1057:Cpp/expected.hpp ****       default;
1058:Cpp/expected.hpp ****   expected_delete_assign_base &
1059:Cpp/expected.hpp ****   operator=(const expected_delete_assign_base &) = delete;
1060:Cpp/expected.hpp ****   expected_delete_assign_base &
1061:Cpp/expected.hpp ****   operator=(expected_delete_assign_base &&) noexcept = delete;
1062:Cpp/expected.hpp **** };
1063:Cpp/expected.hpp **** 
1064:Cpp/expected.hpp **** // This is needed to be able to construct the expected_default_ctor_base which
1065:Cpp/expected.hpp **** // follows, while still conditionally deleting the default constructor.
1066:Cpp/expected.hpp **** struct default_constructor_tag {
1067:Cpp/expected.hpp ****   explicit constexpr default_constructor_tag() = default;
1068:Cpp/expected.hpp **** };
1069:Cpp/expected.hpp **** 
1070:Cpp/expected.hpp **** // expected_default_ctor_base will ensure that expected has a deleted default
1071:Cpp/expected.hpp **** // consturctor if T is not default constructible.
1072:Cpp/expected.hpp **** // This specialization is for when T is default constructible
1073:Cpp/expected.hpp **** template <class T, class E,
1074:Cpp/expected.hpp ****           bool Enable =
1075:Cpp/expected.hpp ****               std::is_default_constructible<T>::value || std::is_void<T>::value>
1076:Cpp/expected.hpp **** struct expected_default_ctor_base {
1077:Cpp/expected.hpp ****   constexpr expected_default_ctor_base() noexcept = default;
1078:Cpp/expected.hpp ****   constexpr expected_default_ctor_base(
1079:Cpp/expected.hpp ****       expected_default_ctor_base const &) noexcept = default;
1080:Cpp/expected.hpp ****   constexpr expected_default_ctor_base(expected_default_ctor_base &&) noexcept =
1081:Cpp/expected.hpp ****       default;
1082:Cpp/expected.hpp ****   expected_default_ctor_base &
1083:Cpp/expected.hpp ****   operator=(expected_default_ctor_base const &) noexcept = default;
1084:Cpp/expected.hpp ****   expected_default_ctor_base &
1085:Cpp/expected.hpp ****   operator=(expected_default_ctor_base &&) noexcept = default;
1086:Cpp/expected.hpp **** 
1087:Cpp/expected.hpp ****   constexpr explicit expected_default_ctor_base(default_constructor_tag) {}
1088:Cpp/expected.hpp **** };
1089:Cpp/expected.hpp **** 
1090:Cpp/expected.hpp **** // This specialization is for when T is not default constructible
1091:Cpp/expected.hpp **** template <class T, class E> struct expected_default_ctor_base<T, E, false> {
1092:Cpp/expected.hpp ****   constexpr expected_default_ctor_base() noexcept = delete;
1093:Cpp/expected.hpp ****   constexpr expected_default_ctor_base(
1094:Cpp/expected.hpp ****       expected_default_ctor_base const &) noexcept = default;
1095:Cpp/expected.hpp ****   constexpr expected_default_ctor_base(expected_default_ctor_base &&) noexcept =
1096:Cpp/expected.hpp ****       default;
1097:Cpp/expected.hpp ****   expected_default_ctor_base &
1098:Cpp/expected.hpp ****   operator=(expected_default_ctor_base const &) noexcept = default;
1099:Cpp/expected.hpp ****   expected_default_ctor_base &
1100:Cpp/expected.hpp ****   operator=(expected_default_ctor_base &&) noexcept = default;
1101:Cpp/expected.hpp **** 
1102:Cpp/expected.hpp ****   constexpr explicit expected_default_ctor_base(default_constructor_tag) {}
1103:Cpp/expected.hpp **** };
1104:Cpp/expected.hpp **** } // namespace detail
1105:Cpp/expected.hpp **** 
1106:Cpp/expected.hpp **** template <class E> class bad_expected_access : public std::exception {
1107:Cpp/expected.hpp **** public:
1108:Cpp/expected.hpp ****   explicit bad_expected_access(E e) : m_val(std::move(e)) {}
1109:Cpp/expected.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 61


1110:Cpp/expected.hpp ****   virtual const char *what() const noexcept override {
1111:Cpp/expected.hpp ****     return "Bad expected access";
1112:Cpp/expected.hpp ****   }
1113:Cpp/expected.hpp **** 
1114:Cpp/expected.hpp ****   const E &error() const & { return m_val; }
1115:Cpp/expected.hpp ****   E &error() & { return m_val; }
1116:Cpp/expected.hpp ****   const E &&error() const && { return std::move(m_val); }
1117:Cpp/expected.hpp ****   E &&error() && { return std::move(m_val); }
1118:Cpp/expected.hpp **** 
1119:Cpp/expected.hpp **** private:
1120:Cpp/expected.hpp ****   E m_val;
1121:Cpp/expected.hpp **** };
1122:Cpp/expected.hpp **** 
1123:Cpp/expected.hpp **** /// An `expected<T, E>` object is an object that contains the storage for
1124:Cpp/expected.hpp **** /// another object and manages the lifetime of this contained object `T`.
1125:Cpp/expected.hpp **** /// Alternatively it could contain the storage for another unexpected object
1126:Cpp/expected.hpp **** /// `E`. The contained object may not be initialized after the expected object
1127:Cpp/expected.hpp **** /// has been initialized, and may not be destroyed before the expected object
1128:Cpp/expected.hpp **** /// has been destroyed. The initialization state of the contained object is
1129:Cpp/expected.hpp **** /// tracked by the expected object.
1130:Cpp/expected.hpp **** template <class T, class E>
1131:Cpp/expected.hpp **** class expected : private detail::expected_move_assign_base<T, E>,
1132:Cpp/expected.hpp ****                  private detail::expected_delete_ctor_base<T, E>,
1133:Cpp/expected.hpp ****                  private detail::expected_delete_assign_base<T, E>,
1134:Cpp/expected.hpp ****                  private detail::expected_default_ctor_base<T, E> {
1135:Cpp/expected.hpp ****   static_assert(!std::is_reference<T>::value, "T must not be a reference");
1136:Cpp/expected.hpp ****   static_assert(!std::is_same<T, std::remove_cv<in_place_t>>::value,
1137:Cpp/expected.hpp ****                 "T must not be in_place_t");
1138:Cpp/expected.hpp ****   static_assert(!std::is_same<T, std::remove_cv<unexpect_t>>::value,
1139:Cpp/expected.hpp ****                 "T must not be unexpect_t");
1140:Cpp/expected.hpp ****   static_assert(!std::is_same<T, std::remove_cv<unexpected<E>>>::value,
1141:Cpp/expected.hpp ****                 "T must not be unexpected<E>");
1142:Cpp/expected.hpp ****   static_assert(!std::is_reference<E>::value, "E must not be a reference");
1143:Cpp/expected.hpp **** 
1144:Cpp/expected.hpp ****   T *valptr() { return std::addressof(this->m_val); }
1145:Cpp/expected.hpp ****   const T *valptr() const { return std::addressof(this->m_val); }    
1146:Cpp/expected.hpp ****   unexpected<E> *errptr() { return std::addressof(this->m_unexpect); }
1147:Cpp/expected.hpp ****   const unexpected<E> *errptr() const { return std::addressof(this->m_unexpect); }    
1148:Cpp/expected.hpp **** 
1149:Cpp/expected.hpp ****   template <class U = T,
1150:Cpp/expected.hpp ****             detail::enable_if_t<!std::is_void<U>::value> * = nullptr>
1151:Cpp/expected.hpp ****   U &val() {
1152:Cpp/expected.hpp ****     return this->m_val;
1153:Cpp/expected.hpp ****   }
1154:Cpp/expected.hpp ****   unexpected<E> &err() { return this->m_unexpect; }
1155:Cpp/expected.hpp **** 
1156:Cpp/expected.hpp ****   template <class U = T,
1157:Cpp/expected.hpp ****             detail::enable_if_t<!std::is_void<U>::value> * = nullptr>
1158:Cpp/expected.hpp ****   const U &val() const {
1159:Cpp/expected.hpp ****     return this->m_val;
1160:Cpp/expected.hpp ****   }
1161:Cpp/expected.hpp ****   const unexpected<E> &err() const { return this->m_unexpect; }
1162:Cpp/expected.hpp **** 
1163:Cpp/expected.hpp ****   using impl_base = detail::expected_move_assign_base<T, E>;
1164:Cpp/expected.hpp ****   using ctor_base = detail::expected_default_ctor_base<T, E>;
1165:Cpp/expected.hpp **** 
1166:Cpp/expected.hpp **** public:
ARM GAS  /tmp/ccU23Djm.s 			page 62


1167:Cpp/expected.hpp ****   typedef T value_type;
1168:Cpp/expected.hpp ****   typedef E error_type;
1169:Cpp/expected.hpp ****   typedef unexpected<E> unexpected_type;
1170:Cpp/expected.hpp **** 
1171:Cpp/expected.hpp **** #if defined(TL_EXPECTED_CXX14) && !defined(TL_EXPECTED_GCC49) &&               \
1172:Cpp/expected.hpp ****     !defined(TL_EXPECTED_GCC54) && !defined(TL_EXPECTED_GCC55)
1173:Cpp/expected.hpp ****   /// \group and_then
1174:Cpp/expected.hpp ****   /// Carries out some operation which returns an expected on the stored object
1175:Cpp/expected.hpp ****   /// if there is one. \requires `std::invoke(std::forward<F>(f), value())`
1176:Cpp/expected.hpp ****   /// returns an `expected<U>` for some `U`. \returns Let `U` be the result
1177:Cpp/expected.hpp ****   /// of `std::invoke(std::forward<F>(f), value())`. Returns an
1178:Cpp/expected.hpp ****   /// `expected<U>`. The return value is empty if `*this` is empty,
1179:Cpp/expected.hpp ****   /// otherwise the return value of `std::invoke(std::forward<F>(f), value())`
1180:Cpp/expected.hpp ****   /// is returned.
1181:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) &;
1182:Cpp/expected.hpp ****   template <class F> TL_EXPECTED_11_CONSTEXPR auto and_then(F &&f) & {
1183:Cpp/expected.hpp ****     return and_then_impl(*this, std::forward<F>(f));
1184:Cpp/expected.hpp ****   }
1185:Cpp/expected.hpp **** 
1186:Cpp/expected.hpp ****   /// \group and_then
1187:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) &&;
1188:Cpp/expected.hpp ****   template <class F> TL_EXPECTED_11_CONSTEXPR auto and_then(F &&f) && {
1189:Cpp/expected.hpp ****     return and_then_impl(std::move(*this), std::forward<F>(f));
1190:Cpp/expected.hpp ****   }
1191:Cpp/expected.hpp **** 
1192:Cpp/expected.hpp ****   /// \group and_then
1193:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) const &;
1194:Cpp/expected.hpp ****   template <class F> constexpr auto and_then(F &&f) const & {
1195:Cpp/expected.hpp ****     return and_then_impl(*this, std::forward<F>(f));
1196:Cpp/expected.hpp ****   }
1197:Cpp/expected.hpp **** 
1198:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
1199:Cpp/expected.hpp ****   /// \group and_then
1200:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) const &&;
1201:Cpp/expected.hpp ****   template <class F> constexpr auto and_then(F &&f) const && {
1202:Cpp/expected.hpp ****     return and_then_impl(std::move(*this), std::forward<F>(f));
1203:Cpp/expected.hpp ****   }
1204:Cpp/expected.hpp **** #endif
1205:Cpp/expected.hpp **** 
1206:Cpp/expected.hpp **** #else
1207:Cpp/expected.hpp ****   /// \group and_then
1208:Cpp/expected.hpp ****   /// Carries out some operation which returns an expected on the stored object
1209:Cpp/expected.hpp ****   /// if there is one. \requires `std::invoke(std::forward<F>(f), value())`
1210:Cpp/expected.hpp ****   /// returns an `expected<U>` for some `U`. \returns Let `U` be the result
1211:Cpp/expected.hpp ****   /// of `std::invoke(std::forward<F>(f), value())`. Returns an
1212:Cpp/expected.hpp ****   /// `expected<U>`. The return value is empty if `*this` is empty,
1213:Cpp/expected.hpp ****   /// otherwise the return value of `std::invoke(std::forward<F>(f), value())`
1214:Cpp/expected.hpp ****   /// is returned.
1215:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) &;
1216:Cpp/expected.hpp ****   template <class F>
1217:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR auto
1218:Cpp/expected.hpp ****   and_then(F &&f) & -> decltype(and_then_impl(*this, std::forward<F>(f))) {
1219:Cpp/expected.hpp ****     return and_then_impl(*this, std::forward<F>(f));
1220:Cpp/expected.hpp ****   }
1221:Cpp/expected.hpp **** 
1222:Cpp/expected.hpp ****   /// \group and_then
1223:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) &&;
ARM GAS  /tmp/ccU23Djm.s 			page 63


1224:Cpp/expected.hpp ****   template <class F>
1225:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR auto and_then(F &&f) && -> decltype(
1226:Cpp/expected.hpp ****       and_then_impl(std::move(*this), std::forward<F>(f))) {
1227:Cpp/expected.hpp ****     return and_then_impl(std::move(*this), std::forward<F>(f));
1228:Cpp/expected.hpp ****   }
1229:Cpp/expected.hpp **** 
1230:Cpp/expected.hpp ****   /// \group and_then
1231:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) const &;
1232:Cpp/expected.hpp ****   template <class F>
1233:Cpp/expected.hpp ****   constexpr auto and_then(F &&f) const & -> decltype(
1234:Cpp/expected.hpp ****       and_then_impl(*this, std::forward<F>(f))) {
1235:Cpp/expected.hpp ****     return and_then_impl(*this, std::forward<F>(f));
1236:Cpp/expected.hpp ****   }
1237:Cpp/expected.hpp **** 
1238:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
1239:Cpp/expected.hpp ****   /// \group and_then
1240:Cpp/expected.hpp ****   /// \synopsis template <class F>\nconstexpr auto and_then(F &&f) const &&;
1241:Cpp/expected.hpp ****   template <class F>
1242:Cpp/expected.hpp ****   constexpr auto and_then(F &&f) const && -> decltype(
1243:Cpp/expected.hpp ****       and_then_impl(std::move(*this), std::forward<F>(f))) {
1244:Cpp/expected.hpp ****     return and_then_impl(std::move(*this), std::forward<F>(f));
1245:Cpp/expected.hpp ****   }
1246:Cpp/expected.hpp **** #endif
1247:Cpp/expected.hpp **** #endif
1248:Cpp/expected.hpp **** 
1249:Cpp/expected.hpp **** #if defined(TL_EXPECTED_CXX14) && !defined(TL_EXPECTED_GCC49) &&               \
1250:Cpp/expected.hpp ****     !defined(TL_EXPECTED_GCC54) && !defined(TL_EXPECTED_GCC55)
1251:Cpp/expected.hpp ****   /// \brief Carries out some operation on the stored object if there is one.
1252:Cpp/expected.hpp ****   /// \returns Let `U` be the result of `std::invoke(std::forward<F>(f),
1253:Cpp/expected.hpp ****   /// value())`. If `U` is `void`, returns an `expected<monostate,E>, otherwise
1254:Cpp/expected.hpp ****   //  returns an `expected<U,E>`. If `*this` is unexpected, the
1255:Cpp/expected.hpp ****   /// result is `*this`, otherwise an `expected<U,E>` is constructed from the
1256:Cpp/expected.hpp ****   /// return value of `std::invoke(std::forward<F>(f), value())` and is
1257:Cpp/expected.hpp ****   /// returned.
1258:Cpp/expected.hpp ****   ///
1259:Cpp/expected.hpp ****   /// \group map
1260:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) &;
1261:Cpp/expected.hpp ****   template <class F> TL_EXPECTED_11_CONSTEXPR auto map(F &&f) & {
1262:Cpp/expected.hpp ****     return expected_map_impl(*this, std::forward<F>(f));
1263:Cpp/expected.hpp ****   }
1264:Cpp/expected.hpp **** 
1265:Cpp/expected.hpp ****   /// \group map
1266:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) &&;
1267:Cpp/expected.hpp ****   template <class F> TL_EXPECTED_11_CONSTEXPR auto map(F &&f) && {
1268:Cpp/expected.hpp ****     return expected_map_impl(std::move(*this), std::forward<F>(f));
1269:Cpp/expected.hpp ****   }
1270:Cpp/expected.hpp **** 
1271:Cpp/expected.hpp ****   /// \group map
1272:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) const &;
1273:Cpp/expected.hpp ****   template <class F> constexpr auto map(F &&f) const & {
1274:Cpp/expected.hpp ****     return expected_map_impl(*this, std::forward<F>(f));
1275:Cpp/expected.hpp ****   }
1276:Cpp/expected.hpp **** 
1277:Cpp/expected.hpp ****   /// \group map
1278:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) const &&;
1279:Cpp/expected.hpp ****   template <class F> constexpr auto map(F &&f) const && {
1280:Cpp/expected.hpp ****     return expected_map_impl(std::move(*this), std::forward<F>(f));
ARM GAS  /tmp/ccU23Djm.s 			page 64


1281:Cpp/expected.hpp ****   }
1282:Cpp/expected.hpp **** #else
1283:Cpp/expected.hpp ****   /// \brief Carries out some operation on the stored object if there is one.
1284:Cpp/expected.hpp ****   /// \returns Let `U` be the result of `std::invoke(std::forward<F>(f),
1285:Cpp/expected.hpp ****   /// value())`. If `U` is `void`, returns an `expected<monostate,E>, otherwise
1286:Cpp/expected.hpp ****   //  returns an `expected<U,E>`. If `*this` is unexpected, the
1287:Cpp/expected.hpp ****   /// result is `*this`, otherwise an `expected<U,E>` is constructed from the
1288:Cpp/expected.hpp ****   /// return value of `std::invoke(std::forward<F>(f), value())` and is
1289:Cpp/expected.hpp ****   /// returned.
1290:Cpp/expected.hpp ****   ///
1291:Cpp/expected.hpp ****   /// \group map
1292:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) &;
1293:Cpp/expected.hpp ****   template <class F>
1294:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR decltype(
1295:Cpp/expected.hpp ****       expected_map_impl(std::declval<expected &>(), std::declval<F &&>()))
1296:Cpp/expected.hpp ****   map(F &&f) & {
1297:Cpp/expected.hpp ****     return expected_map_impl(*this, std::forward<F>(f));
1298:Cpp/expected.hpp ****   }
1299:Cpp/expected.hpp **** 
1300:Cpp/expected.hpp ****   /// \group map
1301:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) &&;
1302:Cpp/expected.hpp ****   template <class F>
1303:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR decltype(
1304:Cpp/expected.hpp ****       expected_map_impl(std::declval<expected &>(), std::declval<F &&>()))
1305:Cpp/expected.hpp ****   map(F &&f) && {
1306:Cpp/expected.hpp ****     return expected_map_impl(std::move(*this), std::forward<F>(f));
1307:Cpp/expected.hpp ****   }
1308:Cpp/expected.hpp **** 
1309:Cpp/expected.hpp ****   /// \group map
1310:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) const &;
1311:Cpp/expected.hpp ****   template <class F>
1312:Cpp/expected.hpp ****   constexpr decltype(expected_map_impl(std::declval<const expected &>(),
1313:Cpp/expected.hpp ****                                        std::declval<F &&>()))
1314:Cpp/expected.hpp ****   map(F &&f) const & {
1315:Cpp/expected.hpp ****     return expected_map_impl(*this, std::forward<F>(f));
1316:Cpp/expected.hpp ****   }
1317:Cpp/expected.hpp **** 
1318:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
1319:Cpp/expected.hpp ****   /// \group map
1320:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map(F &&f) const &&;
1321:Cpp/expected.hpp ****   template <class F>
1322:Cpp/expected.hpp ****   constexpr decltype(expected_map_impl(std::declval<const expected &&>(),
1323:Cpp/expected.hpp ****                                        std::declval<F &&>()))
1324:Cpp/expected.hpp ****   map(F &&f) const && {
1325:Cpp/expected.hpp ****     return expected_map_impl(std::move(*this), std::forward<F>(f));
1326:Cpp/expected.hpp ****   }
1327:Cpp/expected.hpp **** #endif
1328:Cpp/expected.hpp **** #endif
1329:Cpp/expected.hpp **** 
1330:Cpp/expected.hpp **** #if defined(TL_EXPECTED_CXX14) && !defined(TL_EXPECTED_GCC49) &&               \
1331:Cpp/expected.hpp ****     !defined(TL_EXPECTED_GCC54) && !defined(TL_EXPECTED_GCC55)
1332:Cpp/expected.hpp ****   /// \brief Carries out some operation on the stored unexpected object if there
1333:Cpp/expected.hpp ****   /// is one.
1334:Cpp/expected.hpp ****   /// \returns Let `U` be the result of `std::invoke(std::forward<F>(f),
1335:Cpp/expected.hpp ****   /// value())`. If `U` is `void`, returns an `expected<T,monostate>`, otherwise
1336:Cpp/expected.hpp ****   /// returns an `expected<T,U>`. If `*this` has an expected
1337:Cpp/expected.hpp ****   /// value, the result is `*this`, otherwise an `expected<T,U>` is constructed
ARM GAS  /tmp/ccU23Djm.s 			page 65


1338:Cpp/expected.hpp ****   /// from `make_unexpected(std::invoke(std::forward<F>(f), value()))` and is
1339:Cpp/expected.hpp ****   /// returned.
1340:Cpp/expected.hpp ****   ///
1341:Cpp/expected.hpp ****   /// \group map_error
1342:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) &;
1343:Cpp/expected.hpp ****   template <class F> TL_EXPECTED_11_CONSTEXPR auto map_error(F &&f) & {
1344:Cpp/expected.hpp ****     return map_error_impl(*this, std::forward<F>(f));
1345:Cpp/expected.hpp ****   }
1346:Cpp/expected.hpp **** 
1347:Cpp/expected.hpp ****   /// \group map_error
1348:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) &&;
1349:Cpp/expected.hpp ****   template <class F> TL_EXPECTED_11_CONSTEXPR auto map_error(F &&f) && {
1350:Cpp/expected.hpp ****     return map_error_impl(std::move(*this), std::forward<F>(f));
1351:Cpp/expected.hpp ****   }
1352:Cpp/expected.hpp **** 
1353:Cpp/expected.hpp ****   /// \group map_error
1354:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) const &;
1355:Cpp/expected.hpp ****   template <class F> constexpr auto map_error(F &&f) const & {
1356:Cpp/expected.hpp ****     return map_error_impl(*this, std::forward<F>(f));
1357:Cpp/expected.hpp ****   }
1358:Cpp/expected.hpp **** 
1359:Cpp/expected.hpp ****   /// \group map_error
1360:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) const &&;
1361:Cpp/expected.hpp ****   template <class F> constexpr auto map_error(F &&f) const && {
1362:Cpp/expected.hpp ****     return map_error_impl(std::move(*this), std::forward<F>(f));
1363:Cpp/expected.hpp ****   }
1364:Cpp/expected.hpp **** #else
1365:Cpp/expected.hpp ****   /// \brief Carries out some operation on the stored unexpected object if there
1366:Cpp/expected.hpp ****   /// is one.
1367:Cpp/expected.hpp ****   /// \returns Let `U` be the result of `std::invoke(std::forward<F>(f),
1368:Cpp/expected.hpp ****   /// value())`. Returns an `expected<T,U>`. If `*this` has an expected
1369:Cpp/expected.hpp ****   /// value, the result is `*this`, otherwise an `expected<T,U>` is constructed
1370:Cpp/expected.hpp ****   /// from `make_unexpected(std::invoke(std::forward<F>(f), value()))` and is
1371:Cpp/expected.hpp ****   /// returned.
1372:Cpp/expected.hpp ****   ///
1373:Cpp/expected.hpp ****   /// \group map_error
1374:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) &;
1375:Cpp/expected.hpp ****   template <class F>
1376:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR decltype(map_error_impl(std::declval<expected &>(),
1377:Cpp/expected.hpp ****                                                    std::declval<F &&>()))
1378:Cpp/expected.hpp ****   map_error(F &&f) & {
1379:Cpp/expected.hpp ****     return map_error_impl(*this, std::forward<F>(f));
1380:Cpp/expected.hpp ****   }
1381:Cpp/expected.hpp **** 
1382:Cpp/expected.hpp ****   /// \group map_error
1383:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) &&;
1384:Cpp/expected.hpp ****   template <class F>
1385:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR decltype(map_error_impl(std::declval<expected &&>(),
1386:Cpp/expected.hpp ****                                                    std::declval<F &&>()))
1387:Cpp/expected.hpp ****   map_error(F &&f) && {
1388:Cpp/expected.hpp ****     return map_error_impl(std::move(*this), std::forward<F>(f));
1389:Cpp/expected.hpp ****   }
1390:Cpp/expected.hpp **** 
1391:Cpp/expected.hpp ****   /// \group map_error
1392:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) const &;
1393:Cpp/expected.hpp ****   template <class F>
1394:Cpp/expected.hpp ****   constexpr decltype(map_error_impl(std::declval<const expected &>(),
ARM GAS  /tmp/ccU23Djm.s 			page 66


1395:Cpp/expected.hpp ****                                     std::declval<F &&>()))
1396:Cpp/expected.hpp ****   map_error(F &&f) const & {
1397:Cpp/expected.hpp ****     return map_error_impl(*this, std::forward<F>(f));
1398:Cpp/expected.hpp ****   }
1399:Cpp/expected.hpp **** 
1400:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
1401:Cpp/expected.hpp ****   /// \group map_error
1402:Cpp/expected.hpp ****   /// \synopsis template <class F> constexpr auto map_error(F &&f) const &&;
1403:Cpp/expected.hpp ****   template <class F>
1404:Cpp/expected.hpp ****   constexpr decltype(map_error_impl(std::declval<const expected &&>(),
1405:Cpp/expected.hpp ****                                     std::declval<F &&>()))
1406:Cpp/expected.hpp ****   map_error(F &&f) const && {
1407:Cpp/expected.hpp ****     return map_error_impl(std::move(*this), std::forward<F>(f));
1408:Cpp/expected.hpp ****   }
1409:Cpp/expected.hpp **** #endif
1410:Cpp/expected.hpp **** #endif
1411:Cpp/expected.hpp **** 
1412:Cpp/expected.hpp ****   /// \brief Calls `f` if the expectd is in the unexpected state
1413:Cpp/expected.hpp ****   /// \requires `F` is invokable with `E`, and `std::invoke_result_t<F>`
1414:Cpp/expected.hpp ****   /// must be void or convertible to `expcted<T,E>`.
1415:Cpp/expected.hpp ****   /// \effects If `*this` has a value, returns `*this`.
1416:Cpp/expected.hpp ****   /// Otherwise, if `f` returns `void`, calls `std::forward<F>(f)(E)` and returns
1417:Cpp/expected.hpp ****   /// `std::nullopt`. Otherwise, returns `std::forward<F>(f)(E)`.
1418:Cpp/expected.hpp ****   ///
1419:Cpp/expected.hpp ****   /// \group or_else
1420:Cpp/expected.hpp ****   template <class F> expected TL_EXPECTED_11_CONSTEXPR or_else(F &&f) & {
1421:Cpp/expected.hpp ****     return or_else_impl(*this, std::forward<F>(f));
1422:Cpp/expected.hpp ****   }
1423:Cpp/expected.hpp **** 
1424:Cpp/expected.hpp ****   template <class F> expected TL_EXPECTED_11_CONSTEXPR or_else(F &&f) && {
1425:Cpp/expected.hpp ****     return or_else_impl(std::move(*this), std::forward<F>(f));
1426:Cpp/expected.hpp ****   }
1427:Cpp/expected.hpp **** 
1428:Cpp/expected.hpp ****   template <class F> expected constexpr or_else(F &&f) const & {
1429:Cpp/expected.hpp ****     return or_else_impl(*this, std::forward<F>(f));
1430:Cpp/expected.hpp ****   }
1431:Cpp/expected.hpp **** 
1432:Cpp/expected.hpp **** #ifndef TL_EXPECTED_NO_CONSTRR
1433:Cpp/expected.hpp ****   template <class F> expected constexpr or_else(F &&f) const && {
1434:Cpp/expected.hpp ****     return or_else_impl(std::move(*this), std::forward<F>(f));
1435:Cpp/expected.hpp ****   }
1436:Cpp/expected.hpp **** #endif
1437:Cpp/expected.hpp ****   constexpr expected() = default;
 1688              		.loc 7 1437 13
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 8
 1691              		@ frame_needed = 1, uses_anonymous_args = 0
 1692 0000 80B5     		push	{r7, lr}
 1693              	.LCFI139:
 1694              		.cfi_def_cfa_offset 8
 1695              		.cfi_offset 7, -8
 1696              		.cfi_offset 14, -4
 1697 0002 82B0     		sub	sp, sp, #8
 1698              	.LCFI140:
 1699              		.cfi_def_cfa_offset 16
 1700 0004 00AF     		add	r7, sp, #0
 1701              	.LCFI141:
ARM GAS  /tmp/ccU23Djm.s 			page 67


 1702              		.cfi_def_cfa_register 7
 1703 0006 7860     		str	r0, [r7, #4]
 1704              	.LBB14:
 1705              		.loc 7 1437 13
 1706 0008 7B68     		ldr	r3, [r7, #4]
 1707 000a 1846     		mov	r0, r3
 1708 000c FFF7FEFF 		bl	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1
 1709              	.LBE14:
 1710 0010 7B68     		ldr	r3, [r7, #4]
 1711 0012 1846     		mov	r0, r3
 1712 0014 0837     		adds	r7, r7, #8
 1713              	.LCFI142:
 1714              		.cfi_def_cfa_offset 8
 1715 0016 BD46     		mov	sp, r7
 1716              	.LCFI143:
 1717              		.cfi_def_cfa_register 13
 1718              		@ sp needed
 1719 0018 80BD     		pop	{r7, pc}
 1720              		.cfi_endproc
 1721              	.LFE3911:
 1723              		.weak	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1Ev
 1724              		.thumb_set _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1Ev
 1725              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv,"axG",%progb
 1726              		.align	1
 1727              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv
 1728              		.syntax unified
 1729              		.thumb
 1730              		.thumb_func
 1731              		.fpu fpv4-sp-d16
 1733              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv:
 1734              	.LFB3892:
  78:Cpp/local_vector.hpp **** 
  79:Cpp/local_vector.hpp ****     constexpr auto end() const noexcept
  80:Cpp/local_vector.hpp ****     {
  81:Cpp/local_vector.hpp ****       return data() + _size;
  82:Cpp/local_vector.hpp ****     }
  83:Cpp/local_vector.hpp **** 
  84:Cpp/local_vector.hpp ****     constexpr auto rbegin() noexcept
  85:Cpp/local_vector.hpp ****     {
  86:Cpp/local_vector.hpp ****       return std::make_reverse_iterator(end());
  87:Cpp/local_vector.hpp ****     }
  88:Cpp/local_vector.hpp **** 
  89:Cpp/local_vector.hpp ****     constexpr auto rbegin() const noexcept
  90:Cpp/local_vector.hpp ****     {
  91:Cpp/local_vector.hpp ****       return std::make_reverse_iterator(end());
  92:Cpp/local_vector.hpp ****     }
  93:Cpp/local_vector.hpp **** 
  94:Cpp/local_vector.hpp ****     constexpr auto rend() noexcept
  95:Cpp/local_vector.hpp ****     {
  96:Cpp/local_vector.hpp ****       return std::make_reverse_iterator(begin());
  97:Cpp/local_vector.hpp ****     }
  98:Cpp/local_vector.hpp **** 
  99:Cpp/local_vector.hpp ****     constexpr auto rend() const noexcept
 100:Cpp/local_vector.hpp ****     {
 101:Cpp/local_vector.hpp ****       return std::make_reverse_iterator(begin());
 102:Cpp/local_vector.hpp ****     }
 103:Cpp/local_vector.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 68


 104:Cpp/local_vector.hpp ****     // Accessors
 105:Cpp/local_vector.hpp **** 
 106:Cpp/local_vector.hpp ****     constexpr value_type& front() noexcept
 107:Cpp/local_vector.hpp ****     {
 108:Cpp/local_vector.hpp ****       return *begin();
 109:Cpp/local_vector.hpp ****     }
 110:Cpp/local_vector.hpp **** 
 111:Cpp/local_vector.hpp ****     constexpr const value_type& front() const noexcept
 112:Cpp/local_vector.hpp ****     {
 113:Cpp/local_vector.hpp ****       return *begin();
 114:Cpp/local_vector.hpp ****     }
 115:Cpp/local_vector.hpp **** 
 116:Cpp/local_vector.hpp ****     constexpr value_type& back() noexcept
 117:Cpp/local_vector.hpp ****     {
 118:Cpp/local_vector.hpp ****       return data()[_size - 1];
 119:Cpp/local_vector.hpp ****     }
 120:Cpp/local_vector.hpp **** 
 121:Cpp/local_vector.hpp ****     constexpr const value_type& back() const noexcept
 122:Cpp/local_vector.hpp ****     {
 123:Cpp/local_vector.hpp ****       return data()[_size - 1];
 124:Cpp/local_vector.hpp ****     }
 125:Cpp/local_vector.hpp **** 
 126:Cpp/local_vector.hpp ****     constexpr value_type& operator[](std::size_t idx) noexcept
 127:Cpp/local_vector.hpp ****     {
 128:Cpp/local_vector.hpp ****       return data()[idx];
 129:Cpp/local_vector.hpp ****     }
 130:Cpp/local_vector.hpp ****     constexpr const value_type& operator[](std::size_t idx) const noexcept
 131:Cpp/local_vector.hpp ****     {
 132:Cpp/local_vector.hpp ****       return data()[idx];
 133:Cpp/local_vector.hpp ****     }
 134:Cpp/local_vector.hpp ****     constexpr value_type* data() noexcept
 135:Cpp/local_vector.hpp ****     {
 136:Cpp/local_vector.hpp ****       // Launder is a pointer optimization barrier. It's necessary to make the
 137:Cpp/local_vector.hpp ****       // reinterpret_cast legal in this case
 138:Cpp/local_vector.hpp **** #if __cpp_lib_launder >= 201606
 139:Cpp/local_vector.hpp ****       // have std::launder for sure
 140:Cpp/local_vector.hpp ****       return std::launder(reinterpret_cast<value_type*>(&_data));
 141:Cpp/local_vector.hpp **** #else
 142:Cpp/local_vector.hpp ****       // not sure, could've std::launder either way
 143:Cpp/local_vector.hpp ****       return reinterpret_cast<value_type*>(&_data);
 144:Cpp/local_vector.hpp **** #endif
 145:Cpp/local_vector.hpp ****     }
 146:Cpp/local_vector.hpp **** 
 147:Cpp/local_vector.hpp ****     constexpr const value_type* data() const noexcept
 148:Cpp/local_vector.hpp ****     {
 149:Cpp/local_vector.hpp ****       // Launder is a pointer optimization barrier. It's necessary to make the
 150:Cpp/local_vector.hpp ****       // reinterpret_cast legal in this case
 151:Cpp/local_vector.hpp **** #if __cpp_lib_launder >= 201606
 152:Cpp/local_vector.hpp ****       // have std::launder for sure
 153:Cpp/local_vector.hpp ****       return std::launder(reinterpret_cast<const value_type*>(&_data));
 154:Cpp/local_vector.hpp **** #else
 155:Cpp/local_vector.hpp ****       // not sure, could've std::launder either way
 156:Cpp/local_vector.hpp ****       return reinterpret_cast<const value_type*>(&_data);
 157:Cpp/local_vector.hpp **** #endif
 158:Cpp/local_vector.hpp ****     }
 159:Cpp/local_vector.hpp **** 
 160:Cpp/local_vector.hpp ****     // Modifiers
ARM GAS  /tmp/ccU23Djm.s 			page 69


 161:Cpp/local_vector.hpp **** 
 162:Cpp/local_vector.hpp ****     constexpr tl::expected<value_type*, error> push_back(const value_type& e) noexcept
 163:Cpp/local_vector.hpp ****     {
 164:Cpp/local_vector.hpp ****       return emplace_back(e);
 165:Cpp/local_vector.hpp ****     }
 166:Cpp/local_vector.hpp **** 
 167:Cpp/local_vector.hpp ****     constexpr tl::expected<value_type*, error> push_back(value_type&& e) noexcept
 168:Cpp/local_vector.hpp ****     {
 169:Cpp/local_vector.hpp ****       return emplace_back(std::move(e));
 170:Cpp/local_vector.hpp ****     }
 171:Cpp/local_vector.hpp **** 
 172:Cpp/local_vector.hpp ****     template<typename... Args, typename Enable = std::enable_if_t<std::is_constructible_v<value_typ
 173:Cpp/local_vector.hpp ****     constexpr tl::expected<value_type*, error> emplace_back(Args&&... args) noexcept
 174:Cpp/local_vector.hpp ****     {
 175:Cpp/local_vector.hpp ****       if (full()) return tl::unexpected(error::full);
 176:Cpp/local_vector.hpp ****       new (data() + _size) T(std::forward<Args>(args)...);
 177:Cpp/local_vector.hpp ****       _size++;
 178:Cpp/local_vector.hpp ****       return &back();
 179:Cpp/local_vector.hpp ****     }
 180:Cpp/local_vector.hpp **** 
 181:Cpp/local_vector.hpp ****     /// Inserts value before pos
 182:Cpp/local_vector.hpp ****     constexpr tl::expected<iterator, error> insert_before(iterator iter, const value_type& value) n
 183:Cpp/local_vector.hpp ****     {
 184:Cpp/local_vector.hpp ****       return push_back(value).map([&](auto&&) {
 185:Cpp/local_vector.hpp ****         // Move the element back until its placed at the correct location
 186:Cpp/local_vector.hpp ****         for (auto i = end() - 1; i != iter; --i) {
 187:Cpp/local_vector.hpp ****           std::swap(*(i), *(i - 1));
 188:Cpp/local_vector.hpp ****         }
 189:Cpp/local_vector.hpp ****         return iter;
 190:Cpp/local_vector.hpp ****       });
 191:Cpp/local_vector.hpp ****     }
 192:Cpp/local_vector.hpp **** 
 193:Cpp/local_vector.hpp ****     /// Inserts value before iter. NOTE: use insert_before for noexcept version
 194:Cpp/local_vector.hpp ****     ///
 195:Cpp/local_vector.hpp ****     /// Mainly provided for use with STL algorithms like transform.
 196:Cpp/local_vector.hpp ****     ///
 197:Cpp/local_vector.hpp ****     /// @throws tl::bad_expected_access<error> if there was an error when inserting
 198:Cpp/local_vector.hpp ****     constexpr iterator insert(iterator iter, const value_type& value)
 199:Cpp/local_vector.hpp ****     {
 200:Cpp/local_vector.hpp ****       return insert_before(iter, value).value();
 201:Cpp/local_vector.hpp ****     }
 202:Cpp/local_vector.hpp **** 
 203:Cpp/local_vector.hpp ****     constexpr tl::expected<void, error> pop_back() noexcept
 1735              		.loc 5 203 41
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 16
 1738              		@ frame_needed = 1, uses_anonymous_args = 0
 1739 0000 80B5     		push	{r7, lr}
 1740              	.LCFI144:
 1741              		.cfi_def_cfa_offset 8
 1742              		.cfi_offset 7, -8
 1743              		.cfi_offset 14, -4
 1744 0002 84B0     		sub	sp, sp, #16
 1745              	.LCFI145:
 1746              		.cfi_def_cfa_offset 24
 1747 0004 00AF     		add	r7, sp, #0
 1748              	.LCFI146:
ARM GAS  /tmp/ccU23Djm.s 			page 70


 1749              		.cfi_def_cfa_register 7
 1750 0006 7860     		str	r0, [r7, #4]
 1751 0008 3960     		str	r1, [r7]
 204:Cpp/local_vector.hpp ****     {
 205:Cpp/local_vector.hpp ****       if (empty()) return tl::unexpected(error::empty);
 1752              		.loc 5 205 7
 1753 000a 3868     		ldr	r0, [r7]
 1754 000c FFF7FEFF 		bl	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv
 1755 0010 0346     		mov	r3, r0
 1756 0012 002B     		cmp	r3, #0
 1757 0014 10D0     		beq	.L73
 1758              		.loc 5 205 54 discriminator 1
 1759 0016 0123     		movs	r3, #1
 1760 0018 FB60     		str	r3, [r7, #12]
 1761 001a 07F10C02 		add	r2, r7, #12
 1762 001e 07F10803 		add	r3, r7, #8
 1763 0022 1146     		mov	r1, r2
 1764 0024 1846     		mov	r0, r3
 1765 0026 FFF7FEFF 		bl	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1EOS8_
 1766 002a 07F10803 		add	r3, r7, #8
 1767 002e 1946     		mov	r1, r3
 1768 0030 7868     		ldr	r0, [r7, #4]
 1769 0032 FFF7FEFF 		bl	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1IS8_LPv0EL
 1770 0036 20E0     		b	.L72
 1771              	.L73:
 206:Cpp/local_vector.hpp ****       data()[_size].~T();
 1772              		.loc 5 206 13
 1773 0038 3868     		ldr	r0, [r7]
 1774 003a FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
 1775 003e 0146     		mov	r1, r0
 1776              		.loc 5 206 14
 1777 0040 3B68     		ldr	r3, [r7]
 1778 0042 03F5A033 		add	r3, r3, #81920
 1779 0046 1A68     		ldr	r2, [r3]
 1780              		.loc 5 206 13
 1781 0048 1346     		mov	r3, r2
 1782 004a 9B00     		lsls	r3, r3, #2
 1783 004c 1344     		add	r3, r3, r2
 1784 004e 1B01     		lsls	r3, r3, #4
 1785              		.loc 5 206 7
 1786 0050 0B44     		add	r3, r3, r1
 1787 0052 1846     		mov	r0, r3
 1788 0054 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 207:Cpp/local_vector.hpp ****       _size--;
 1789              		.loc 5 207 7
 1790 0058 3B68     		ldr	r3, [r7]
 1791 005a 03F5A033 		add	r3, r3, #81920
 1792 005e 1B68     		ldr	r3, [r3]
 1793 0060 5A1E     		subs	r2, r3, #1
 1794 0062 3B68     		ldr	r3, [r7]
 1795 0064 03F5A033 		add	r3, r3, #81920
 1796 0068 1A60     		str	r2, [r3]
 208:Cpp/local_vector.hpp ****       return {};
 1797              		.loc 5 208 15
 1798 006a 7B68     		ldr	r3, [r7, #4]
 1799 006c 1A46     		mov	r2, r3
 1800 006e 0023     		movs	r3, #0
ARM GAS  /tmp/ccU23Djm.s 			page 71


 1801 0070 1360     		str	r3, [r2]
 1802 0072 5360     		str	r3, [r2, #4]
 1803 0074 7868     		ldr	r0, [r7, #4]
 1804 0076 FFF7FEFF 		bl	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1Ev
 1805              	.L72:
 209:Cpp/local_vector.hpp ****     }
 1806              		.loc 5 209 5
 1807 007a 7868     		ldr	r0, [r7, #4]
 1808 007c 1037     		adds	r7, r7, #16
 1809              	.LCFI147:
 1810              		.cfi_def_cfa_offset 8
 1811 007e BD46     		mov	sp, r7
 1812              	.LCFI148:
 1813              		.cfi_def_cfa_register 13
 1814              		@ sp needed
 1815 0080 80BD     		pop	{r7, pc}
 1816              		.cfi_endproc
 1817              	.LFE3892:
 1819              		.section	.text._ZN4otto3mcu9Scheduler3popEv,"axG",%progbits,_ZN4otto3mcu9Scheduler3popEv,comdat
 1820              		.align	1
 1821              		.weak	_ZN4otto3mcu9Scheduler3popEv
 1822              		.syntax unified
 1823              		.thumb
 1824              		.thumb_func
 1825              		.fpu fpv4-sp-d16
 1827              	_ZN4otto3mcu9Scheduler3popEv:
 1828              	.LFB3886:
  71:Cpp/scheduler.hpp **** 
  72:Cpp/scheduler.hpp ****   private:
  73:Cpp/scheduler.hpp ****     Task pop()
 1829              		.loc 6 73 10
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 16
 1832              		@ frame_needed = 1, uses_anonymous_args = 0
 1833 0000 B0B5     		push	{r4, r5, r7, lr}
 1834              	.LCFI149:
 1835              		.cfi_def_cfa_offset 16
 1836              		.cfi_offset 4, -16
 1837              		.cfi_offset 5, -12
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
 1840 0002 84B0     		sub	sp, sp, #16
 1841              	.LCFI150:
 1842              		.cfi_def_cfa_offset 32
 1843 0004 00AF     		add	r7, sp, #0
 1844              	.LCFI151:
 1845              		.cfi_def_cfa_register 7
 1846 0006 7860     		str	r0, [r7, #4]
 1847 0008 3960     		str	r1, [r7]
  74:Cpp/scheduler.hpp ****     {
  75:Cpp/scheduler.hpp ****       std::pop_heap(queue_.begin(), queue_.end(), std::greater<Task>());
 1848              		.loc 6 75 20
 1849 000a 3B68     		ldr	r3, [r7]
 1850 000c 1846     		mov	r0, r3
 1851 000e FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv
 1852 0012 0446     		mov	r4, r0
 1853 0014 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccU23Djm.s 			page 72


 1854 0016 1846     		mov	r0, r3
 1855 0018 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv
 1856 001c 0346     		mov	r3, r0
 1857 001e 2A46     		mov	r2, r5
 1858 0020 1946     		mov	r1, r3
 1859 0022 2046     		mov	r0, r4
 1860 0024 FFF7FEFF 		bl	_ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_
  76:Cpp/scheduler.hpp ****       Task res = std::move(queue_.back());
 1861              		.loc 6 76 40
 1862 0028 3B68     		ldr	r3, [r7]
 1863 002a 1846     		mov	r0, r3
 1864 002c FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv
 1865 0030 0346     		mov	r3, r0
 1866              		.loc 6 76 41
 1867 0032 1846     		mov	r0, r3
 1868 0034 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 1869 0038 0346     		mov	r3, r0
 1870 003a 1946     		mov	r1, r3
 1871 003c 7868     		ldr	r0, [r7, #4]
 1872 003e FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
  77:Cpp/scheduler.hpp ****       queue_.pop_back();
 1873              		.loc 6 77 23
 1874 0042 3A68     		ldr	r2, [r7]
 1875 0044 07F10803 		add	r3, r7, #8
 1876 0048 1146     		mov	r1, r2
 1877 004a 1846     		mov	r0, r3
 1878 004c FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv
  78:Cpp/scheduler.hpp ****       return res;
 1879              		.loc 6 78 14
 1880 0050 00BF     		nop
  79:Cpp/scheduler.hpp ****     }
 1881              		.loc 6 79 5
 1882 0052 7868     		ldr	r0, [r7, #4]
 1883 0054 1037     		adds	r7, r7, #16
 1884              	.LCFI152:
 1885              		.cfi_def_cfa_offset 16
 1886 0056 BD46     		mov	sp, r7
 1887              	.LCFI153:
 1888              		.cfi_def_cfa_register 13
 1889              		@ sp needed
 1890 0058 B0BD     		pop	{r4, r5, r7, pc}
 1891              		.cfi_endproc
 1892              	.LFE3886:
 1894              		.section	.text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv,"axG",%progbits
 1895              		.align	1
 1896              		.weak	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv
 1897              		.syntax unified
 1898              		.thumb
 1899              		.thumb_func
 1900              		.fpu fpv4-sp-d16
 1902              	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv:
 1903              	.LFB3915:
  57:Cpp/local_vector.hpp ****     {
 1904              		.loc 5 57 20
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 8
 1907              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 73


 1908 0000 90B5     		push	{r4, r7, lr}
 1909              	.LCFI154:
 1910              		.cfi_def_cfa_offset 12
 1911              		.cfi_offset 4, -12
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 83B0     		sub	sp, sp, #12
 1915              	.LCFI155:
 1916              		.cfi_def_cfa_offset 24
 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI156:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
  59:Cpp/local_vector.hpp ****     }
 1921              		.loc 5 59 21
 1922 0008 7868     		ldr	r0, [r7, #4]
 1923 000a FFF7FEFF 		bl	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv
 1924 000e 0446     		mov	r4, r0
  59:Cpp/local_vector.hpp ****     }
 1925              		.loc 5 59 32
 1926 0010 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv
 1927 0014 0346     		mov	r3, r0
  59:Cpp/local_vector.hpp ****     }
 1928              		.loc 5 59 33
 1929 0016 9C42     		cmp	r4, r3
 1930 0018 0CBF     		ite	eq
 1931 001a 0123     		moveq	r3, #1
 1932 001c 0023     		movne	r3, #0
 1933 001e DBB2     		uxtb	r3, r3
  60:Cpp/local_vector.hpp **** 
 1934              		.loc 5 60 5
 1935 0020 1846     		mov	r0, r3
 1936 0022 0C37     		adds	r7, r7, #12
 1937              	.LCFI157:
 1938              		.cfi_def_cfa_offset 12
 1939 0024 BD46     		mov	sp, r7
 1940              	.LCFI158:
 1941              		.cfi_def_cfa_register 13
 1942              		@ sp needed
 1943 0026 90BD     		pop	{r4, r7, pc}
 1944              		.cfi_endproc
 1945              	.LFE3915:
 1947              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN
 1948              		.align	1
 1949              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN2tl8expec
 1950              		.syntax unified
 1951              		.thumb
 1952              		.thumb_func
 1953              		.fpu fpv4-sp-d16
 1955              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN2tl8expectedIPS4
 1956              	.LFB3914:
 173:Cpp/local_vector.hpp ****     {
 1957              		.loc 5 173 48
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 32
 1960              		@ frame_needed = 1, uses_anonymous_args = 0
 1961 0000 90B5     		push	{r4, r7, lr}
ARM GAS  /tmp/ccU23Djm.s 			page 74


 1962              	.LCFI159:
 1963              		.cfi_def_cfa_offset 12
 1964              		.cfi_offset 4, -12
 1965              		.cfi_offset 7, -8
 1966              		.cfi_offset 14, -4
 1967 0002 89B0     		sub	sp, sp, #36
 1968              	.LCFI160:
 1969              		.cfi_def_cfa_offset 48
 1970 0004 00AF     		add	r7, sp, #0
 1971              	.LCFI161:
 1972              		.cfi_def_cfa_register 7
 1973 0006 F860     		str	r0, [r7, #12]
 1974 0008 B960     		str	r1, [r7, #8]
 1975 000a 7A60     		str	r2, [r7, #4]
 175:Cpp/local_vector.hpp ****       new (data() + _size) T(std::forward<Args>(args)...);
 1976              		.loc 5 175 7
 1977 000c B868     		ldr	r0, [r7, #8]
 1978 000e FFF7FEFF 		bl	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv
 1979 0012 0346     		mov	r3, r0
 1980 0014 002B     		cmp	r3, #0
 1981 0016 10D0     		beq	.L80
 175:Cpp/local_vector.hpp ****       new (data() + _size) T(std::forward<Args>(args)...);
 1982              		.loc 5 175 52 discriminator 1
 1983 0018 0023     		movs	r3, #0
 1984 001a BB61     		str	r3, [r7, #24]
 1985 001c 07F11802 		add	r2, r7, #24
 1986 0020 07F11403 		add	r3, r7, #20
 1987 0024 1146     		mov	r1, r2
 1988 0026 1846     		mov	r0, r3
 1989 0028 FFF7FEFF 		bl	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1EOS8_
 1990 002c 07F11403 		add	r3, r7, #20
 1991 0030 1946     		mov	r1, r3
 1992 0032 F868     		ldr	r0, [r7, #12]
 1993 0034 FFF7FEFF 		bl	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IS9_LPv
 1994 0038 2DE0     		b	.L79
 1995              	.L80:
 176:Cpp/local_vector.hpp ****       _size++;
 1996              		.loc 5 176 48
 1997 003a 7868     		ldr	r0, [r7, #4]
 1998 003c FFF7FEFF 		bl	_ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE
 1999 0040 0446     		mov	r4, r0
 176:Cpp/local_vector.hpp ****       _size++;
 2000              		.loc 5 176 19
 2001 0042 B868     		ldr	r0, [r7, #8]
 2002 0044 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
 2003 0048 0146     		mov	r1, r0
 176:Cpp/local_vector.hpp ****       _size++;
 2004              		.loc 5 176 21
 2005 004a BB68     		ldr	r3, [r7, #8]
 2006 004c 03F5A033 		add	r3, r3, #81920
 2007 0050 1A68     		ldr	r2, [r3]
 176:Cpp/local_vector.hpp ****       _size++;
 2008              		.loc 5 176 19
 2009 0052 1346     		mov	r3, r2
 2010 0054 9B00     		lsls	r3, r3, #2
 2011 0056 1344     		add	r3, r3, r2
 2012 0058 1B01     		lsls	r3, r3, #4
ARM GAS  /tmp/ccU23Djm.s 			page 75


 176:Cpp/local_vector.hpp ****       _size++;
 2013              		.loc 5 176 7
 2014 005a 0B44     		add	r3, r3, r1
 2015 005c 1946     		mov	r1, r3
 2016 005e 5020     		movs	r0, #80
 2017 0060 FFF7FEFF 		bl	_ZnwjPv
 2018 0064 0346     		mov	r3, r0
 2019 0066 2146     		mov	r1, r4
 2020 0068 1846     		mov	r0, r3
 2021 006a FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 177:Cpp/local_vector.hpp ****       return &back();
 2022              		.loc 5 177 7
 2023 006e BB68     		ldr	r3, [r7, #8]
 2024 0070 03F5A033 		add	r3, r3, #81920
 2025 0074 1B68     		ldr	r3, [r3]
 2026 0076 5A1C     		adds	r2, r3, #1
 2027 0078 BB68     		ldr	r3, [r7, #8]
 2028 007a 03F5A033 		add	r3, r3, #81920
 2029 007e 1A60     		str	r2, [r3]
 178:Cpp/local_vector.hpp ****     }
 2030              		.loc 5 178 14
 2031 0080 B868     		ldr	r0, [r7, #8]
 2032 0082 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv
 2033 0086 0346     		mov	r3, r0
 178:Cpp/local_vector.hpp ****     }
 2034              		.loc 5 178 20
 2035 0088 FB61     		str	r3, [r7, #28]
 2036 008a 07F11C03 		add	r3, r7, #28
 2037 008e 1946     		mov	r1, r3
 2038 0090 F868     		ldr	r0, [r7, #12]
 2039 0092 FFF7FEFF 		bl	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IS5_LPv
 2040              	.L79:
 179:Cpp/local_vector.hpp **** 
 2041              		.loc 5 179 5
 2042 0096 F868     		ldr	r0, [r7, #12]
 2043 0098 2437     		adds	r7, r7, #36
 2044              	.LCFI162:
 2045              		.cfi_def_cfa_offset 12
 2046 009a BD46     		mov	sp, r7
 2047              	.LCFI163:
 2048              		.cfi_def_cfa_register 13
 2049              		@ sp needed
 2050 009c 90BD     		pop	{r4, r7, pc}
 2051              		.cfi_endproc
 2052              	.LFE3914:
 2054              		.section	.text._ZN4otto3mcu9Scheduler4pushEONS1_4TaskE,"axG",%progbits,_ZN4otto3mcu9Scheduler4push
 2055              		.align	1
 2056              		.weak	_ZN4otto3mcu9Scheduler4pushEONS1_4TaskE
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu fpv4-sp-d16
 2062              	_ZN4otto3mcu9Scheduler4pushEONS1_4TaskE:
 2063              	.LFB3913:
  80:Cpp/scheduler.hpp **** 
  81:Cpp/scheduler.hpp ****     void push(Task&& t)
 2064              		.loc 6 81 10
ARM GAS  /tmp/ccU23Djm.s 			page 76


 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 16
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068 0000 B0B5     		push	{r4, r5, r7, lr}
 2069              	.LCFI164:
 2070              		.cfi_def_cfa_offset 16
 2071              		.cfi_offset 4, -16
 2072              		.cfi_offset 5, -12
 2073              		.cfi_offset 7, -8
 2074              		.cfi_offset 14, -4
 2075 0002 84B0     		sub	sp, sp, #16
 2076              	.LCFI165:
 2077              		.cfi_def_cfa_offset 32
 2078 0004 00AF     		add	r7, sp, #0
 2079              	.LCFI166:
 2080              		.cfi_def_cfa_register 7
 2081 0006 7860     		str	r0, [r7, #4]
 2082 0008 3960     		str	r1, [r7]
  82:Cpp/scheduler.hpp ****     {
  83:Cpp/scheduler.hpp ****       queue_.emplace_back(std::move(t));
 2083              		.loc 6 83 39
 2084 000a 7C68     		ldr	r4, [r7, #4]
 2085              		.loc 6 83 38
 2086 000c 3868     		ldr	r0, [r7]
 2087 000e FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 2088 0012 0246     		mov	r2, r0
 2089              		.loc 6 83 39
 2090 0014 07F10803 		add	r3, r7, #8
 2091 0018 2146     		mov	r1, r4
 2092 001a 1846     		mov	r0, r3
 2093 001c FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN2tl8expected
  84:Cpp/scheduler.hpp ****       std::push_heap(queue_.begin(), queue_.end(), std::greater<Task>());
 2094              		.loc 6 84 21
 2095 0020 7B68     		ldr	r3, [r7, #4]
 2096 0022 1846     		mov	r0, r3
 2097 0024 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv
 2098 0028 0446     		mov	r4, r0
 2099 002a 7B68     		ldr	r3, [r7, #4]
 2100 002c 1846     		mov	r0, r3
 2101 002e FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv
 2102 0032 0346     		mov	r3, r0
 2103 0034 2A46     		mov	r2, r5
 2104 0036 1946     		mov	r1, r3
 2105 0038 2046     		mov	r0, r4
 2106 003a FFF7FEFF 		bl	_ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_
  85:Cpp/scheduler.hpp ****     }
 2107              		.loc 6 85 5
 2108 003e 00BF     		nop
 2109 0040 1037     		adds	r7, r7, #16
 2110              	.LCFI167:
 2111              		.cfi_def_cfa_offset 16
 2112 0042 BD46     		mov	sp, r7
 2113              	.LCFI168:
 2114              		.cfi_def_cfa_register 13
 2115              		@ sp needed
 2116 0044 B0BD     		pop	{r4, r5, r7, pc}
 2117              		.cfi_endproc
ARM GAS  /tmp/ccU23Djm.s 			page 77


 2118              	.LFE3913:
 2120              		.section	.rodata._ZN6__pstl9execution2v1L3seqE,"a"
 2121              		.align	2
 2124              	_ZN6__pstl9execution2v1L3seqE:
 2125 0000 00       		.space	1
 2126              		.section	.rodata._ZN6__pstl9execution2v1L3parE,"a"
 2127              		.align	2
 2130              	_ZN6__pstl9execution2v1L3parE:
 2131 0000 00       		.space	1
 2132              		.section	.rodata._ZN6__pstl9execution2v1L9par_unseqE,"a"
 2133              		.align	2
 2136              	_ZN6__pstl9execution2v1L9par_unseqE:
 2137 0000 00       		.space	1
 2138              		.section	.rodata._ZN6__pstl9execution2v1L5unseqE,"a"
 2139              		.align	2
 2142              	_ZN6__pstl9execution2v1L5unseqE:
 2143 0000 00       		.space	1
 2144              		.section	.rodata._ZN4otto4util9algorithmL8identityE,"a"
 2145              		.align	2
 2148              	_ZN4otto4util9algorithmL8identityE:
 2149 0000 00       		.space	1
 2150              		.section	.rodata._ZN4otto3mcu7ws2812bL12ws2812b_bitsE,"a"
 2151              		.align	2
 2154              	_ZN4otto3mcu7ws2812bL12ws2812b_bitsE:
 2155 0000 0407     		.ascii	"\004\007"
 2156              		.section	.text._ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j,"axG",%progbits,_ZN
 2157              		.align	1
 2158              		.weak	_ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j
 2159              		.syntax unified
 2160              		.thumb
 2161              		.thumb_func
 2162              		.fpu fpv4-sp-d16
 2164              	_ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j:
 2165              	.LFB4061:
 2166              		.file 8 "/usr/arm-none-eabi/include/c++/9.3.0/array"
   1:/usr/arm-none-eabi/include/c++/9.3.0/array **** // <array> -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/array **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/array **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/array **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/array **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/array **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/array **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/array **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/array **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/array **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/array **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/array **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/array **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccU23Djm.s 			page 78


  23:/usr/arm-none-eabi/include/c++/9.3.0/array **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/array **** /** @file include/array
  26:/usr/arm-none-eabi/include/c++/9.3.0/array ****  *  This is a Standard C++ Library header.
  27:/usr/arm-none-eabi/include/c++/9.3.0/array ****  */
  28:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  29:/usr/arm-none-eabi/include/c++/9.3.0/array **** #ifndef _GLIBCXX_ARRAY
  30:/usr/arm-none-eabi/include/c++/9.3.0/array **** #define _GLIBCXX_ARRAY 1
  31:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  32:/usr/arm-none-eabi/include/c++/9.3.0/array **** #pragma GCC system_header
  33:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  34:/usr/arm-none-eabi/include/c++/9.3.0/array **** #if __cplusplus < 201103L
  35:/usr/arm-none-eabi/include/c++/9.3.0/array **** # include <bits/c++0x_warning.h>
  36:/usr/arm-none-eabi/include/c++/9.3.0/array **** #else
  37:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  38:/usr/arm-none-eabi/include/c++/9.3.0/array **** #include <utility>
  39:/usr/arm-none-eabi/include/c++/9.3.0/array **** #include <stdexcept>
  40:/usr/arm-none-eabi/include/c++/9.3.0/array **** #include <bits/stl_algobase.h>
  41:/usr/arm-none-eabi/include/c++/9.3.0/array **** #include <bits/range_access.h>
  42:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  43:/usr/arm-none-eabi/include/c++/9.3.0/array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/arm-none-eabi/include/c++/9.3.0/array **** {
  45:/usr/arm-none-eabi/include/c++/9.3.0/array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  47:/usr/arm-none-eabi/include/c++/9.3.0/array ****   template<typename _Tp, std::size_t _Nm>
  48:/usr/arm-none-eabi/include/c++/9.3.0/array ****     struct __array_traits
  49:/usr/arm-none-eabi/include/c++/9.3.0/array ****     {
  50:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef _Tp _Type[_Nm];
  51:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  54:/usr/arm-none-eabi/include/c++/9.3.0/array ****       static constexpr _Tp&
  55:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
 2167              		.loc 8 55 7
 2168              		.cfi_startproc
 2169              		@ args = 0, pretend = 0, frame = 8
 2170              		@ frame_needed = 1, uses_anonymous_args = 0
 2171              		@ link register save eliminated.
 2172 0000 80B4     		push	{r7}
 2173              	.LCFI169:
 2174              		.cfi_def_cfa_offset 4
 2175              		.cfi_offset 7, -4
 2176 0002 83B0     		sub	sp, sp, #12
 2177              	.LCFI170:
 2178              		.cfi_def_cfa_offset 16
 2179 0004 00AF     		add	r7, sp, #0
 2180              	.LCFI171:
 2181              		.cfi_def_cfa_register 7
 2182 0006 7860     		str	r0, [r7, #4]
 2183 0008 3960     		str	r1, [r7]
  56:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp&>(__t[__n]); }
 2184              		.loc 8 56 41
 2185 000a 3B68     		ldr	r3, [r7]
 2186 000c 9B00     		lsls	r3, r3, #2
 2187 000e 7A68     		ldr	r2, [r7, #4]
 2188 0010 1344     		add	r3, r3, r2
 2189              		.loc 8 56 44
ARM GAS  /tmp/ccU23Djm.s 			page 79


 2190 0012 1846     		mov	r0, r3
 2191 0014 0C37     		adds	r7, r7, #12
 2192              	.LCFI172:
 2193              		.cfi_def_cfa_offset 4
 2194 0016 BD46     		mov	sp, r7
 2195              	.LCFI173:
 2196              		.cfi_def_cfa_register 13
 2197              		@ sp needed
 2198 0018 5DF8047B 		ldr	r7, [sp], #4
 2199              	.LCFI174:
 2200              		.cfi_restore 7
 2201              		.cfi_def_cfa_offset 0
 2202 001c 7047     		bx	lr
 2203              		.cfi_endproc
 2204              	.LFE4061:
 2206              		.section	.text._ZNSt5arrayIhLj4EEixEj,"axG",%progbits,_ZNSt5arrayIhLj4EEixEj,comdat
 2207              		.align	1
 2208              		.weak	_ZNSt5arrayIhLj4EEixEj
 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2212              		.fpu fpv4-sp-d16
 2214              	_ZNSt5arrayIhLj4EEixEj:
 2215              	.LFB4062:
  57:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  58:/usr/arm-none-eabi/include/c++/9.3.0/array ****       static constexpr _Tp*
  59:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _S_ptr(const _Type& __t) noexcept
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp*>(__t); }
  61:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
  62:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  63:/usr/arm-none-eabi/include/c++/9.3.0/array ****  template<typename _Tp>
  64:/usr/arm-none-eabi/include/c++/9.3.0/array ****    struct __array_traits<_Tp, 0>
  65:/usr/arm-none-eabi/include/c++/9.3.0/array ****    {
  66:/usr/arm-none-eabi/include/c++/9.3.0/array ****      struct _Type { };
  67:/usr/arm-none-eabi/include/c++/9.3.0/array ****      typedef true_type _Is_swappable;
  68:/usr/arm-none-eabi/include/c++/9.3.0/array ****      typedef true_type _Is_nothrow_swappable;
  69:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  70:/usr/arm-none-eabi/include/c++/9.3.0/array ****      static constexpr _Tp&
  71:/usr/arm-none-eabi/include/c++/9.3.0/array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:/usr/arm-none-eabi/include/c++/9.3.0/array ****      { return *static_cast<_Tp*>(nullptr); }
  73:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  74:/usr/arm-none-eabi/include/c++/9.3.0/array ****      static constexpr _Tp*
  75:/usr/arm-none-eabi/include/c++/9.3.0/array ****      _S_ptr(const _Type&) noexcept
  76:/usr/arm-none-eabi/include/c++/9.3.0/array ****      { return nullptr; }
  77:/usr/arm-none-eabi/include/c++/9.3.0/array ****    };
  78:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
  79:/usr/arm-none-eabi/include/c++/9.3.0/array ****   /**
  80:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *
  82:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  @ingroup sequences
  83:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *
  84:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  <a href="tables.html#67">sequence</a>.
  87:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *
  88:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  Sets support random access iterators.
  89:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *
ARM GAS  /tmp/ccU23Djm.s 			page 80


  90:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:/usr/arm-none-eabi/include/c++/9.3.0/array ****    *  @tparam  N  Number of elements.
  92:/usr/arm-none-eabi/include/c++/9.3.0/array ****   */
  93:/usr/arm-none-eabi/include/c++/9.3.0/array ****   template<typename _Tp, std::size_t _Nm>
  94:/usr/arm-none-eabi/include/c++/9.3.0/array ****     struct array
  95:/usr/arm-none-eabi/include/c++/9.3.0/array ****     {
  96:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef _Tp 	    			      value_type;
  97:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef value_type*			      pointer;
  98:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef const value_type*                       const_pointer;
  99:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef value_type&                   	      reference;
 100:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef const value_type&             	      const_reference;
 101:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef value_type*          		      iterator;
 102:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef const value_type*			      const_iterator;
 103:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef std::size_t                    	      size_type;
 104:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 108:/usr/arm-none-eabi/include/c++/9.3.0/array ****       // Support for zero-sized arrays mandatory.
 109:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:/usr/arm-none-eabi/include/c++/9.3.0/array ****       typename _AT_Type::_Type                         _M_elems;
 111:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 112:/usr/arm-none-eabi/include/c++/9.3.0/array ****       // No explicit construct/copy/destroy for aggregate type.
 113:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 114:/usr/arm-none-eabi/include/c++/9.3.0/array ****       // DR 776.
 115:/usr/arm-none-eabi/include/c++/9.3.0/array ****       void
 116:/usr/arm-none-eabi/include/c++/9.3.0/array ****       fill(const value_type& __u)
 117:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { std::fill_n(begin(), size(), __u); }
 118:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 119:/usr/arm-none-eabi/include/c++/9.3.0/array ****       void
 120:/usr/arm-none-eabi/include/c++/9.3.0/array ****       swap(array& __other)
 121:/usr/arm-none-eabi/include/c++/9.3.0/array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 124:/usr/arm-none-eabi/include/c++/9.3.0/array ****       // Iterators.
 125:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR iterator
 126:/usr/arm-none-eabi/include/c++/9.3.0/array ****       begin() noexcept
 127:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return iterator(data()); }
 128:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 129:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:/usr/arm-none-eabi/include/c++/9.3.0/array ****       begin() const noexcept
 131:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data()); }
 132:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 133:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR iterator
 134:/usr/arm-none-eabi/include/c++/9.3.0/array ****       end() noexcept
 135:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return iterator(data() + _Nm); }
 136:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 137:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:/usr/arm-none-eabi/include/c++/9.3.0/array ****       end() const noexcept
 139:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data() + _Nm); }
 140:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 141:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:/usr/arm-none-eabi/include/c++/9.3.0/array ****       rbegin() noexcept
 143:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return reverse_iterator(end()); }
 144:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 145:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:/usr/arm-none-eabi/include/c++/9.3.0/array ****       rbegin() const noexcept
ARM GAS  /tmp/ccU23Djm.s 			page 81


 147:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_reverse_iterator(end()); }
 148:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 149:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:/usr/arm-none-eabi/include/c++/9.3.0/array ****       rend() noexcept
 151:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return reverse_iterator(begin()); }
 152:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 153:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:/usr/arm-none-eabi/include/c++/9.3.0/array ****       rend() const noexcept
 155:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_reverse_iterator(begin()); }
 156:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 157:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:/usr/arm-none-eabi/include/c++/9.3.0/array ****       cbegin() const noexcept
 159:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data()); }
 160:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 161:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:/usr/arm-none-eabi/include/c++/9.3.0/array ****       cend() const noexcept
 163:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data() + _Nm); }
 164:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 165:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:/usr/arm-none-eabi/include/c++/9.3.0/array ****       crbegin() const noexcept
 167:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_reverse_iterator(end()); }
 168:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 169:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:/usr/arm-none-eabi/include/c++/9.3.0/array ****       crend() const noexcept
 171:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_reverse_iterator(begin()); }
 172:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 173:/usr/arm-none-eabi/include/c++/9.3.0/array ****       // Capacity.
 174:/usr/arm-none-eabi/include/c++/9.3.0/array ****       constexpr size_type
 175:/usr/arm-none-eabi/include/c++/9.3.0/array ****       size() const noexcept { return _Nm; }
 176:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 177:/usr/arm-none-eabi/include/c++/9.3.0/array ****       constexpr size_type
 178:/usr/arm-none-eabi/include/c++/9.3.0/array ****       max_size() const noexcept { return _Nm; }
 179:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 180:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX_NODISCARD constexpr bool
 181:/usr/arm-none-eabi/include/c++/9.3.0/array ****       empty() const noexcept { return size() == 0; }
 182:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 183:/usr/arm-none-eabi/include/c++/9.3.0/array ****       // Element access.
 184:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR reference
 185:/usr/arm-none-eabi/include/c++/9.3.0/array ****       operator[](size_type __n) noexcept
 2216              		.loc 8 185 7
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 8
 2219              		@ frame_needed = 1, uses_anonymous_args = 0
 2220 0000 80B5     		push	{r7, lr}
 2221              	.LCFI175:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 7, -8
 2224              		.cfi_offset 14, -4
 2225 0002 82B0     		sub	sp, sp, #8
 2226              	.LCFI176:
 2227              		.cfi_def_cfa_offset 16
 2228 0004 00AF     		add	r7, sp, #0
 2229              	.LCFI177:
 2230              		.cfi_def_cfa_register 7
 2231 0006 7860     		str	r0, [r7, #4]
 2232 0008 3960     		str	r1, [r7]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
ARM GAS  /tmp/ccU23Djm.s 			page 82


 2233              		.loc 8 186 33
 2234 000a 7B68     		ldr	r3, [r7, #4]
 2235              		.loc 8 186 32
 2236 000c 3968     		ldr	r1, [r7]
 2237 000e 1846     		mov	r0, r3
 2238 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
 2239 0014 0346     		mov	r3, r0
 2240              		.loc 8 186 49
 2241 0016 1846     		mov	r0, r3
 2242 0018 0837     		adds	r7, r7, #8
 2243              	.LCFI178:
 2244              		.cfi_def_cfa_offset 8
 2245 001a BD46     		mov	sp, r7
 2246              	.LCFI179:
 2247              		.cfi_def_cfa_register 13
 2248              		@ sp needed
 2249 001c 80BD     		pop	{r7, pc}
 2250              		.cfi_endproc
 2251              	.LFE4062:
 2253              		.section	.text._ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj,"axG",%progbits,_ZNSt14__array_traitsIh
 2254              		.align	1
 2255              		.weak	_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2259              		.fpu fpv4-sp-d16
 2261              	_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj:
 2262              	.LFB4063:
  55:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp&>(__t[__n]); }
 2263              		.loc 8 55 7
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 8
 2266              		@ frame_needed = 1, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
 2268 0000 80B4     		push	{r7}
 2269              	.LCFI180:
 2270              		.cfi_def_cfa_offset 4
 2271              		.cfi_offset 7, -4
 2272 0002 83B0     		sub	sp, sp, #12
 2273              	.LCFI181:
 2274              		.cfi_def_cfa_offset 16
 2275 0004 00AF     		add	r7, sp, #0
 2276              	.LCFI182:
 2277              		.cfi_def_cfa_register 7
 2278 0006 7860     		str	r0, [r7, #4]
 2279 0008 3960     		str	r1, [r7]
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 2280              		.loc 8 56 41
 2281 000a 7A68     		ldr	r2, [r7, #4]
 2282 000c 3B68     		ldr	r3, [r7]
 2283 000e 1344     		add	r3, r3, r2
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 2284              		.loc 8 56 44
 2285 0010 1846     		mov	r0, r3
 2286 0012 0C37     		adds	r7, r7, #12
 2287              	.LCFI183:
 2288              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccU23Djm.s 			page 83


 2289 0014 BD46     		mov	sp, r7
 2290              	.LCFI184:
 2291              		.cfi_def_cfa_register 13
 2292              		@ sp needed
 2293 0016 5DF8047B 		ldr	r7, [sp], #4
 2294              	.LCFI185:
 2295              		.cfi_restore 7
 2296              		.cfi_def_cfa_offset 0
 2297 001a 7047     		bx	lr
 2298              		.cfi_endproc
 2299              	.LFE4063:
 2301              		.section	.rodata._ZN4otto3mcu7ws2812bL15ws2812b_mappingE,"a"
 2302              		.align	2
 2305              	_ZN4otto3mcu7ws2812bL15ws2812b_mappingE:
 2306 0000 44       		.byte	68
 2307 0001 44       		.byte	68
 2308 0002 44       		.byte	68
 2309 0003 44       		.byte	68
 2310 0004 44       		.byte	68
 2311 0005 44       		.byte	68
 2312 0006 44       		.byte	68
 2313 0007 47       		.byte	71
 2314 0008 44       		.byte	68
 2315 0009 44       		.byte	68
 2316 000a 44       		.byte	68
 2317 000b 74       		.byte	116
 2318 000c 44       		.byte	68
 2319 000d 44       		.byte	68
 2320 000e 44       		.byte	68
 2321 000f 77       		.byte	119
 2322 0010 44       		.byte	68
 2323 0011 44       		.byte	68
 2324 0012 47       		.byte	71
 2325 0013 44       		.byte	68
 2326 0014 44       		.byte	68
 2327 0015 44       		.byte	68
 2328 0016 47       		.byte	71
 2329 0017 47       		.byte	71
 2330 0018 44       		.byte	68
 2331 0019 44       		.byte	68
 2332 001a 47       		.byte	71
 2333 001b 74       		.byte	116
 2334 001c 44       		.byte	68
 2335 001d 44       		.byte	68
 2336 001e 47       		.byte	71
 2337 001f 77       		.byte	119
 2338 0020 44       		.byte	68
 2339 0021 44       		.byte	68
 2340 0022 74       		.byte	116
 2341 0023 44       		.byte	68
 2342 0024 44       		.byte	68
 2343 0025 44       		.byte	68
 2344 0026 74       		.byte	116
 2345 0027 47       		.byte	71
 2346 0028 44       		.byte	68
 2347 0029 44       		.byte	68
 2348 002a 74       		.byte	116
ARM GAS  /tmp/ccU23Djm.s 			page 84


 2349 002b 74       		.byte	116
 2350 002c 44       		.byte	68
 2351 002d 44       		.byte	68
 2352 002e 74       		.byte	116
 2353 002f 77       		.byte	119
 2354 0030 44       		.byte	68
 2355 0031 44       		.byte	68
 2356 0032 77       		.byte	119
 2357 0033 44       		.byte	68
 2358 0034 44       		.byte	68
 2359 0035 44       		.byte	68
 2360 0036 77       		.byte	119
 2361 0037 47       		.byte	71
 2362 0038 44       		.byte	68
 2363 0039 44       		.byte	68
 2364 003a 77       		.byte	119
 2365 003b 74       		.byte	116
 2366 003c 44       		.byte	68
 2367 003d 44       		.byte	68
 2368 003e 77       		.byte	119
 2369 003f 77       		.byte	119
 2370 0040 44       		.byte	68
 2371 0041 47       		.byte	71
 2372 0042 44       		.byte	68
 2373 0043 44       		.byte	68
 2374 0044 44       		.byte	68
 2375 0045 47       		.byte	71
 2376 0046 44       		.byte	68
 2377 0047 47       		.byte	71
 2378 0048 44       		.byte	68
 2379 0049 47       		.byte	71
 2380 004a 44       		.byte	68
 2381 004b 74       		.byte	116
 2382 004c 44       		.byte	68
 2383 004d 47       		.byte	71
 2384 004e 44       		.byte	68
 2385 004f 77       		.byte	119
 2386 0050 44       		.byte	68
 2387 0051 47       		.byte	71
 2388 0052 47       		.byte	71
 2389 0053 44       		.byte	68
 2390 0054 44       		.byte	68
 2391 0055 47       		.byte	71
 2392 0056 47       		.byte	71
 2393 0057 47       		.byte	71
 2394 0058 44       		.byte	68
 2395 0059 47       		.byte	71
 2396 005a 47       		.byte	71
 2397 005b 74       		.byte	116
 2398 005c 44       		.byte	68
 2399 005d 47       		.byte	71
 2400 005e 47       		.byte	71
 2401 005f 77       		.byte	119
 2402 0060 44       		.byte	68
 2403 0061 47       		.byte	71
 2404 0062 74       		.byte	116
 2405 0063 44       		.byte	68
ARM GAS  /tmp/ccU23Djm.s 			page 85


 2406 0064 44       		.byte	68
 2407 0065 47       		.byte	71
 2408 0066 74       		.byte	116
 2409 0067 47       		.byte	71
 2410 0068 44       		.byte	68
 2411 0069 47       		.byte	71
 2412 006a 74       		.byte	116
 2413 006b 74       		.byte	116
 2414 006c 44       		.byte	68
 2415 006d 47       		.byte	71
 2416 006e 74       		.byte	116
 2417 006f 77       		.byte	119
 2418 0070 44       		.byte	68
 2419 0071 47       		.byte	71
 2420 0072 77       		.byte	119
 2421 0073 44       		.byte	68
 2422 0074 44       		.byte	68
 2423 0075 47       		.byte	71
 2424 0076 77       		.byte	119
 2425 0077 47       		.byte	71
 2426 0078 44       		.byte	68
 2427 0079 47       		.byte	71
 2428 007a 77       		.byte	119
 2429 007b 74       		.byte	116
 2430 007c 44       		.byte	68
 2431 007d 47       		.byte	71
 2432 007e 77       		.byte	119
 2433 007f 77       		.byte	119
 2434 0080 44       		.byte	68
 2435 0081 74       		.byte	116
 2436 0082 44       		.byte	68
 2437 0083 44       		.byte	68
 2438 0084 44       		.byte	68
 2439 0085 74       		.byte	116
 2440 0086 44       		.byte	68
 2441 0087 47       		.byte	71
 2442 0088 44       		.byte	68
 2443 0089 74       		.byte	116
 2444 008a 44       		.byte	68
 2445 008b 74       		.byte	116
 2446 008c 44       		.byte	68
 2447 008d 74       		.byte	116
 2448 008e 44       		.byte	68
 2449 008f 77       		.byte	119
 2450 0090 44       		.byte	68
 2451 0091 74       		.byte	116
 2452 0092 47       		.byte	71
 2453 0093 44       		.byte	68
 2454 0094 44       		.byte	68
 2455 0095 74       		.byte	116
 2456 0096 47       		.byte	71
 2457 0097 47       		.byte	71
 2458 0098 44       		.byte	68
 2459 0099 74       		.byte	116
 2460 009a 47       		.byte	71
 2461 009b 74       		.byte	116
 2462 009c 44       		.byte	68
ARM GAS  /tmp/ccU23Djm.s 			page 86


 2463 009d 74       		.byte	116
 2464 009e 47       		.byte	71
 2465 009f 77       		.byte	119
 2466 00a0 44       		.byte	68
 2467 00a1 74       		.byte	116
 2468 00a2 74       		.byte	116
 2469 00a3 44       		.byte	68
 2470 00a4 44       		.byte	68
 2471 00a5 74       		.byte	116
 2472 00a6 74       		.byte	116
 2473 00a7 47       		.byte	71
 2474 00a8 44       		.byte	68
 2475 00a9 74       		.byte	116
 2476 00aa 74       		.byte	116
 2477 00ab 74       		.byte	116
 2478 00ac 44       		.byte	68
 2479 00ad 74       		.byte	116
 2480 00ae 74       		.byte	116
 2481 00af 77       		.byte	119
 2482 00b0 44       		.byte	68
 2483 00b1 74       		.byte	116
 2484 00b2 77       		.byte	119
 2485 00b3 44       		.byte	68
 2486 00b4 44       		.byte	68
 2487 00b5 74       		.byte	116
 2488 00b6 77       		.byte	119
 2489 00b7 47       		.byte	71
 2490 00b8 44       		.byte	68
 2491 00b9 74       		.byte	116
 2492 00ba 77       		.byte	119
 2493 00bb 74       		.byte	116
 2494 00bc 44       		.byte	68
 2495 00bd 74       		.byte	116
 2496 00be 77       		.byte	119
 2497 00bf 77       		.byte	119
 2498 00c0 44       		.byte	68
 2499 00c1 77       		.byte	119
 2500 00c2 44       		.byte	68
 2501 00c3 44       		.byte	68
 2502 00c4 44       		.byte	68
 2503 00c5 77       		.byte	119
 2504 00c6 44       		.byte	68
 2505 00c7 47       		.byte	71
 2506 00c8 44       		.byte	68
 2507 00c9 77       		.byte	119
 2508 00ca 44       		.byte	68
 2509 00cb 74       		.byte	116
 2510 00cc 44       		.byte	68
 2511 00cd 77       		.byte	119
 2512 00ce 44       		.byte	68
 2513 00cf 77       		.byte	119
 2514 00d0 44       		.byte	68
 2515 00d1 77       		.byte	119
 2516 00d2 47       		.byte	71
 2517 00d3 44       		.byte	68
 2518 00d4 44       		.byte	68
 2519 00d5 77       		.byte	119
ARM GAS  /tmp/ccU23Djm.s 			page 87


 2520 00d6 47       		.byte	71
 2521 00d7 47       		.byte	71
 2522 00d8 44       		.byte	68
 2523 00d9 77       		.byte	119
 2524 00da 47       		.byte	71
 2525 00db 74       		.byte	116
 2526 00dc 44       		.byte	68
 2527 00dd 77       		.byte	119
 2528 00de 47       		.byte	71
 2529 00df 77       		.byte	119
 2530 00e0 44       		.byte	68
 2531 00e1 77       		.byte	119
 2532 00e2 74       		.byte	116
 2533 00e3 44       		.byte	68
 2534 00e4 44       		.byte	68
 2535 00e5 77       		.byte	119
 2536 00e6 74       		.byte	116
 2537 00e7 47       		.byte	71
 2538 00e8 44       		.byte	68
 2539 00e9 77       		.byte	119
 2540 00ea 74       		.byte	116
 2541 00eb 74       		.byte	116
 2542 00ec 44       		.byte	68
 2543 00ed 77       		.byte	119
 2544 00ee 74       		.byte	116
 2545 00ef 77       		.byte	119
 2546 00f0 44       		.byte	68
 2547 00f1 77       		.byte	119
 2548 00f2 77       		.byte	119
 2549 00f3 44       		.byte	68
 2550 00f4 44       		.byte	68
 2551 00f5 77       		.byte	119
 2552 00f6 77       		.byte	119
 2553 00f7 47       		.byte	71
 2554 00f8 44       		.byte	68
 2555 00f9 77       		.byte	119
 2556 00fa 77       		.byte	119
 2557 00fb 74       		.byte	116
 2558 00fc 44       		.byte	68
 2559 00fd 77       		.byte	119
 2560 00fe 77       		.byte	119
 2561 00ff 77       		.byte	119
 2562 0100 47       		.byte	71
 2563 0101 44       		.byte	68
 2564 0102 44       		.byte	68
 2565 0103 44       		.byte	68
 2566 0104 47       		.byte	71
 2567 0105 44       		.byte	68
 2568 0106 44       		.byte	68
 2569 0107 47       		.byte	71
 2570 0108 47       		.byte	71
 2571 0109 44       		.byte	68
 2572 010a 44       		.byte	68
 2573 010b 74       		.byte	116
 2574 010c 47       		.byte	71
 2575 010d 44       		.byte	68
 2576 010e 44       		.byte	68
ARM GAS  /tmp/ccU23Djm.s 			page 88


 2577 010f 77       		.byte	119
 2578 0110 47       		.byte	71
 2579 0111 44       		.byte	68
 2580 0112 47       		.byte	71
 2581 0113 44       		.byte	68
 2582 0114 47       		.byte	71
 2583 0115 44       		.byte	68
 2584 0116 47       		.byte	71
 2585 0117 47       		.byte	71
 2586 0118 47       		.byte	71
 2587 0119 44       		.byte	68
 2588 011a 47       		.byte	71
 2589 011b 74       		.byte	116
 2590 011c 47       		.byte	71
 2591 011d 44       		.byte	68
 2592 011e 47       		.byte	71
 2593 011f 77       		.byte	119
 2594 0120 47       		.byte	71
 2595 0121 44       		.byte	68
 2596 0122 74       		.byte	116
 2597 0123 44       		.byte	68
 2598 0124 47       		.byte	71
 2599 0125 44       		.byte	68
 2600 0126 74       		.byte	116
 2601 0127 47       		.byte	71
 2602 0128 47       		.byte	71
 2603 0129 44       		.byte	68
 2604 012a 74       		.byte	116
 2605 012b 74       		.byte	116
 2606 012c 47       		.byte	71
 2607 012d 44       		.byte	68
 2608 012e 74       		.byte	116
 2609 012f 77       		.byte	119
 2610 0130 47       		.byte	71
 2611 0131 44       		.byte	68
 2612 0132 77       		.byte	119
 2613 0133 44       		.byte	68
 2614 0134 47       		.byte	71
 2615 0135 44       		.byte	68
 2616 0136 77       		.byte	119
 2617 0137 47       		.byte	71
 2618 0138 47       		.byte	71
 2619 0139 44       		.byte	68
 2620 013a 77       		.byte	119
 2621 013b 74       		.byte	116
 2622 013c 47       		.byte	71
 2623 013d 44       		.byte	68
 2624 013e 77       		.byte	119
 2625 013f 77       		.byte	119
 2626 0140 47       		.byte	71
 2627 0141 47       		.byte	71
 2628 0142 44       		.byte	68
 2629 0143 44       		.byte	68
 2630 0144 47       		.byte	71
 2631 0145 47       		.byte	71
 2632 0146 44       		.byte	68
 2633 0147 47       		.byte	71
ARM GAS  /tmp/ccU23Djm.s 			page 89


 2634 0148 47       		.byte	71
 2635 0149 47       		.byte	71
 2636 014a 44       		.byte	68
 2637 014b 74       		.byte	116
 2638 014c 47       		.byte	71
 2639 014d 47       		.byte	71
 2640 014e 44       		.byte	68
 2641 014f 77       		.byte	119
 2642 0150 47       		.byte	71
 2643 0151 47       		.byte	71
 2644 0152 47       		.byte	71
 2645 0153 44       		.byte	68
 2646 0154 47       		.byte	71
 2647 0155 47       		.byte	71
 2648 0156 47       		.byte	71
 2649 0157 47       		.byte	71
 2650 0158 47       		.byte	71
 2651 0159 47       		.byte	71
 2652 015a 47       		.byte	71
 2653 015b 74       		.byte	116
 2654 015c 47       		.byte	71
 2655 015d 47       		.byte	71
 2656 015e 47       		.byte	71
 2657 015f 77       		.byte	119
 2658 0160 47       		.byte	71
 2659 0161 47       		.byte	71
 2660 0162 74       		.byte	116
 2661 0163 44       		.byte	68
 2662 0164 47       		.byte	71
 2663 0165 47       		.byte	71
 2664 0166 74       		.byte	116
 2665 0167 47       		.byte	71
 2666 0168 47       		.byte	71
 2667 0169 47       		.byte	71
 2668 016a 74       		.byte	116
 2669 016b 74       		.byte	116
 2670 016c 47       		.byte	71
 2671 016d 47       		.byte	71
 2672 016e 74       		.byte	116
 2673 016f 77       		.byte	119
 2674 0170 47       		.byte	71
 2675 0171 47       		.byte	71
 2676 0172 77       		.byte	119
 2677 0173 44       		.byte	68
 2678 0174 47       		.byte	71
 2679 0175 47       		.byte	71
 2680 0176 77       		.byte	119
 2681 0177 47       		.byte	71
 2682 0178 47       		.byte	71
 2683 0179 47       		.byte	71
 2684 017a 77       		.byte	119
 2685 017b 74       		.byte	116
 2686 017c 47       		.byte	71
 2687 017d 47       		.byte	71
 2688 017e 77       		.byte	119
 2689 017f 77       		.byte	119
 2690 0180 47       		.byte	71
ARM GAS  /tmp/ccU23Djm.s 			page 90


 2691 0181 74       		.byte	116
 2692 0182 44       		.byte	68
 2693 0183 44       		.byte	68
 2694 0184 47       		.byte	71
 2695 0185 74       		.byte	116
 2696 0186 44       		.byte	68
 2697 0187 47       		.byte	71
 2698 0188 47       		.byte	71
 2699 0189 74       		.byte	116
 2700 018a 44       		.byte	68
 2701 018b 74       		.byte	116
 2702 018c 47       		.byte	71
 2703 018d 74       		.byte	116
 2704 018e 44       		.byte	68
 2705 018f 77       		.byte	119
 2706 0190 47       		.byte	71
 2707 0191 74       		.byte	116
 2708 0192 47       		.byte	71
 2709 0193 44       		.byte	68
 2710 0194 47       		.byte	71
 2711 0195 74       		.byte	116
 2712 0196 47       		.byte	71
 2713 0197 47       		.byte	71
 2714 0198 47       		.byte	71
 2715 0199 74       		.byte	116
 2716 019a 47       		.byte	71
 2717 019b 74       		.byte	116
 2718 019c 47       		.byte	71
 2719 019d 74       		.byte	116
 2720 019e 47       		.byte	71
 2721 019f 77       		.byte	119
 2722 01a0 47       		.byte	71
 2723 01a1 74       		.byte	116
 2724 01a2 74       		.byte	116
 2725 01a3 44       		.byte	68
 2726 01a4 47       		.byte	71
 2727 01a5 74       		.byte	116
 2728 01a6 74       		.byte	116
 2729 01a7 47       		.byte	71
 2730 01a8 47       		.byte	71
 2731 01a9 74       		.byte	116
 2732 01aa 74       		.byte	116
 2733 01ab 74       		.byte	116
 2734 01ac 47       		.byte	71
 2735 01ad 74       		.byte	116
 2736 01ae 74       		.byte	116
 2737 01af 77       		.byte	119
 2738 01b0 47       		.byte	71
 2739 01b1 74       		.byte	116
 2740 01b2 77       		.byte	119
 2741 01b3 44       		.byte	68
 2742 01b4 47       		.byte	71
 2743 01b5 74       		.byte	116
 2744 01b6 77       		.byte	119
 2745 01b7 47       		.byte	71
 2746 01b8 47       		.byte	71
 2747 01b9 74       		.byte	116
ARM GAS  /tmp/ccU23Djm.s 			page 91


 2748 01ba 77       		.byte	119
 2749 01bb 74       		.byte	116
 2750 01bc 47       		.byte	71
 2751 01bd 74       		.byte	116
 2752 01be 77       		.byte	119
 2753 01bf 77       		.byte	119
 2754 01c0 47       		.byte	71
 2755 01c1 77       		.byte	119
 2756 01c2 44       		.byte	68
 2757 01c3 44       		.byte	68
 2758 01c4 47       		.byte	71
 2759 01c5 77       		.byte	119
 2760 01c6 44       		.byte	68
 2761 01c7 47       		.byte	71
 2762 01c8 47       		.byte	71
 2763 01c9 77       		.byte	119
 2764 01ca 44       		.byte	68
 2765 01cb 74       		.byte	116
 2766 01cc 47       		.byte	71
 2767 01cd 77       		.byte	119
 2768 01ce 44       		.byte	68
 2769 01cf 77       		.byte	119
 2770 01d0 47       		.byte	71
 2771 01d1 77       		.byte	119
 2772 01d2 47       		.byte	71
 2773 01d3 44       		.byte	68
 2774 01d4 47       		.byte	71
 2775 01d5 77       		.byte	119
 2776 01d6 47       		.byte	71
 2777 01d7 47       		.byte	71
 2778 01d8 47       		.byte	71
 2779 01d9 77       		.byte	119
 2780 01da 47       		.byte	71
 2781 01db 74       		.byte	116
 2782 01dc 47       		.byte	71
 2783 01dd 77       		.byte	119
 2784 01de 47       		.byte	71
 2785 01df 77       		.byte	119
 2786 01e0 47       		.byte	71
 2787 01e1 77       		.byte	119
 2788 01e2 74       		.byte	116
 2789 01e3 44       		.byte	68
 2790 01e4 47       		.byte	71
 2791 01e5 77       		.byte	119
 2792 01e6 74       		.byte	116
 2793 01e7 47       		.byte	71
 2794 01e8 47       		.byte	71
 2795 01e9 77       		.byte	119
 2796 01ea 74       		.byte	116
 2797 01eb 74       		.byte	116
 2798 01ec 47       		.byte	71
 2799 01ed 77       		.byte	119
 2800 01ee 74       		.byte	116
 2801 01ef 77       		.byte	119
 2802 01f0 47       		.byte	71
 2803 01f1 77       		.byte	119
 2804 01f2 77       		.byte	119
ARM GAS  /tmp/ccU23Djm.s 			page 92


 2805 01f3 44       		.byte	68
 2806 01f4 47       		.byte	71
 2807 01f5 77       		.byte	119
 2808 01f6 77       		.byte	119
 2809 01f7 47       		.byte	71
 2810 01f8 47       		.byte	71
 2811 01f9 77       		.byte	119
 2812 01fa 77       		.byte	119
 2813 01fb 74       		.byte	116
 2814 01fc 47       		.byte	71
 2815 01fd 77       		.byte	119
 2816 01fe 77       		.byte	119
 2817 01ff 77       		.byte	119
 2818 0200 74       		.byte	116
 2819 0201 44       		.byte	68
 2820 0202 44       		.byte	68
 2821 0203 44       		.byte	68
 2822 0204 74       		.byte	116
 2823 0205 44       		.byte	68
 2824 0206 44       		.byte	68
 2825 0207 47       		.byte	71
 2826 0208 74       		.byte	116
 2827 0209 44       		.byte	68
 2828 020a 44       		.byte	68
 2829 020b 74       		.byte	116
 2830 020c 74       		.byte	116
 2831 020d 44       		.byte	68
 2832 020e 44       		.byte	68
 2833 020f 77       		.byte	119
 2834 0210 74       		.byte	116
 2835 0211 44       		.byte	68
 2836 0212 47       		.byte	71
 2837 0213 44       		.byte	68
 2838 0214 74       		.byte	116
 2839 0215 44       		.byte	68
 2840 0216 47       		.byte	71
 2841 0217 47       		.byte	71
 2842 0218 74       		.byte	116
 2843 0219 44       		.byte	68
 2844 021a 47       		.byte	71
 2845 021b 74       		.byte	116
 2846 021c 74       		.byte	116
 2847 021d 44       		.byte	68
 2848 021e 47       		.byte	71
 2849 021f 77       		.byte	119
 2850 0220 74       		.byte	116
 2851 0221 44       		.byte	68
 2852 0222 74       		.byte	116
 2853 0223 44       		.byte	68
 2854 0224 74       		.byte	116
 2855 0225 44       		.byte	68
 2856 0226 74       		.byte	116
 2857 0227 47       		.byte	71
 2858 0228 74       		.byte	116
 2859 0229 44       		.byte	68
 2860 022a 74       		.byte	116
 2861 022b 74       		.byte	116
ARM GAS  /tmp/ccU23Djm.s 			page 93


 2862 022c 74       		.byte	116
 2863 022d 44       		.byte	68
 2864 022e 74       		.byte	116
 2865 022f 77       		.byte	119
 2866 0230 74       		.byte	116
 2867 0231 44       		.byte	68
 2868 0232 77       		.byte	119
 2869 0233 44       		.byte	68
 2870 0234 74       		.byte	116
 2871 0235 44       		.byte	68
 2872 0236 77       		.byte	119
 2873 0237 47       		.byte	71
 2874 0238 74       		.byte	116
 2875 0239 44       		.byte	68
 2876 023a 77       		.byte	119
 2877 023b 74       		.byte	116
 2878 023c 74       		.byte	116
 2879 023d 44       		.byte	68
 2880 023e 77       		.byte	119
 2881 023f 77       		.byte	119
 2882 0240 74       		.byte	116
 2883 0241 47       		.byte	71
 2884 0242 44       		.byte	68
 2885 0243 44       		.byte	68
 2886 0244 74       		.byte	116
 2887 0245 47       		.byte	71
 2888 0246 44       		.byte	68
 2889 0247 47       		.byte	71
 2890 0248 74       		.byte	116
 2891 0249 47       		.byte	71
 2892 024a 44       		.byte	68
 2893 024b 74       		.byte	116
 2894 024c 74       		.byte	116
 2895 024d 47       		.byte	71
 2896 024e 44       		.byte	68
 2897 024f 77       		.byte	119
 2898 0250 74       		.byte	116
 2899 0251 47       		.byte	71
 2900 0252 47       		.byte	71
 2901 0253 44       		.byte	68
 2902 0254 74       		.byte	116
 2903 0255 47       		.byte	71
 2904 0256 47       		.byte	71
 2905 0257 47       		.byte	71
 2906 0258 74       		.byte	116
 2907 0259 47       		.byte	71
 2908 025a 47       		.byte	71
 2909 025b 74       		.byte	116
 2910 025c 74       		.byte	116
 2911 025d 47       		.byte	71
 2912 025e 47       		.byte	71
 2913 025f 77       		.byte	119
 2914 0260 74       		.byte	116
 2915 0261 47       		.byte	71
 2916 0262 74       		.byte	116
 2917 0263 44       		.byte	68
 2918 0264 74       		.byte	116
ARM GAS  /tmp/ccU23Djm.s 			page 94


 2919 0265 47       		.byte	71
 2920 0266 74       		.byte	116
 2921 0267 47       		.byte	71
 2922 0268 74       		.byte	116
 2923 0269 47       		.byte	71
 2924 026a 74       		.byte	116
 2925 026b 74       		.byte	116
 2926 026c 74       		.byte	116
 2927 026d 47       		.byte	71
 2928 026e 74       		.byte	116
 2929 026f 77       		.byte	119
 2930 0270 74       		.byte	116
 2931 0271 47       		.byte	71
 2932 0272 77       		.byte	119
 2933 0273 44       		.byte	68
 2934 0274 74       		.byte	116
 2935 0275 47       		.byte	71
 2936 0276 77       		.byte	119
 2937 0277 47       		.byte	71
 2938 0278 74       		.byte	116
 2939 0279 47       		.byte	71
 2940 027a 77       		.byte	119
 2941 027b 74       		.byte	116
 2942 027c 74       		.byte	116
 2943 027d 47       		.byte	71
 2944 027e 77       		.byte	119
 2945 027f 77       		.byte	119
 2946 0280 74       		.byte	116
 2947 0281 74       		.byte	116
 2948 0282 44       		.byte	68
 2949 0283 44       		.byte	68
 2950 0284 74       		.byte	116
 2951 0285 74       		.byte	116
 2952 0286 44       		.byte	68
 2953 0287 47       		.byte	71
 2954 0288 74       		.byte	116
 2955 0289 74       		.byte	116
 2956 028a 44       		.byte	68
 2957 028b 74       		.byte	116
 2958 028c 74       		.byte	116
 2959 028d 74       		.byte	116
 2960 028e 44       		.byte	68
 2961 028f 77       		.byte	119
 2962 0290 74       		.byte	116
 2963 0291 74       		.byte	116
 2964 0292 47       		.byte	71
 2965 0293 44       		.byte	68
 2966 0294 74       		.byte	116
 2967 0295 74       		.byte	116
 2968 0296 47       		.byte	71
 2969 0297 47       		.byte	71
 2970 0298 74       		.byte	116
 2971 0299 74       		.byte	116
 2972 029a 47       		.byte	71
 2973 029b 74       		.byte	116
 2974 029c 74       		.byte	116
 2975 029d 74       		.byte	116
ARM GAS  /tmp/ccU23Djm.s 			page 95


 2976 029e 47       		.byte	71
 2977 029f 77       		.byte	119
 2978 02a0 74       		.byte	116
 2979 02a1 74       		.byte	116
 2980 02a2 74       		.byte	116
 2981 02a3 44       		.byte	68
 2982 02a4 74       		.byte	116
 2983 02a5 74       		.byte	116
 2984 02a6 74       		.byte	116
 2985 02a7 47       		.byte	71
 2986 02a8 74       		.byte	116
 2987 02a9 74       		.byte	116
 2988 02aa 74       		.byte	116
 2989 02ab 74       		.byte	116
 2990 02ac 74       		.byte	116
 2991 02ad 74       		.byte	116
 2992 02ae 74       		.byte	116
 2993 02af 77       		.byte	119
 2994 02b0 74       		.byte	116
 2995 02b1 74       		.byte	116
 2996 02b2 77       		.byte	119
 2997 02b3 44       		.byte	68
 2998 02b4 74       		.byte	116
 2999 02b5 74       		.byte	116
 3000 02b6 77       		.byte	119
 3001 02b7 47       		.byte	71
 3002 02b8 74       		.byte	116
 3003 02b9 74       		.byte	116
 3004 02ba 77       		.byte	119
 3005 02bb 74       		.byte	116
 3006 02bc 74       		.byte	116
 3007 02bd 74       		.byte	116
 3008 02be 77       		.byte	119
 3009 02bf 77       		.byte	119
 3010 02c0 74       		.byte	116
 3011 02c1 77       		.byte	119
 3012 02c2 44       		.byte	68
 3013 02c3 44       		.byte	68
 3014 02c4 74       		.byte	116
 3015 02c5 77       		.byte	119
 3016 02c6 44       		.byte	68
 3017 02c7 47       		.byte	71
 3018 02c8 74       		.byte	116
 3019 02c9 77       		.byte	119
 3020 02ca 44       		.byte	68
 3021 02cb 74       		.byte	116
 3022 02cc 74       		.byte	116
 3023 02cd 77       		.byte	119
 3024 02ce 44       		.byte	68
 3025 02cf 77       		.byte	119
 3026 02d0 74       		.byte	116
 3027 02d1 77       		.byte	119
 3028 02d2 47       		.byte	71
 3029 02d3 44       		.byte	68
 3030 02d4 74       		.byte	116
 3031 02d5 77       		.byte	119
 3032 02d6 47       		.byte	71
ARM GAS  /tmp/ccU23Djm.s 			page 96


 3033 02d7 47       		.byte	71
 3034 02d8 74       		.byte	116
 3035 02d9 77       		.byte	119
 3036 02da 47       		.byte	71
 3037 02db 74       		.byte	116
 3038 02dc 74       		.byte	116
 3039 02dd 77       		.byte	119
 3040 02de 47       		.byte	71
 3041 02df 77       		.byte	119
 3042 02e0 74       		.byte	116
 3043 02e1 77       		.byte	119
 3044 02e2 74       		.byte	116
 3045 02e3 44       		.byte	68
 3046 02e4 74       		.byte	116
 3047 02e5 77       		.byte	119
 3048 02e6 74       		.byte	116
 3049 02e7 47       		.byte	71
 3050 02e8 74       		.byte	116
 3051 02e9 77       		.byte	119
 3052 02ea 74       		.byte	116
 3053 02eb 74       		.byte	116
 3054 02ec 74       		.byte	116
 3055 02ed 77       		.byte	119
 3056 02ee 74       		.byte	116
 3057 02ef 77       		.byte	119
 3058 02f0 74       		.byte	116
 3059 02f1 77       		.byte	119
 3060 02f2 77       		.byte	119
 3061 02f3 44       		.byte	68
 3062 02f4 74       		.byte	116
 3063 02f5 77       		.byte	119
 3064 02f6 77       		.byte	119
 3065 02f7 47       		.byte	71
 3066 02f8 74       		.byte	116
 3067 02f9 77       		.byte	119
 3068 02fa 77       		.byte	119
 3069 02fb 74       		.byte	116
 3070 02fc 74       		.byte	116
 3071 02fd 77       		.byte	119
 3072 02fe 77       		.byte	119
 3073 02ff 77       		.byte	119
 3074 0300 77       		.byte	119
 3075 0301 44       		.byte	68
 3076 0302 44       		.byte	68
 3077 0303 44       		.byte	68
 3078 0304 77       		.byte	119
 3079 0305 44       		.byte	68
 3080 0306 44       		.byte	68
 3081 0307 47       		.byte	71
 3082 0308 77       		.byte	119
 3083 0309 44       		.byte	68
 3084 030a 44       		.byte	68
 3085 030b 74       		.byte	116
 3086 030c 77       		.byte	119
 3087 030d 44       		.byte	68
 3088 030e 44       		.byte	68
 3089 030f 77       		.byte	119
ARM GAS  /tmp/ccU23Djm.s 			page 97


 3090 0310 77       		.byte	119
 3091 0311 44       		.byte	68
 3092 0312 47       		.byte	71
 3093 0313 44       		.byte	68
 3094 0314 77       		.byte	119
 3095 0315 44       		.byte	68
 3096 0316 47       		.byte	71
 3097 0317 47       		.byte	71
 3098 0318 77       		.byte	119
 3099 0319 44       		.byte	68
 3100 031a 47       		.byte	71
 3101 031b 74       		.byte	116
 3102 031c 77       		.byte	119
 3103 031d 44       		.byte	68
 3104 031e 47       		.byte	71
 3105 031f 77       		.byte	119
 3106 0320 77       		.byte	119
 3107 0321 44       		.byte	68
 3108 0322 74       		.byte	116
 3109 0323 44       		.byte	68
 3110 0324 77       		.byte	119
 3111 0325 44       		.byte	68
 3112 0326 74       		.byte	116
 3113 0327 47       		.byte	71
 3114 0328 77       		.byte	119
 3115 0329 44       		.byte	68
 3116 032a 74       		.byte	116
 3117 032b 74       		.byte	116
 3118 032c 77       		.byte	119
 3119 032d 44       		.byte	68
 3120 032e 74       		.byte	116
 3121 032f 77       		.byte	119
 3122 0330 77       		.byte	119
 3123 0331 44       		.byte	68
 3124 0332 77       		.byte	119
 3125 0333 44       		.byte	68
 3126 0334 77       		.byte	119
 3127 0335 44       		.byte	68
 3128 0336 77       		.byte	119
 3129 0337 47       		.byte	71
 3130 0338 77       		.byte	119
 3131 0339 44       		.byte	68
 3132 033a 77       		.byte	119
 3133 033b 74       		.byte	116
 3134 033c 77       		.byte	119
 3135 033d 44       		.byte	68
 3136 033e 77       		.byte	119
 3137 033f 77       		.byte	119
 3138 0340 77       		.byte	119
 3139 0341 47       		.byte	71
 3140 0342 44       		.byte	68
 3141 0343 44       		.byte	68
 3142 0344 77       		.byte	119
 3143 0345 47       		.byte	71
 3144 0346 44       		.byte	68
 3145 0347 47       		.byte	71
 3146 0348 77       		.byte	119
ARM GAS  /tmp/ccU23Djm.s 			page 98


 3147 0349 47       		.byte	71
 3148 034a 44       		.byte	68
 3149 034b 74       		.byte	116
 3150 034c 77       		.byte	119
 3151 034d 47       		.byte	71
 3152 034e 44       		.byte	68
 3153 034f 77       		.byte	119
 3154 0350 77       		.byte	119
 3155 0351 47       		.byte	71
 3156 0352 47       		.byte	71
 3157 0353 44       		.byte	68
 3158 0354 77       		.byte	119
 3159 0355 47       		.byte	71
 3160 0356 47       		.byte	71
 3161 0357 47       		.byte	71
 3162 0358 77       		.byte	119
 3163 0359 47       		.byte	71
 3164 035a 47       		.byte	71
 3165 035b 74       		.byte	116
 3166 035c 77       		.byte	119
 3167 035d 47       		.byte	71
 3168 035e 47       		.byte	71
 3169 035f 77       		.byte	119
 3170 0360 77       		.byte	119
 3171 0361 47       		.byte	71
 3172 0362 74       		.byte	116
 3173 0363 44       		.byte	68
 3174 0364 77       		.byte	119
 3175 0365 47       		.byte	71
 3176 0366 74       		.byte	116
 3177 0367 47       		.byte	71
 3178 0368 77       		.byte	119
 3179 0369 47       		.byte	71
 3180 036a 74       		.byte	116
 3181 036b 74       		.byte	116
 3182 036c 77       		.byte	119
 3183 036d 47       		.byte	71
 3184 036e 74       		.byte	116
 3185 036f 77       		.byte	119
 3186 0370 77       		.byte	119
 3187 0371 47       		.byte	71
 3188 0372 77       		.byte	119
 3189 0373 44       		.byte	68
 3190 0374 77       		.byte	119
 3191 0375 47       		.byte	71
 3192 0376 77       		.byte	119
 3193 0377 47       		.byte	71
 3194 0378 77       		.byte	119
 3195 0379 47       		.byte	71
 3196 037a 77       		.byte	119
 3197 037b 74       		.byte	116
 3198 037c 77       		.byte	119
 3199 037d 47       		.byte	71
 3200 037e 77       		.byte	119
 3201 037f 77       		.byte	119
 3202 0380 77       		.byte	119
 3203 0381 74       		.byte	116
ARM GAS  /tmp/ccU23Djm.s 			page 99


 3204 0382 44       		.byte	68
 3205 0383 44       		.byte	68
 3206 0384 77       		.byte	119
 3207 0385 74       		.byte	116
 3208 0386 44       		.byte	68
 3209 0387 47       		.byte	71
 3210 0388 77       		.byte	119
 3211 0389 74       		.byte	116
 3212 038a 44       		.byte	68
 3213 038b 74       		.byte	116
 3214 038c 77       		.byte	119
 3215 038d 74       		.byte	116
 3216 038e 44       		.byte	68
 3217 038f 77       		.byte	119
 3218 0390 77       		.byte	119
 3219 0391 74       		.byte	116
 3220 0392 47       		.byte	71
 3221 0393 44       		.byte	68
 3222 0394 77       		.byte	119
 3223 0395 74       		.byte	116
 3224 0396 47       		.byte	71
 3225 0397 47       		.byte	71
 3226 0398 77       		.byte	119
 3227 0399 74       		.byte	116
 3228 039a 47       		.byte	71
 3229 039b 74       		.byte	116
 3230 039c 77       		.byte	119
 3231 039d 74       		.byte	116
 3232 039e 47       		.byte	71
 3233 039f 77       		.byte	119
 3234 03a0 77       		.byte	119
 3235 03a1 74       		.byte	116
 3236 03a2 74       		.byte	116
 3237 03a3 44       		.byte	68
 3238 03a4 77       		.byte	119
 3239 03a5 74       		.byte	116
 3240 03a6 74       		.byte	116
 3241 03a7 47       		.byte	71
 3242 03a8 77       		.byte	119
 3243 03a9 74       		.byte	116
 3244 03aa 74       		.byte	116
 3245 03ab 74       		.byte	116
 3246 03ac 77       		.byte	119
 3247 03ad 74       		.byte	116
 3248 03ae 74       		.byte	116
 3249 03af 77       		.byte	119
 3250 03b0 77       		.byte	119
 3251 03b1 74       		.byte	116
 3252 03b2 77       		.byte	119
 3253 03b3 44       		.byte	68
 3254 03b4 77       		.byte	119
 3255 03b5 74       		.byte	116
 3256 03b6 77       		.byte	119
 3257 03b7 47       		.byte	71
 3258 03b8 77       		.byte	119
 3259 03b9 74       		.byte	116
 3260 03ba 77       		.byte	119
ARM GAS  /tmp/ccU23Djm.s 			page 100


 3261 03bb 74       		.byte	116
 3262 03bc 77       		.byte	119
 3263 03bd 74       		.byte	116
 3264 03be 77       		.byte	119
 3265 03bf 77       		.byte	119
 3266 03c0 77       		.byte	119
 3267 03c1 77       		.byte	119
 3268 03c2 44       		.byte	68
 3269 03c3 44       		.byte	68
 3270 03c4 77       		.byte	119
 3271 03c5 77       		.byte	119
 3272 03c6 44       		.byte	68
 3273 03c7 47       		.byte	71
 3274 03c8 77       		.byte	119
 3275 03c9 77       		.byte	119
 3276 03ca 44       		.byte	68
 3277 03cb 74       		.byte	116
 3278 03cc 77       		.byte	119
 3279 03cd 77       		.byte	119
 3280 03ce 44       		.byte	68
 3281 03cf 77       		.byte	119
 3282 03d0 77       		.byte	119
 3283 03d1 77       		.byte	119
 3284 03d2 47       		.byte	71
 3285 03d3 44       		.byte	68
 3286 03d4 77       		.byte	119
 3287 03d5 77       		.byte	119
 3288 03d6 47       		.byte	71
 3289 03d7 47       		.byte	71
 3290 03d8 77       		.byte	119
 3291 03d9 77       		.byte	119
 3292 03da 47       		.byte	71
 3293 03db 74       		.byte	116
 3294 03dc 77       		.byte	119
 3295 03dd 77       		.byte	119
 3296 03de 47       		.byte	71
 3297 03df 77       		.byte	119
 3298 03e0 77       		.byte	119
 3299 03e1 77       		.byte	119
 3300 03e2 74       		.byte	116
 3301 03e3 44       		.byte	68
 3302 03e4 77       		.byte	119
 3303 03e5 77       		.byte	119
 3304 03e6 74       		.byte	116
 3305 03e7 47       		.byte	71
 3306 03e8 77       		.byte	119
 3307 03e9 77       		.byte	119
 3308 03ea 74       		.byte	116
 3309 03eb 74       		.byte	116
 3310 03ec 77       		.byte	119
 3311 03ed 77       		.byte	119
 3312 03ee 74       		.byte	116
 3313 03ef 77       		.byte	119
 3314 03f0 77       		.byte	119
 3315 03f1 77       		.byte	119
 3316 03f2 77       		.byte	119
 3317 03f3 44       		.byte	68
ARM GAS  /tmp/ccU23Djm.s 			page 101


 3318 03f4 77       		.byte	119
 3319 03f5 77       		.byte	119
 3320 03f6 77       		.byte	119
 3321 03f7 47       		.byte	71
 3322 03f8 77       		.byte	119
 3323 03f9 77       		.byte	119
 3324 03fa 77       		.byte	119
 3325 03fb 74       		.byte	116
 3326 03fc 77       		.byte	119
 3327 03fd 77       		.byte	119
 3328 03fe 77       		.byte	119
 3329 03ff 77       		.byte	119
 3330              		.section	.text._ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv,"axG",%progbit
 3331              		.align	1
 3332              		.weak	_ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv
 3333              		.syntax unified
 3334              		.thumb
 3335              		.thumb_func
 3336              		.fpu fpv4-sp-d16
 3338              	_ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv:
 3339              	.LFB4065:
 3340              		.file 9 "Cpp/ws2812b.hpp"
   1:Cpp/ws2812b.hpp **** #pragma once
   2:Cpp/ws2812b.hpp **** 
   3:Cpp/ws2812b.hpp **** #include <array>
   4:Cpp/ws2812b.hpp **** #include "stm32f4xx_hal.h"
   5:Cpp/ws2812b.hpp **** #include "stm32f4xx_hal_spi.h"
   6:Cpp/ws2812b.hpp **** 
   7:Cpp/ws2812b.hpp **** #include "otto.hpp"
   8:Cpp/ws2812b.hpp **** 
   9:Cpp/ws2812b.hpp **** #include "algorithm.hpp"
  10:Cpp/ws2812b.hpp **** 
  11:Cpp/ws2812b.hpp **** namespace otto::mcu::ws2812b {
  12:Cpp/ws2812b.hpp **** 
  13:Cpp/ws2812b.hpp ****   using FourBytes = std::array<std::uint8_t, 4>;
  14:Cpp/ws2812b.hpp **** 
  15:Cpp/ws2812b.hpp ****   constexpr std::array<std::uint8_t, 2> ws2812b_bits = {0b0100, 0b0111};
  16:Cpp/ws2812b.hpp **** 
  17:Cpp/ws2812b.hpp ****   constexpr std::array ws2812b_mapping = [] {
  18:Cpp/ws2812b.hpp ****     std::array<FourBytes, 256> res = {};
  19:Cpp/ws2812b.hpp ****     for (int i = 0; i < 256; i++) {
  20:Cpp/ws2812b.hpp ****       auto& row = res[i];
  21:Cpp/ws2812b.hpp ****       for (int j = 0; j < 4; j++) {
  22:Cpp/ws2812b.hpp ****         row[j] = [&] {
  23:Cpp/ws2812b.hpp ****           switch ((i >> 2 * (3 - j)) & 0b11) {
  24:Cpp/ws2812b.hpp ****             case 0b00: return (ws2812b_bits[0] << 4) | ws2812b_bits[0];
  25:Cpp/ws2812b.hpp ****             case 0b01: return (ws2812b_bits[0] << 4) | ws2812b_bits[1];
  26:Cpp/ws2812b.hpp ****             case 0b10: return (ws2812b_bits[1] << 4) | ws2812b_bits[0];
  27:Cpp/ws2812b.hpp ****             case 0b11: return (ws2812b_bits[1] << 4) | ws2812b_bits[1];
  28:Cpp/ws2812b.hpp ****           }
  29:Cpp/ws2812b.hpp ****           __builtin_unreachable();
  30:Cpp/ws2812b.hpp ****         }();
  31:Cpp/ws2812b.hpp ****       }
  32:Cpp/ws2812b.hpp ****     }
  33:Cpp/ws2812b.hpp ****     return res;
  34:Cpp/ws2812b.hpp ****   }();
  35:Cpp/ws2812b.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 102


  36:Cpp/ws2812b.hpp ****   constexpr std::uint8_t byte_from_mapping(FourBytes bytes)
  37:Cpp/ws2812b.hpp ****   {
  38:Cpp/ws2812b.hpp ****     std::uint8_t res = 0;
  39:Cpp/ws2812b.hpp ****     for (int i = 0; i < 4; i++) {
  40:Cpp/ws2812b.hpp ****       auto b = [&] {
 3341              		.loc 9 40 16
 3342              		.cfi_startproc
 3343              		@ args = 0, pretend = 0, frame = 8
 3344              		@ frame_needed = 1, uses_anonymous_args = 0
 3345 0000 80B5     		push	{r7, lr}
 3346              	.LCFI186:
 3347              		.cfi_def_cfa_offset 8
 3348              		.cfi_offset 7, -8
 3349              		.cfi_offset 14, -4
 3350 0002 82B0     		sub	sp, sp, #8
 3351              	.LCFI187:
 3352              		.cfi_def_cfa_offset 16
 3353 0004 00AF     		add	r7, sp, #0
 3354              	.LCFI188:
 3355              		.cfi_def_cfa_register 7
 3356 0006 7860     		str	r0, [r7, #4]
  41:Cpp/ws2812b.hpp ****         switch (bytes[i]) {
 3357              		.loc 9 41 17
 3358 0008 7B68     		ldr	r3, [r7, #4]
 3359 000a 1A68     		ldr	r2, [r3]
 3360              		.loc 9 41 23
 3361 000c 7B68     		ldr	r3, [r7, #4]
 3362 000e 5B68     		ldr	r3, [r3, #4]
 3363 0010 1B68     		ldr	r3, [r3]
 3364              		.loc 9 41 24
 3365 0012 1946     		mov	r1, r3
 3366 0014 1046     		mov	r0, r2
 3367 0016 FFF7FEFF 		bl	_ZNSt5arrayIhLj4EEixEj
 3368 001a 0346     		mov	r3, r0
 3369              		.loc 9 41 9
 3370 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3371 001e 772B     		cmp	r3, #119
 3372 0020 10D0     		beq	.L90
 3373 0022 772B     		cmp	r3, #119
 3374 0024 10DC     		bgt	.L91
 3375 0026 742B     		cmp	r3, #116
 3376 0028 0AD0     		beq	.L92
 3377 002a 742B     		cmp	r3, #116
 3378 002c 0CDC     		bgt	.L91
 3379 002e 442B     		cmp	r3, #68
 3380 0030 02D0     		beq	.L93
 3381 0032 472B     		cmp	r3, #71
 3382 0034 02D0     		beq	.L94
 3383 0036 07E0     		b	.L91
 3384              	.L93:
  42:Cpp/ws2812b.hpp ****           case (ws2812b_bits[0] << 4) | ws2812b_bits[0]: return (std::uint8_t) 0b00;
 3385              		.loc 9 42 80
 3386 0038 0023     		movs	r3, #0
 3387 003a 05E0     		b	.L95
 3388              	.L94:
  43:Cpp/ws2812b.hpp ****           case (ws2812b_bits[0] << 4) | ws2812b_bits[1]: return (std::uint8_t) 0b01;
 3389              		.loc 9 43 80
ARM GAS  /tmp/ccU23Djm.s 			page 103


 3390 003c 0123     		movs	r3, #1
 3391 003e 03E0     		b	.L95
 3392              	.L92:
  44:Cpp/ws2812b.hpp ****           case (ws2812b_bits[1] << 4) | ws2812b_bits[0]: return (std::uint8_t) 0b10;
 3393              		.loc 9 44 80
 3394 0040 0223     		movs	r3, #2
 3395 0042 01E0     		b	.L95
 3396              	.L90:
  45:Cpp/ws2812b.hpp ****           case (ws2812b_bits[1] << 4) | ws2812b_bits[1]: return (std::uint8_t) 0b11;
 3397              		.loc 9 45 80
 3398 0044 0323     		movs	r3, #3
 3399 0046 FFE7     		b	.L95
 3400              	.L91:
 3401              	.L95:
  46:Cpp/ws2812b.hpp ****         };
  47:Cpp/ws2812b.hpp ****         __builtin_unreachable();
  48:Cpp/ws2812b.hpp ****       }();
 3402              		.loc 9 48 7
 3403 0048 1846     		mov	r0, r3
 3404 004a 0837     		adds	r7, r7, #8
 3405              	.LCFI189:
 3406              		.cfi_def_cfa_offset 8
 3407 004c BD46     		mov	sp, r7
 3408              	.LCFI190:
 3409              		.cfi_def_cfa_register 13
 3410              		@ sp needed
 3411 004e 80BD     		pop	{r7, pc}
 3412              		.cfi_endproc
 3413              	.LFE4065:
 3415              		.section	.text._ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE,"axG",%progbits,_ZN4otto3mc
 3416              		.align	1
 3417              		.weak	_ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE
 3418              		.syntax unified
 3419              		.thumb
 3420              		.thumb_func
 3421              		.fpu fpv4-sp-d16
 3423              	_ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE:
 3424              	.LFB4064:
  37:Cpp/ws2812b.hpp ****     std::uint8_t res = 0;
 3425              		.loc 9 37 3
 3426              		.cfi_startproc
 3427              		@ args = 0, pretend = 0, frame = 24
 3428              		@ frame_needed = 1, uses_anonymous_args = 0
 3429 0000 80B5     		push	{r7, lr}
 3430              	.LCFI191:
 3431              		.cfi_def_cfa_offset 8
 3432              		.cfi_offset 7, -8
 3433              		.cfi_offset 14, -4
 3434 0002 86B0     		sub	sp, sp, #24
 3435              	.LCFI192:
 3436              		.cfi_def_cfa_offset 32
 3437 0004 00AF     		add	r7, sp, #0
 3438              	.LCFI193:
 3439              		.cfi_def_cfa_register 7
 3440 0006 7860     		str	r0, [r7, #4]
  38:Cpp/ws2812b.hpp ****     for (int i = 0; i < 4; i++) {
 3441              		.loc 9 38 18
ARM GAS  /tmp/ccU23Djm.s 			page 104


 3442 0008 0023     		movs	r3, #0
 3443 000a FB75     		strb	r3, [r7, #23]
 3444              	.LBB15:
  39:Cpp/ws2812b.hpp ****       auto b = [&] {
 3445              		.loc 9 39 14
 3446 000c 0023     		movs	r3, #0
 3447 000e BB60     		str	r3, [r7, #8]
 3448              	.L98:
  39:Cpp/ws2812b.hpp ****       auto b = [&] {
 3449              		.loc 9 39 23 discriminator 3
 3450 0010 BB68     		ldr	r3, [r7, #8]
 3451 0012 032B     		cmp	r3, #3
 3452 0014 1CDC     		bgt	.L97
 3453              	.LBB16:
 3454              		.loc 9 48 8 discriminator 2
 3455 0016 3B1D     		adds	r3, r7, #4
 3456 0018 FB60     		str	r3, [r7, #12]
 3457 001a 07F10803 		add	r3, r7, #8
 3458 001e 3B61     		str	r3, [r7, #16]
 3459 0020 07F10C03 		add	r3, r7, #12
 3460 0024 1846     		mov	r0, r3
 3461 0026 FFF7FEFF 		bl	_ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv
 3462 002a 0346     		mov	r3, r0
 3463 002c BB75     		strb	r3, [r7, #22]
  49:Cpp/ws2812b.hpp ****       res = res | (b << 2 * (3 - i));
 3464              		.loc 9 49 20 discriminator 2
 3465 002e BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 3466              		.loc 9 49 32 discriminator 2
 3467 0030 BB68     		ldr	r3, [r7, #8]
 3468 0032 C3F10303 		rsb	r3, r3, #3
 3469              		.loc 9 49 27 discriminator 2
 3470 0036 5B00     		lsls	r3, r3, #1
 3471              		.loc 9 49 22 discriminator 2
 3472 0038 02FA03F3 		lsl	r3, r2, r3
 3473              		.loc 9 49 17 discriminator 2
 3474 003c 5AB2     		sxtb	r2, r3
 3475 003e 97F91730 		ldrsb	r3, [r7, #23]
 3476 0042 1343     		orrs	r3, r3, r2
 3477 0044 5BB2     		sxtb	r3, r3
 3478              		.loc 9 49 11 discriminator 2
 3479 0046 FB75     		strb	r3, [r7, #23]
 3480              	.LBE16:
  39:Cpp/ws2812b.hpp ****       auto b = [&] {
 3481              		.loc 9 39 5 discriminator 2
 3482 0048 BB68     		ldr	r3, [r7, #8]
 3483 004a 0133     		adds	r3, r3, #1
 3484 004c BB60     		str	r3, [r7, #8]
 3485 004e DFE7     		b	.L98
 3486              	.L97:
 3487              	.LBE15:
  50:Cpp/ws2812b.hpp ****     }
  51:Cpp/ws2812b.hpp ****     return res;
 3488              		.loc 9 51 12
 3489 0050 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  52:Cpp/ws2812b.hpp ****   }
 3490              		.loc 9 52 3
 3491 0052 1846     		mov	r0, r3
ARM GAS  /tmp/ccU23Djm.s 			page 105


 3492 0054 1837     		adds	r7, r7, #24
 3493              	.LCFI194:
 3494              		.cfi_def_cfa_offset 8
 3495 0056 BD46     		mov	sp, r7
 3496              	.LCFI195:
 3497              		.cfi_def_cfa_register 13
 3498              		@ sp needed
 3499 0058 80BD     		pop	{r7, pc}
 3500              		.cfi_endproc
 3501              	.LFE4064:
 3503              		.section	.text._ZNK4otto3mcu7ws2812b8RGBColormlEf,"axG",%progbits,_ZNK4otto3mcu7ws2812b8RGBColorml
 3504              		.align	1
 3505              		.weak	_ZNK4otto3mcu7ws2812b8RGBColormlEf
 3506              		.syntax unified
 3507              		.thumb
 3508              		.thumb_func
 3509              		.fpu fpv4-sp-d16
 3511              	_ZNK4otto3mcu7ws2812b8RGBColormlEf:
 3512              	.LFB4066:
  53:Cpp/ws2812b.hpp **** 
  54:Cpp/ws2812b.hpp ****   struct RGBColor {
  55:Cpp/ws2812b.hpp ****     std::uint8_t r = 0, g = 0, b = 0;
  56:Cpp/ws2812b.hpp **** 
  57:Cpp/ws2812b.hpp ****     RGBColor operator*(float f) const
 3513              		.loc 9 57 14
 3514              		.cfi_startproc
 3515              		@ args = 0, pretend = 0, frame = 24
 3516              		@ frame_needed = 1, uses_anonymous_args = 0
 3517              		@ link register save eliminated.
 3518 0000 80B4     		push	{r7}
 3519              	.LCFI196:
 3520              		.cfi_def_cfa_offset 4
 3521              		.cfi_offset 7, -4
 3522 0002 87B0     		sub	sp, sp, #28
 3523              	.LCFI197:
 3524              		.cfi_def_cfa_offset 32
 3525 0004 00AF     		add	r7, sp, #0
 3526              	.LCFI198:
 3527              		.cfi_def_cfa_register 7
 3528 0006 F860     		str	r0, [r7, #12]
 3529 0008 87ED020A 		vstr.32	s0, [r7, #8]
  58:Cpp/ws2812b.hpp ****     {
  59:Cpp/ws2812b.hpp ****       return {static_cast<uint8_t>(r * f), static_cast<uint8_t>(g * f), static_cast<uint8_t>(b * f)
 3530              		.loc 9 59 36
 3531 000c FB68     		ldr	r3, [r7, #12]
 3532 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3533 0010 07EE903A 		vmov	s15, r3	@ int
 3534              		.loc 9 59 38
 3535 0014 B8EEE77A 		vcvt.f32.s32	s14, s15
 3536 0018 D7ED027A 		vldr.32	s15, [r7, #8]
 3537 001c 67EE277A 		vmul.f32	s15, s14, s15
 3538              		.loc 9 59 15
 3539 0020 FCEEE77A 		vcvt.u32.f32	s15, s15
 3540 0024 C7ED017A 		vstr.32	s15, [r7, #4]	@ int
 3541 0028 3B79     		ldrb	r3, [r7, #4]
 3542 002a DBB2     		uxtb	r3, r3
 3543              		.loc 9 59 100
ARM GAS  /tmp/ccU23Djm.s 			page 106


 3544 002c 3B75     		strb	r3, [r7, #20]
 3545              		.loc 9 59 65
 3546 002e FB68     		ldr	r3, [r7, #12]
 3547 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3548 0032 07EE903A 		vmov	s15, r3	@ int
 3549              		.loc 9 59 67
 3550 0036 B8EEE77A 		vcvt.f32.s32	s14, s15
 3551 003a D7ED027A 		vldr.32	s15, [r7, #8]
 3552 003e 67EE277A 		vmul.f32	s15, s14, s15
 3553              		.loc 9 59 44
 3554 0042 FCEEE77A 		vcvt.u32.f32	s15, s15
 3555 0046 C7ED017A 		vstr.32	s15, [r7, #4]	@ int
 3556 004a 3B79     		ldrb	r3, [r7, #4]
 3557 004c DBB2     		uxtb	r3, r3
 3558              		.loc 9 59 100
 3559 004e 7B75     		strb	r3, [r7, #21]
 3560              		.loc 9 59 94
 3561 0050 FB68     		ldr	r3, [r7, #12]
 3562 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3563 0054 07EE903A 		vmov	s15, r3	@ int
 3564              		.loc 9 59 96
 3565 0058 B8EEE77A 		vcvt.f32.s32	s14, s15
 3566 005c D7ED027A 		vldr.32	s15, [r7, #8]
 3567 0060 67EE277A 		vmul.f32	s15, s14, s15
 3568              		.loc 9 59 73
 3569 0064 FCEEE77A 		vcvt.u32.f32	s15, s15
 3570 0068 C7ED017A 		vstr.32	s15, [r7, #4]	@ int
 3571 006c 3B79     		ldrb	r3, [r7, #4]
 3572 006e DBB2     		uxtb	r3, r3
 3573              		.loc 9 59 100
 3574 0070 BB75     		strb	r3, [r7, #22]
 3575 0072 0023     		movs	r3, #0
 3576 0074 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 3577 0076 62F30703 		bfi	r3, r2, #0, #8
 3578 007a 7A7D     		ldrb	r2, [r7, #21]	@ zero_extendqisi2
 3579 007c 62F30F23 		bfi	r3, r2, #8, #8
 3580 0080 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 3581 0082 62F31743 		bfi	r3, r2, #16, #8
  60:Cpp/ws2812b.hpp ****     }
 3582              		.loc 9 60 5
 3583 0086 1846     		mov	r0, r3
 3584 0088 1C37     		adds	r7, r7, #28
 3585              	.LCFI199:
 3586              		.cfi_def_cfa_offset 4
 3587 008a BD46     		mov	sp, r7
 3588              	.LCFI200:
 3589              		.cfi_def_cfa_register 13
 3590              		@ sp needed
 3591 008c 5DF8047B 		ldr	r7, [sp], #4
 3592              	.LCFI201:
 3593              		.cfi_restore 7
 3594              		.cfi_def_cfa_offset 0
 3595 0090 7047     		bx	lr
 3596              		.cfi_endproc
 3597              	.LFE4066:
 3599              		.section	.text._ZN4otto3mcu7ws2812b8RGBColoreqERKS2_,"axG",%progbits,_ZN4otto3mcu7ws2812b8RGBColor
 3600              		.align	1
ARM GAS  /tmp/ccU23Djm.s 			page 107


 3601              		.weak	_ZN4otto3mcu7ws2812b8RGBColoreqERKS2_
 3602              		.syntax unified
 3603              		.thumb
 3604              		.thumb_func
 3605              		.fpu fpv4-sp-d16
 3607              	_ZN4otto3mcu7ws2812b8RGBColoreqERKS2_:
 3608              	.LFB4067:
  61:Cpp/ws2812b.hpp **** 
  62:Cpp/ws2812b.hpp ****     bool operator==(RGBColor const& rhs)
 3609              		.loc 9 62 10
 3610              		.cfi_startproc
 3611              		@ args = 0, pretend = 0, frame = 8
 3612              		@ frame_needed = 1, uses_anonymous_args = 0
 3613              		@ link register save eliminated.
 3614 0000 80B4     		push	{r7}
 3615              	.LCFI202:
 3616              		.cfi_def_cfa_offset 4
 3617              		.cfi_offset 7, -4
 3618 0002 83B0     		sub	sp, sp, #12
 3619              	.LCFI203:
 3620              		.cfi_def_cfa_offset 16
 3621 0004 00AF     		add	r7, sp, #0
 3622              	.LCFI204:
 3623              		.cfi_def_cfa_register 7
 3624 0006 7860     		str	r0, [r7, #4]
 3625 0008 3960     		str	r1, [r7]
  63:Cpp/ws2812b.hpp ****     {
  64:Cpp/ws2812b.hpp ****       return r == rhs.r && g == rhs.g && b == rhs.b;
 3626              		.loc 9 64 14
 3627 000a 7B68     		ldr	r3, [r7, #4]
 3628 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3629              		.loc 9 64 23
 3630 000e 3B68     		ldr	r3, [r7]
 3631 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3632              		.loc 9 64 39
 3633 0012 9A42     		cmp	r2, r3
 3634 0014 0DD1     		bne	.L103
 3635              		.loc 9 64 28 discriminator 1
 3636 0016 7B68     		ldr	r3, [r7, #4]
 3637 0018 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 3638              		.loc 9 64 37 discriminator 1
 3639 001a 3B68     		ldr	r3, [r7]
 3640 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3641              		.loc 9 64 25 discriminator 1
 3642 001e 9A42     		cmp	r2, r3
 3643 0020 07D1     		bne	.L103
 3644              		.loc 9 64 42 discriminator 3
 3645 0022 7B68     		ldr	r3, [r7, #4]
 3646 0024 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 3647              		.loc 9 64 51 discriminator 3
 3648 0026 3B68     		ldr	r3, [r7]
 3649 0028 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3650              		.loc 9 64 39 discriminator 3
 3651 002a 9A42     		cmp	r2, r3
 3652 002c 01D1     		bne	.L103
 3653              		.loc 9 64 39 is_stmt 0 discriminator 5
 3654 002e 0123     		movs	r3, #1
ARM GAS  /tmp/ccU23Djm.s 			page 108


 3655 0030 00E0     		b	.L104
 3656              	.L103:
 3657              		.loc 9 64 39 discriminator 6
 3658 0032 0023     		movs	r3, #0
 3659              	.L104:
  65:Cpp/ws2812b.hpp ****     }
 3660              		.loc 9 65 5 is_stmt 1 discriminator 8
 3661 0034 1846     		mov	r0, r3
 3662 0036 0C37     		adds	r7, r7, #12
 3663              	.LCFI205:
 3664              		.cfi_def_cfa_offset 4
 3665 0038 BD46     		mov	sp, r7
 3666              	.LCFI206:
 3667              		.cfi_def_cfa_register 13
 3668              		@ sp needed
 3669 003a 5DF8047B 		ldr	r7, [sp], #4
 3670              	.LCFI207:
 3671              		.cfi_restore 7
 3672              		.cfi_def_cfa_offset 0
 3673 003e 7047     		bx	lr
 3674              		.cfi_endproc
 3675              	.LFE4067:
 3677              		.section	.text._ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb,"axG",%progbits,_ZN4otto3mcu7ws2812b10Ws281
 3678              		.align	1
 3679              		.weak	_ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb
 3680              		.syntax unified
 3681              		.thumb
 3682              		.thumb_func
 3683              		.fpu fpv4-sp-d16
 3685              	_ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb:
 3686              	.LFB4069:
  66:Cpp/ws2812b.hpp ****   };
  67:Cpp/ws2812b.hpp **** 
  68:Cpp/ws2812b.hpp ****   struct Ws2812bRef {
  69:Cpp/ws2812b.hpp ****     Ws2812bRef(std::uint8_t* data_ptr, bool& needs_update) : data_ptr_(data_ptr), needs_update_(nee
 3687              		.loc 9 69 5
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 16
 3690              		@ frame_needed = 1, uses_anonymous_args = 0
 3691              		@ link register save eliminated.
 3692 0000 80B4     		push	{r7}
 3693              	.LCFI208:
 3694              		.cfi_def_cfa_offset 4
 3695              		.cfi_offset 7, -4
 3696 0002 85B0     		sub	sp, sp, #20
 3697              	.LCFI209:
 3698              		.cfi_def_cfa_offset 24
 3699 0004 00AF     		add	r7, sp, #0
 3700              	.LCFI210:
 3701              		.cfi_def_cfa_register 7
 3702 0006 F860     		str	r0, [r7, #12]
 3703 0008 B960     		str	r1, [r7, #8]
 3704 000a 7A60     		str	r2, [r7, #4]
 3705              	.LBB17:
 3706              		.loc 9 69 109
 3707 000c FB68     		ldr	r3, [r7, #12]
 3708 000e BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/ccU23Djm.s 			page 109


 3709 0010 1A60     		str	r2, [r3]
 3710 0012 FB68     		ldr	r3, [r7, #12]
 3711 0014 7A68     		ldr	r2, [r7, #4]
 3712 0016 5A60     		str	r2, [r3, #4]
 3713              	.LBE17:
 3714              		.loc 9 69 112
 3715 0018 FB68     		ldr	r3, [r7, #12]
 3716 001a 1846     		mov	r0, r3
 3717 001c 1437     		adds	r7, r7, #20
 3718              	.LCFI211:
 3719              		.cfi_def_cfa_offset 4
 3720 001e BD46     		mov	sp, r7
 3721              	.LCFI212:
 3722              		.cfi_def_cfa_register 13
 3723              		@ sp needed
 3724 0020 5DF8047B 		ldr	r7, [sp], #4
 3725              	.LCFI213:
 3726              		.cfi_restore 7
 3727              		.cfi_def_cfa_offset 0
 3728 0024 7047     		bx	lr
 3729              		.cfi_endproc
 3730              	.LFE4069:
 3732              		.weak	_ZN4otto3mcu7ws2812b10Ws2812bRefC1EPhRb
 3733              		.thumb_set _ZN4otto3mcu7ws2812b10Ws2812bRefC1EPhRb,_ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb
 3734              		.section	.text._ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_,"axG",%progbits,_ZN4ot
 3735              		.align	1
 3736              		.weak	_ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_
 3737              		.syntax unified
 3738              		.thumb
 3739              		.thumb_func
 3740              		.fpu fpv4-sp-d16
 3742              	_ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_:
 3743              	.LFB4072:
 3744              		.file 10 "Cpp/algorithm.hpp"
   1:Cpp/algorithm.hpp **** #pragma once
   2:Cpp/algorithm.hpp **** 
   3:Cpp/algorithm.hpp **** #include <algorithm>
   4:Cpp/algorithm.hpp **** #include <functional>
   5:Cpp/algorithm.hpp **** #include <initializer_list>
   6:Cpp/algorithm.hpp **** #include <numeric>
   7:Cpp/algorithm.hpp **** #include <string>
   8:Cpp/algorithm.hpp **** #include <string_view>
   9:Cpp/algorithm.hpp **** #include <type_traits>
  10:Cpp/algorithm.hpp **** 
  11:Cpp/algorithm.hpp **** /// \file
  12:Cpp/algorithm.hpp **** /// This file contains the \ref otto::util::algorithm namespace
  13:Cpp/algorithm.hpp **** 
  14:Cpp/algorithm.hpp **** namespace otto::util {
  15:Cpp/algorithm.hpp **** 
  16:Cpp/algorithm.hpp ****   /// Inline namespace with algorithms similar to the ones found in the standard `<algorithm>`
  17:Cpp/algorithm.hpp ****   /// header.
  18:Cpp/algorithm.hpp ****   ///
  19:Cpp/algorithm.hpp ****   /// Also, this namespace includes container-based wrappers for all standard algorithms. For more
  20:Cpp/algorithm.hpp ****   /// on those, see \ref container_algos
  21:Cpp/algorithm.hpp ****   ///
  22:Cpp/algorithm.hpp ****   /// \attention `otto::util::algorithm` is an inline namespace, meaning all members can and should
  23:Cpp/algorithm.hpp ****   /// be accessed directly from the `otto::util` namespace i.e. as `util::find_if(...)`, not
ARM GAS  /tmp/ccU23Djm.s 			page 110


  24:Cpp/algorithm.hpp ****   /// `util::algorithm::find_if(...)`. It is only a separate namespace for clarification of
  25:Cpp/algorithm.hpp ****   /// documentation and name resolution.
  26:Cpp/algorithm.hpp ****   inline namespace algorithm {
  27:Cpp/algorithm.hpp ****     /// Joins a sequence of strings, separating them using `js`
  28:Cpp/algorithm.hpp ****     template<class StrIterator> // Models InputIterator<std::string>
  29:Cpp/algorithm.hpp ****     std::string join_strings(StrIterator b, StrIterator e, std::string_view js = ", ")
  30:Cpp/algorithm.hpp ****     {
  31:Cpp/algorithm.hpp ****       std::string result;
  32:Cpp/algorithm.hpp ****       std::for_each(b, e, [&](auto&& s) {
  33:Cpp/algorithm.hpp ****         if (!result.empty()) {
  34:Cpp/algorithm.hpp ****           result.append(js);
  35:Cpp/algorithm.hpp ****         }
  36:Cpp/algorithm.hpp ****         result.append(s);
  37:Cpp/algorithm.hpp ****       });
  38:Cpp/algorithm.hpp ****       return result;
  39:Cpp/algorithm.hpp ****     }
  40:Cpp/algorithm.hpp **** 
  41:Cpp/algorithm.hpp ****     /// Find/Replace
  42:Cpp/algorithm.hpp ****     inline void string_replace(std::string& str, const std::string& oldStr, const std::string& newS
  43:Cpp/algorithm.hpp ****     {
  44:Cpp/algorithm.hpp ****       std::string::size_type pos = 0u;
  45:Cpp/algorithm.hpp ****       while ((pos = str.find(oldStr, pos)) != std::string::npos) {
  46:Cpp/algorithm.hpp ****         str.replace(pos, oldStr.length(), newStr);
  47:Cpp/algorithm.hpp ****         pos += newStr.length();
  48:Cpp/algorithm.hpp ****       }
  49:Cpp/algorithm.hpp ****     }
  50:Cpp/algorithm.hpp **** 
  51:Cpp/algorithm.hpp ****     /// Check if string `str` starts with `prefix`
  52:Cpp/algorithm.hpp ****     inline bool starts_with(std::string_view str, std::string_view prefix)
  53:Cpp/algorithm.hpp ****     {
  54:Cpp/algorithm.hpp ****       return str.compare(0, prefix.size(), prefix) == 0;
  55:Cpp/algorithm.hpp ****     }
  56:Cpp/algorithm.hpp **** 
  57:Cpp/algorithm.hpp ****     /// Joins a sequence of strings, separating them using `js`
  58:Cpp/algorithm.hpp ****     template<typename Container>
  59:Cpp/algorithm.hpp ****     std::string join_strings(Container&& cont, std::string_view js = ", ")
  60:Cpp/algorithm.hpp ****     {
  61:Cpp/algorithm.hpp ****       return join_strings(std::begin(cont), std::end(cont), js);
  62:Cpp/algorithm.hpp ****     }
  63:Cpp/algorithm.hpp **** 
  64:Cpp/algorithm.hpp ****     namespace algo_detail {
  65:Cpp/algorithm.hpp ****       template<class Func, int... ns>
  66:Cpp/algorithm.hpp ****       constexpr auto generate_array_impl(std::integer_sequence<int, ns...>&&, Func&& gen)
  67:Cpp/algorithm.hpp ****       {
  68:Cpp/algorithm.hpp ****         return std::array<std::decay_t<decltype(std::invoke(gen, std::declval<int>()))>, sizeof...(
  69:Cpp/algorithm.hpp ****           {std::invoke(gen, ns)...}};
  70:Cpp/algorithm.hpp ****       }
  71:Cpp/algorithm.hpp ****     } // namespace detail
  72:Cpp/algorithm.hpp **** 
  73:Cpp/algorithm.hpp ****     template<int n, class Func>
  74:Cpp/algorithm.hpp ****     constexpr auto generate_array(Func&& gen)
  75:Cpp/algorithm.hpp ****     {
  76:Cpp/algorithm.hpp ****       auto intseq = std::make_integer_sequence<int, n>();
  77:Cpp/algorithm.hpp ****       return algo_detail::generate_array_impl(std::move(intseq), std::forward<Func>(gen));
  78:Cpp/algorithm.hpp ****     }
  79:Cpp/algorithm.hpp **** 
  80:Cpp/algorithm.hpp ****     template<class Func>
ARM GAS  /tmp/ccU23Djm.s 			page 111


  81:Cpp/algorithm.hpp ****     constexpr auto generate_vector(int n, Func&& gen)
  82:Cpp/algorithm.hpp ****     {
  83:Cpp/algorithm.hpp ****       using value_type = std::decay_t<decltype(gen(n))>;
  84:Cpp/algorithm.hpp ****       std::vector<value_type> res;
  85:Cpp/algorithm.hpp ****       res.reserve(n);
  86:Cpp/algorithm.hpp ****       std::generate_n(std::back_inserter(res), n, [&gen, i = 0]() mutable { return gen(i++); });
  87:Cpp/algorithm.hpp ****       return res;
  88:Cpp/algorithm.hpp ****     }
  89:Cpp/algorithm.hpp **** 
  90:Cpp/algorithm.hpp ****     /// Identity function
  91:Cpp/algorithm.hpp ****     constexpr auto identity = [](auto&& x) -> decltype(auto) { return FWD(x); };
  92:Cpp/algorithm.hpp **** 
  93:Cpp/algorithm.hpp ****     /// Erase elements from container
  94:Cpp/algorithm.hpp ****     ///
  95:Cpp/algorithm.hpp ****     /// @param cont Must be a container with a `erase(Iter, Iter)` member function, erasing the
  96:Cpp/algorithm.hpp ****     /// items between the two iterators. Most mutable standard containers qualify.
  97:Cpp/algorithm.hpp ****     ///
  98:Cpp/algorithm.hpp ****     /// @param t elements will be erased if they compare equal to this
  99:Cpp/algorithm.hpp ****     ///
 100:Cpp/algorithm.hpp ****     /// @returns whatever `cont.erase()` returns. For standard containers, this is the iterator
 101:Cpp/algorithm.hpp ****     /// pointing to the element after the last erased one.
 102:Cpp/algorithm.hpp ****     template<typename Container, typename T>
 103:Cpp/algorithm.hpp ****     auto erase(Container&& cont, T&& t)
 104:Cpp/algorithm.hpp ****     {
 105:Cpp/algorithm.hpp ****       return cont.erase(std::remove(std::begin(cont), std::end(cont), std::forward<T>(t)), std::end
 106:Cpp/algorithm.hpp ****     }
 107:Cpp/algorithm.hpp **** 
 108:Cpp/algorithm.hpp ****     /// Erase elements from container by predicate
 109:Cpp/algorithm.hpp ****     ///
 110:Cpp/algorithm.hpp ****     /// @param cont Must be a container with a `erase(Iter, Iter)` member function, erasing the
 111:Cpp/algorithm.hpp ****     /// items between the two iterators. Most mutable standard containers qualify.
 112:Cpp/algorithm.hpp ****     ///
 113:Cpp/algorithm.hpp ****     /// @param pred A predicate that takes a element in the container. Each element for which this
 114:Cpp/algorithm.hpp ****     /// predicate returns true will be erased from the container.
 115:Cpp/algorithm.hpp ****     ///
 116:Cpp/algorithm.hpp ****     /// @returns whatever `cont.erase()` returns. For standard containers, this is the iterator
 117:Cpp/algorithm.hpp ****     /// pointing to the element after the last erased one.
 118:Cpp/algorithm.hpp ****     template<typename Container, typename Pred>
 119:Cpp/algorithm.hpp ****     auto erase_if(Container&& cont, Pred&& pred)
 120:Cpp/algorithm.hpp ****     {
 121:Cpp/algorithm.hpp ****       return cont.erase(std::remove_if(std::begin(cont), std::end(cont), std::forward<Pred>(pred)),
 122:Cpp/algorithm.hpp ****     }
 123:Cpp/algorithm.hpp **** 
 124:Cpp/algorithm.hpp ****     /*
 125:Cpp/algorithm.hpp ****      * Range algorithms
 126:Cpp/algorithm.hpp ****      */
 127:Cpp/algorithm.hpp **** 
 128:Cpp/algorithm.hpp ****     template<typename InputIt, typename Size, typename F>
 129:Cpp/algorithm.hpp ****     constexpr InputIt for_each_n(InputIt&& first, Size n, F&& f)
 130:Cpp/algorithm.hpp ****     {
 131:Cpp/algorithm.hpp ****       for (Size i = 0; i < n; ++first, ++i) {
 132:Cpp/algorithm.hpp ****         std::invoke(f, *first);
 133:Cpp/algorithm.hpp ****       }
 134:Cpp/algorithm.hpp ****       return first;
 135:Cpp/algorithm.hpp ****     }
 136:Cpp/algorithm.hpp **** 
 137:Cpp/algorithm.hpp ****     /// `for_each` with access to an index value. Function called as `f(*it, i)`
ARM GAS  /tmp/ccU23Djm.s 			page 112


 138:Cpp/algorithm.hpp ****     ///
 139:Cpp/algorithm.hpp ****     /// For each item in range `[first, last)`, invoke `f` with args
 140:Cpp/algorithm.hpp ****     /// `i, *iter` where `iter` is the current iterator, and `i` is
 141:Cpp/algorithm.hpp ****     /// an incrementing value, starting at zero. Use this instead of
 142:Cpp/algorithm.hpp ****     /// raw indexed loops wherever possible.
 143:Cpp/algorithm.hpp ****     ///
 144:Cpp/algorithm.hpp ****     /// \param first Input iterator to the begining of the range
 145:Cpp/algorithm.hpp ****     /// \param last Input iterator to the end of the range
 146:Cpp/algorithm.hpp ****     /// \param f Must be invocable with arguments `std::size_t`, `value_type`
 147:Cpp/algorithm.hpp ****     /// \returns The number of iterations performed
 148:Cpp/algorithm.hpp ****     template<typename InputIt, typename F>
 149:Cpp/algorithm.hpp ****     constexpr std::size_t indexed_for_each(InputIt&& first, InputIt&& last, F&& f)
 150:Cpp/algorithm.hpp ****     {
 151:Cpp/algorithm.hpp ****       std::size_t i = 0;
 152:Cpp/algorithm.hpp ****       std::for_each(std::forward<InputIt>(first), std::forward<InputIt>(last), [&](auto&& a) {
 153:Cpp/algorithm.hpp ****         std::invoke(f, i, a);
 154:Cpp/algorithm.hpp ****         i++;
 155:Cpp/algorithm.hpp ****       });
 156:Cpp/algorithm.hpp ****       return i;
 157:Cpp/algorithm.hpp ****     }
 158:Cpp/algorithm.hpp **** 
 159:Cpp/algorithm.hpp ****     template<typename Rng, typename F>
 160:Cpp/algorithm.hpp ****     constexpr std::size_t indexed_for_each(Rng&& rng, F&& f)
 161:Cpp/algorithm.hpp ****     {
 162:Cpp/algorithm.hpp ****       return indexed_for(std::begin(rng), std::end(rng), std::forward<F>(f));
 163:Cpp/algorithm.hpp ****     }
 164:Cpp/algorithm.hpp **** 
 165:Cpp/algorithm.hpp **** 
 166:Cpp/algorithm.hpp ****     /// `for_each_n` with access to an index value. Function called as `f(*it, i)`
 167:Cpp/algorithm.hpp ****     ///
 168:Cpp/algorithm.hpp ****     /// for `n` iterations, invoke `f` with args `*iter, i`
 169:Cpp/algorithm.hpp ****     /// where `iter` is the current iterator starting with `first`,
 170:Cpp/algorithm.hpp ****     /// and `i` is an incrementing value, starting at zero.
 171:Cpp/algorithm.hpp ****     /// Use this instead of raw indexed loops wherever possible.
 172:Cpp/algorithm.hpp ****     ///
 173:Cpp/algorithm.hpp ****     /// \param first Input iterator to the begining of the range
 174:Cpp/algorithm.hpp ****     /// \param n Number of iterations to go through
 175:Cpp/algorithm.hpp ****     /// \param f Must be invocable with arguments `value_type`, `std::size_t`
 176:Cpp/algorithm.hpp ****     /// \returns An iterator one past the last one visited
 177:Cpp/algorithm.hpp ****     template<class InputIt, class Size, class F>
 178:Cpp/algorithm.hpp ****     constexpr InputIt indexed_for_n(InputIt first, Size n, F&& f)
 179:Cpp/algorithm.hpp ****     {
 180:Cpp/algorithm.hpp ****       for (Size i = 0; i < n; ++first, ++i) {
 181:Cpp/algorithm.hpp ****         std::invoke(f, *first, i);
 182:Cpp/algorithm.hpp ****       }
 183:Cpp/algorithm.hpp ****       return first;
 184:Cpp/algorithm.hpp ****     }
 185:Cpp/algorithm.hpp **** 
 186:Cpp/algorithm.hpp ****     template<class Rng, class Size, class F>
 187:Cpp/algorithm.hpp ****     constexpr std::size_t indexed_for_n(Rng&& rng, Size n, F&& f)
 188:Cpp/algorithm.hpp ****     {
 189:Cpp/algorithm.hpp ****       return indexed_for_n(std::begin(rng), std::end(rng), n, std::forward<F>(f));
 190:Cpp/algorithm.hpp ****     }
 191:Cpp/algorithm.hpp **** 
 192:Cpp/algorithm.hpp ****     template<typename Iter1, typename Iter2, typename F>
 193:Cpp/algorithm.hpp ****     constexpr void for_both(Iter1&& f1, Iter1&& l1, Iter2&& f2, Iter2&& l2, F&& f)
 194:Cpp/algorithm.hpp ****     {
ARM GAS  /tmp/ccU23Djm.s 			page 113


 195:Cpp/algorithm.hpp ****       Iter1 i1 = std::forward<Iter1>(f1);
 196:Cpp/algorithm.hpp ****       Iter2 i2 = std::forward<Iter2>(f2);
 197:Cpp/algorithm.hpp ****       for (; i1 != l1 && i2 != l2; i1++, i2++) {
 198:Cpp/algorithm.hpp ****         std::invoke(f, *i1, *i2);
 199:Cpp/algorithm.hpp ****       }
 200:Cpp/algorithm.hpp ****     }
 201:Cpp/algorithm.hpp **** 
 202:Cpp/algorithm.hpp ****     template<typename Rng1, typename Rng2, typename F>
 203:Cpp/algorithm.hpp ****     constexpr void for_both(Rng1&& r1, Rng2&& r2, F&& f)
 204:Cpp/algorithm.hpp ****     {
 205:Cpp/algorithm.hpp ****       for_both(std::begin(r1), std::end(r1), std::begin(r2), std::end(r2), std::forward<F>(f));
 206:Cpp/algorithm.hpp ****     }
 207:Cpp/algorithm.hpp **** 
 208:Cpp/algorithm.hpp ****     /// \defgroup container_algos Container Standard Algorithms
 209:Cpp/algorithm.hpp ****     ///
 210:Cpp/algorithm.hpp ****     /// These are the standard library algorithms wrapped in container-based interfaces, instead of
 211:Cpp/algorithm.hpp ****     /// iterator based ones.
 212:Cpp/algorithm.hpp ****     ///
 213:Cpp/algorithm.hpp ****     /// What this basically means is, this code
 214:Cpp/algorithm.hpp ****     /// ```cpp
 215:Cpp/algorithm.hpp ****     /// auto found = std::find(std::begin(vec), std::end(vec), 42);
 216:Cpp/algorithm.hpp ****     /// ```
 217:Cpp/algorithm.hpp ****     /// becomes
 218:Cpp/algorithm.hpp ****     /// ```cpp
 219:Cpp/algorithm.hpp ****     /// auto found = util::find(vec, 42);
 220:Cpp/algorithm.hpp ****     /// ```
 221:Cpp/algorithm.hpp ****     ///
 222:Cpp/algorithm.hpp ****     /// The wrappers call `std::begin` and `std::end` or use
 223:Cpp/algorithm.hpp ****     /// [ADL](https://en.cppreference.com/w/cpp/language/adl) to find free `begin(cont)` and
 224:Cpp/algorithm.hpp ****     /// `end(cont)` functions.
 225:Cpp/algorithm.hpp ****     ///
 226:Cpp/algorithm.hpp ****     /// For documentation for the individual algorithms, refer to
 227:Cpp/algorithm.hpp ****     /// https://en.cppreference.com/w/cpp/header/algorithm
 228:Cpp/algorithm.hpp ****     ///
 229:Cpp/algorithm.hpp ****     /// All of these are defined in the \ref otto::util::algorithm namespace, which also includes
 230:Cpp/algorithm.hpp ****     /// some custom algorithms, matching a similar interface.
 231:Cpp/algorithm.hpp ****     /// \{
 232:Cpp/algorithm.hpp **** 
 233:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::accumulate()
 234:Cpp/algorithm.hpp ****     template<typename Cont, typename T>
 235:Cpp/algorithm.hpp ****     constexpr auto accumulate(Cont&& cont, T&& init)
 236:Cpp/algorithm.hpp ****     {
 237:Cpp/algorithm.hpp ****       // TODO C++20: std::accumulate is constexpr
 238:Cpp/algorithm.hpp ****       using std::begin, std::end;
 239:Cpp/algorithm.hpp ****       auto first = begin(cont);
 240:Cpp/algorithm.hpp ****       auto last = end(cont);
 241:Cpp/algorithm.hpp ****       for (; first != last; ++first) init = init + *first;
 242:Cpp/algorithm.hpp ****       return init;
 243:Cpp/algorithm.hpp ****     }
 244:Cpp/algorithm.hpp **** 
 245:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::accumulate()
 246:Cpp/algorithm.hpp ****     template<typename Cont, typename T, typename BinaryOperation>
 247:Cpp/algorithm.hpp ****     constexpr auto accumulate(Cont&& cont, T&& init, BinaryOperation&& op)
 248:Cpp/algorithm.hpp ****     {
 249:Cpp/algorithm.hpp ****       // TODO C++20: std::accumulate is constexpr
 250:Cpp/algorithm.hpp ****       using std::begin, std::end;
 251:Cpp/algorithm.hpp ****       auto first = begin(cont);
ARM GAS  /tmp/ccU23Djm.s 			page 114


 252:Cpp/algorithm.hpp ****       auto last = end(cont);
 253:Cpp/algorithm.hpp ****       for (; first != last; ++first) init = op(init, *first);
 254:Cpp/algorithm.hpp ****       return init;
 255:Cpp/algorithm.hpp ****     }
 256:Cpp/algorithm.hpp **** 
 257:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::for_each()
 258:Cpp/algorithm.hpp ****     template<typename Cont, typename UnaryOperation>
 259:Cpp/algorithm.hpp ****     constexpr void for_each(Cont&& cont, UnaryOperation&& op)
 260:Cpp/algorithm.hpp ****     {
 261:Cpp/algorithm.hpp ****       using std::begin, std::end;
 262:Cpp/algorithm.hpp ****       auto first = begin(cont);
 263:Cpp/algorithm.hpp ****       auto last = end(cont);
 264:Cpp/algorithm.hpp ****       for (; first != last; ++first) std::invoke(op, *first);
 265:Cpp/algorithm.hpp ****     }
 266:Cpp/algorithm.hpp **** 
 267:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::adjacent_difference()
 268:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator>
 269:Cpp/algorithm.hpp ****     decltype(auto) adjacent_difference(Cont&& cont, OutputIterator&& first)
 270:Cpp/algorithm.hpp ****     {
 271:Cpp/algorithm.hpp ****       using std::begin;
 272:Cpp/algorithm.hpp ****       using std::end;
 273:Cpp/algorithm.hpp ****       return std::adjacent_difference(begin(cont), end(cont), std::forward<OutputIterator>(first));
 274:Cpp/algorithm.hpp ****     }
 275:Cpp/algorithm.hpp **** 
 276:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::prev_permutation()
 277:Cpp/algorithm.hpp ****     template<typename Cont>
 278:Cpp/algorithm.hpp ****     decltype(auto) prev_permutation(Cont&& cont)
 279:Cpp/algorithm.hpp ****     {
 280:Cpp/algorithm.hpp ****       using std::begin;
 281:Cpp/algorithm.hpp ****       using std::end;
 282:Cpp/algorithm.hpp ****       return std::prev_permutation(begin(cont), end(cont));
 283:Cpp/algorithm.hpp ****     }
 284:Cpp/algorithm.hpp **** 
 285:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::prev_permutation()
 286:Cpp/algorithm.hpp ****     template<typename Cont, typename Compare>
 287:Cpp/algorithm.hpp ****     decltype(auto) prev_permutation(Cont&& cont, Compare&& comp)
 288:Cpp/algorithm.hpp ****     {
 289:Cpp/algorithm.hpp ****       using std::begin;
 290:Cpp/algorithm.hpp ****       using std::end;
 291:Cpp/algorithm.hpp ****       return std::prev_permutation(begin(cont), end(cont), std::forward<Compare>(comp));
 292:Cpp/algorithm.hpp ****     }
 293:Cpp/algorithm.hpp **** 
 294:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::push_heap()
 295:Cpp/algorithm.hpp ****     template<typename Cont>
 296:Cpp/algorithm.hpp ****     decltype(auto) push_heap(Cont&& cont)
 297:Cpp/algorithm.hpp ****     {
 298:Cpp/algorithm.hpp ****       using std::begin;
 299:Cpp/algorithm.hpp ****       using std::end;
 300:Cpp/algorithm.hpp ****       return std::push_heap(begin(cont), end(cont));
 301:Cpp/algorithm.hpp ****     }
 302:Cpp/algorithm.hpp **** 
 303:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::push_heap()
 304:Cpp/algorithm.hpp ****     template<typename Cont, typename Compare>
 305:Cpp/algorithm.hpp ****     decltype(auto) push_heap(Cont&& cont, Compare&& comp)
 306:Cpp/algorithm.hpp ****     {
 307:Cpp/algorithm.hpp ****       using std::begin;
 308:Cpp/algorithm.hpp ****       using std::end;
ARM GAS  /tmp/ccU23Djm.s 			page 115


 309:Cpp/algorithm.hpp ****       return std::push_heap(begin(cont), end(cont), std::forward<Compare>(comp));
 310:Cpp/algorithm.hpp ****     }
 311:Cpp/algorithm.hpp **** 
 312:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::remove()
 313:Cpp/algorithm.hpp ****     template<typename Cont, typename T>
 314:Cpp/algorithm.hpp ****     decltype(auto) remove(Cont&& cont, T&& value)
 315:Cpp/algorithm.hpp ****     {
 316:Cpp/algorithm.hpp ****       using std::begin;
 317:Cpp/algorithm.hpp ****       using std::end;
 318:Cpp/algorithm.hpp ****       return std::remove(begin(cont), end(cont), std::forward<T>(value));
 319:Cpp/algorithm.hpp ****     }
 320:Cpp/algorithm.hpp **** 
 321:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::remove_copy()
 322:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator, typename T>
 323:Cpp/algorithm.hpp ****     decltype(auto) remove_copy(Cont&& cont, OutputIterator&& first, T&& value)
 324:Cpp/algorithm.hpp ****     {
 325:Cpp/algorithm.hpp ****       using std::begin;
 326:Cpp/algorithm.hpp ****       using std::end;
 327:Cpp/algorithm.hpp ****       return std::remove_copy(begin(cont), end(cont), std::forward<OutputIterator>(first), std::for
 328:Cpp/algorithm.hpp ****     }
 329:Cpp/algorithm.hpp **** 
 330:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::remove_copy_if()
 331:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator, typename UnaryPredicate>
 332:Cpp/algorithm.hpp ****     decltype(auto) remove_copy_if(Cont&& cont, OutputIterator&& first, UnaryPredicate&& p)
 333:Cpp/algorithm.hpp ****     {
 334:Cpp/algorithm.hpp ****       using std::begin;
 335:Cpp/algorithm.hpp ****       using std::end;
 336:Cpp/algorithm.hpp ****       return std::remove_copy_if(begin(cont), end(cont), std::forward<OutputIterator>(first),
 337:Cpp/algorithm.hpp ****                                  std::forward<UnaryPredicate>(p));
 338:Cpp/algorithm.hpp ****     }
 339:Cpp/algorithm.hpp **** 
 340:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::remove_if()
 341:Cpp/algorithm.hpp ****     template<typename Cont, typename UnaryPredicate>
 342:Cpp/algorithm.hpp ****     decltype(auto) remove_if(Cont&& cont, UnaryPredicate&& p)
 343:Cpp/algorithm.hpp ****     {
 344:Cpp/algorithm.hpp ****       using std::begin;
 345:Cpp/algorithm.hpp ****       using std::end;
 346:Cpp/algorithm.hpp ****       return std::remove_if(begin(cont), end(cont), std::forward<UnaryPredicate>(p));
 347:Cpp/algorithm.hpp ****     }
 348:Cpp/algorithm.hpp **** 
 349:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::replace()
 350:Cpp/algorithm.hpp ****     template<typename Cont, typename T, typename T2>
 351:Cpp/algorithm.hpp ****     decltype(auto) replace(Cont&& cont, T&& old_value, T2&& new_value)
 352:Cpp/algorithm.hpp ****     {
 353:Cpp/algorithm.hpp ****       using std::begin;
 354:Cpp/algorithm.hpp ****       using std::end;
 355:Cpp/algorithm.hpp ****       return std::replace(begin(cont), end(cont), std::forward<T>(old_value), std::forward<T2>(new_
 356:Cpp/algorithm.hpp ****     }
 357:Cpp/algorithm.hpp **** 
 358:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::replace_copy()
 359:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator, typename T, typename T2>
 360:Cpp/algorithm.hpp ****     decltype(auto) replace_copy(Cont&& cont, OutputIterator&& first, T&& old_value, T2&& new_value)
 361:Cpp/algorithm.hpp ****     {
 362:Cpp/algorithm.hpp ****       using std::begin;
 363:Cpp/algorithm.hpp ****       using std::end;
 364:Cpp/algorithm.hpp ****       return std::replace_copy(begin(cont), end(cont), std::forward<OutputIterator>(first), std::fo
 365:Cpp/algorithm.hpp ****                                std::forward<T2>(old_value));
ARM GAS  /tmp/ccU23Djm.s 			page 116


 366:Cpp/algorithm.hpp ****     }
 367:Cpp/algorithm.hpp **** 
 368:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::replace_copy_if()
 369:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator, typename UnaryPredicate, typename T>
 370:Cpp/algorithm.hpp ****     decltype(auto) replace_copy_if(Cont&& cont, OutputIterator&& first, UnaryPredicate&& p, T&& new
 371:Cpp/algorithm.hpp ****     {
 372:Cpp/algorithm.hpp ****       using std::begin;
 373:Cpp/algorithm.hpp ****       using std::end;
 374:Cpp/algorithm.hpp ****       return std::replace_copy(begin(cont), end(cont), std::forward<OutputIterator>(first),
 375:Cpp/algorithm.hpp ****                                std::forward<UnaryPredicate>(p), std::forward<T>(new_value));
 376:Cpp/algorithm.hpp ****     }
 377:Cpp/algorithm.hpp **** 
 378:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::replace_if()
 379:Cpp/algorithm.hpp ****     template<typename Cont, typename UnaryPredicate, typename T>
 380:Cpp/algorithm.hpp ****     decltype(auto) replace_if(Cont&& cont, UnaryPredicate&& p, T&& new_value)
 381:Cpp/algorithm.hpp ****     {
 382:Cpp/algorithm.hpp ****       using std::begin;
 383:Cpp/algorithm.hpp ****       using std::end;
 384:Cpp/algorithm.hpp ****       return std::replace_if(begin(cont), end(cont), std::forward<UnaryPredicate>(p), std::forward<
 385:Cpp/algorithm.hpp ****     }
 386:Cpp/algorithm.hpp **** 
 387:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::reverse()
 388:Cpp/algorithm.hpp ****     template<typename Cont>
 389:Cpp/algorithm.hpp ****     decltype(auto) reverse(Cont&& cont)
 390:Cpp/algorithm.hpp ****     {
 391:Cpp/algorithm.hpp ****       using std::begin;
 392:Cpp/algorithm.hpp ****       using std::end;
 393:Cpp/algorithm.hpp ****       return std::reverse(begin(cont), end(cont));
 394:Cpp/algorithm.hpp ****     }
 395:Cpp/algorithm.hpp **** 
 396:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::reverse_copy()
 397:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator>
 398:Cpp/algorithm.hpp ****     decltype(auto) reverse_copy(Cont&& cont, OutputIterator&& first)
 399:Cpp/algorithm.hpp ****     {
 400:Cpp/algorithm.hpp ****       using std::begin;
 401:Cpp/algorithm.hpp ****       using std::end;
 402:Cpp/algorithm.hpp ****       return std::reverse_copy(begin(cont), end(cont), std::forward<OutputIterator>(first));
 403:Cpp/algorithm.hpp ****     }
 404:Cpp/algorithm.hpp **** 
 405:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::rotate()
 406:Cpp/algorithm.hpp ****     template<typename Cont, typename ForwardIterator>
 407:Cpp/algorithm.hpp ****     decltype(auto) rotate(Cont&& cont, ForwardIterator&& new_first)
 408:Cpp/algorithm.hpp ****     {
 409:Cpp/algorithm.hpp ****       using std::begin;
 410:Cpp/algorithm.hpp ****       using std::end;
 411:Cpp/algorithm.hpp ****       return std::rotate(begin(cont), std::forward<ForwardIterator>(new_first), end(cont));
 412:Cpp/algorithm.hpp ****     }
 413:Cpp/algorithm.hpp **** 
 414:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::rotate_copy()
 415:Cpp/algorithm.hpp ****     template<typename Cont, typename ForwardIterator, typename OutputIterator>
 416:Cpp/algorithm.hpp ****     decltype(auto) rotate_copy(Cont&& cont, ForwardIterator&& new_first, OutputIterator&& first)
 417:Cpp/algorithm.hpp ****     {
 418:Cpp/algorithm.hpp ****       using std::begin;
 419:Cpp/algorithm.hpp ****       using std::end;
 420:Cpp/algorithm.hpp ****       return std::rotate_copy(begin(cont), std::forward<ForwardIterator>(new_first), end(cont),
 421:Cpp/algorithm.hpp ****                               std::forward<OutputIterator>(first));
 422:Cpp/algorithm.hpp ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 117


 423:Cpp/algorithm.hpp **** 
 424:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::search()
 425:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2>
 426:Cpp/algorithm.hpp ****     decltype(auto) search(Cont&& cont, Cont2&& cont2)
 427:Cpp/algorithm.hpp ****     {
 428:Cpp/algorithm.hpp ****       using std::begin;
 429:Cpp/algorithm.hpp ****       using std::end;
 430:Cpp/algorithm.hpp ****       return std::search(begin(cont), end(cont), begin(cont2), end(cont2));
 431:Cpp/algorithm.hpp ****     }
 432:Cpp/algorithm.hpp **** 
 433:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::search()
 434:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename BinaryPredicate>
 435:Cpp/algorithm.hpp ****     decltype(auto) search(Cont&& cont, Cont2&& cont2, BinaryPredicate&& p)
 436:Cpp/algorithm.hpp ****     {
 437:Cpp/algorithm.hpp ****       using std::begin;
 438:Cpp/algorithm.hpp ****       using std::end;
 439:Cpp/algorithm.hpp ****       return std::search(begin(cont), end(cont), begin(cont2), end(cont2), std::forward<BinaryPredi
 440:Cpp/algorithm.hpp ****     }
 441:Cpp/algorithm.hpp **** 
 442:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::search_n()
 443:Cpp/algorithm.hpp ****     template<typename Cont, typename Size, typename T>
 444:Cpp/algorithm.hpp ****     decltype(auto) search_n(Cont&& cont, Size count, T&& value)
 445:Cpp/algorithm.hpp ****     {
 446:Cpp/algorithm.hpp ****       using std::begin;
 447:Cpp/algorithm.hpp ****       using std::end;
 448:Cpp/algorithm.hpp ****       return std::search_n(begin(cont), end(cont), count, std::forward<T>(value));
 449:Cpp/algorithm.hpp ****     }
 450:Cpp/algorithm.hpp **** 
 451:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::search_n()
 452:Cpp/algorithm.hpp ****     template<typename Cont, typename Size, typename T, typename BinaryPredicate>
 453:Cpp/algorithm.hpp ****     decltype(auto) search_n(Cont&& cont, Size count, T&& value, BinaryPredicate&& p)
 454:Cpp/algorithm.hpp ****     {
 455:Cpp/algorithm.hpp ****       using std::begin;
 456:Cpp/algorithm.hpp ****       using std::end;
 457:Cpp/algorithm.hpp ****       return std::search_n(begin(cont), end(cont), count, std::forward<T>(value), std::forward<Bina
 458:Cpp/algorithm.hpp ****     }
 459:Cpp/algorithm.hpp **** 
 460:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_difference()
 461:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator>
 462:Cpp/algorithm.hpp ****     decltype(auto) set_difference(Cont&& cont, Cont2&& cont2, OutputIterator&& first)
 463:Cpp/algorithm.hpp ****     {
 464:Cpp/algorithm.hpp ****       using std::begin;
 465:Cpp/algorithm.hpp ****       using std::end;
 466:Cpp/algorithm.hpp ****       return std::set_difference(begin(cont), end(cont), begin(cont2), end(cont2), std::forward<Out
 467:Cpp/algorithm.hpp ****     }
 468:Cpp/algorithm.hpp **** 
 469:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_difference()
 470:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator, typename Compare>
 471:Cpp/algorithm.hpp ****     decltype(auto) set_difference(Cont&& cont, Cont2&& cont2, OutputIterator&& first, Compare&& com
 472:Cpp/algorithm.hpp ****     {
 473:Cpp/algorithm.hpp ****       using std::begin;
 474:Cpp/algorithm.hpp ****       using std::end;
 475:Cpp/algorithm.hpp ****       return std::set_difference(begin(cont), end(cont), begin(cont2), end(cont2), std::forward<Out
 476:Cpp/algorithm.hpp ****                                  std::forward<Compare>(comp));
 477:Cpp/algorithm.hpp ****     }
 478:Cpp/algorithm.hpp **** 
 479:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_intersection()
ARM GAS  /tmp/ccU23Djm.s 			page 118


 480:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator>
 481:Cpp/algorithm.hpp ****     decltype(auto) set_intersection(Cont&& cont, Cont2&& cont2, OutputIterator&& first)
 482:Cpp/algorithm.hpp ****     {
 483:Cpp/algorithm.hpp ****       using std::begin;
 484:Cpp/algorithm.hpp ****       using std::end;
 485:Cpp/algorithm.hpp ****       return std::set_intersection(begin(cont), end(cont), begin(cont2), end(cont2),
 486:Cpp/algorithm.hpp ****                                    std::forward<OutputIterator>(first));
 487:Cpp/algorithm.hpp ****     }
 488:Cpp/algorithm.hpp **** 
 489:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_intersection()
 490:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator, typename Compare>
 491:Cpp/algorithm.hpp ****     decltype(auto) set_intersection(Cont&& cont, Cont2&& cont2, OutputIterator&& first, Compare&& c
 492:Cpp/algorithm.hpp ****     {
 493:Cpp/algorithm.hpp ****       using std::begin;
 494:Cpp/algorithm.hpp ****       using std::end;
 495:Cpp/algorithm.hpp ****       return std::set_intersection(begin(cont), end(cont), begin(cont2), end(cont2),
 496:Cpp/algorithm.hpp ****                                    std::forward<OutputIterator>(first), std::forward<Compare>(comp)
 497:Cpp/algorithm.hpp ****     }
 498:Cpp/algorithm.hpp **** 
 499:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_symmetric_difference()
 500:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator>
 501:Cpp/algorithm.hpp ****     decltype(auto) set_symmetric_difference(Cont&& cont, Cont2&& cont2, OutputIterator&& first)
 502:Cpp/algorithm.hpp ****     {
 503:Cpp/algorithm.hpp ****       using std::begin;
 504:Cpp/algorithm.hpp ****       using std::end;
 505:Cpp/algorithm.hpp ****       return std::set_symmetric_difference(begin(cont), end(cont), begin(cont2), end(cont2),
 506:Cpp/algorithm.hpp ****                                            std::forward<OutputIterator>(first));
 507:Cpp/algorithm.hpp ****     }
 508:Cpp/algorithm.hpp **** 
 509:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_symmetric_difference()
 510:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator, typename Compare>
 511:Cpp/algorithm.hpp ****     decltype(auto) set_symmetric_difference(Cont&& cont, Cont2&& cont2, OutputIterator&& first, Com
 512:Cpp/algorithm.hpp ****     {
 513:Cpp/algorithm.hpp ****       using std::begin;
 514:Cpp/algorithm.hpp ****       using std::end;
 515:Cpp/algorithm.hpp ****       return std::set_symmetric_difference(begin(cont), end(cont), begin(cont2), end(cont2),
 516:Cpp/algorithm.hpp ****                                            std::forward<OutputIterator>(first), std::forward<Compar
 517:Cpp/algorithm.hpp ****     }
 518:Cpp/algorithm.hpp **** 
 519:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_union()
 520:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator>
 521:Cpp/algorithm.hpp ****     decltype(auto) set_union(Cont&& cont, Cont2&& cont2, OutputIterator&& first)
 522:Cpp/algorithm.hpp ****     {
 523:Cpp/algorithm.hpp ****       using std::begin;
 524:Cpp/algorithm.hpp ****       using std::end;
 525:Cpp/algorithm.hpp ****       return std::set_union(begin(cont), end(cont), begin(cont2), end(cont2), std::forward<OutputIt
 526:Cpp/algorithm.hpp ****     }
 527:Cpp/algorithm.hpp **** 
 528:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::set_union()
 529:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename OutputIterator, typename Compare>
 530:Cpp/algorithm.hpp ****     decltype(auto) set_union(Cont&& cont, Cont2&& cont2, OutputIterator&& first, Compare&& comp)
 531:Cpp/algorithm.hpp ****     {
 532:Cpp/algorithm.hpp ****       using std::begin;
 533:Cpp/algorithm.hpp ****       using std::end;
 534:Cpp/algorithm.hpp ****       return std::set_union(begin(cont), end(cont), begin(cont2), end(cont2), std::forward<OutputIt
 535:Cpp/algorithm.hpp ****                             std::forward<Compare>(comp));
 536:Cpp/algorithm.hpp ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 119


 537:Cpp/algorithm.hpp **** 
 538:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::shuffle()
 539:Cpp/algorithm.hpp ****     template<typename Cont, typename UniformRandomNumberGenerator>
 540:Cpp/algorithm.hpp ****     decltype(auto) shuffle(Cont&& cont, UniformRandomNumberGenerator&& g)
 541:Cpp/algorithm.hpp ****     {
 542:Cpp/algorithm.hpp ****       using std::begin;
 543:Cpp/algorithm.hpp ****       using std::end;
 544:Cpp/algorithm.hpp ****       return std::shuffle(begin(cont), end(cont), std::forward<UniformRandomNumberGenerator>(g));
 545:Cpp/algorithm.hpp ****     }
 546:Cpp/algorithm.hpp **** 
 547:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::sort()
 548:Cpp/algorithm.hpp ****     template<typename Cont>
 549:Cpp/algorithm.hpp ****     decltype(auto) sort(Cont&& cont)
 550:Cpp/algorithm.hpp ****     {
 551:Cpp/algorithm.hpp ****       using std::begin;
 552:Cpp/algorithm.hpp ****       using std::end;
 553:Cpp/algorithm.hpp ****       return std::sort(begin(cont), end(cont));
 554:Cpp/algorithm.hpp ****     }
 555:Cpp/algorithm.hpp **** 
 556:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::sort()
 557:Cpp/algorithm.hpp ****     template<typename Cont, typename Compare>
 558:Cpp/algorithm.hpp ****     decltype(auto) sort(Cont&& cont, Compare&& comp)
 559:Cpp/algorithm.hpp ****     {
 560:Cpp/algorithm.hpp ****       using std::begin;
 561:Cpp/algorithm.hpp ****       using std::end;
 562:Cpp/algorithm.hpp ****       return std::sort(begin(cont), end(cont), std::forward<Compare>(comp));
 563:Cpp/algorithm.hpp ****     }
 564:Cpp/algorithm.hpp **** 
 565:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::sort_heap()
 566:Cpp/algorithm.hpp ****     template<typename Cont>
 567:Cpp/algorithm.hpp ****     decltype(auto) sort_heap(Cont&& cont)
 568:Cpp/algorithm.hpp ****     {
 569:Cpp/algorithm.hpp ****       using std::begin;
 570:Cpp/algorithm.hpp ****       using std::end;
 571:Cpp/algorithm.hpp ****       return std::sort_heap(begin(cont), end(cont));
 572:Cpp/algorithm.hpp ****     }
 573:Cpp/algorithm.hpp **** 
 574:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::sort_heap()
 575:Cpp/algorithm.hpp ****     template<typename Cont, typename Compare>
 576:Cpp/algorithm.hpp ****     decltype(auto) sort_heap(Cont&& cont, Compare&& comp)
 577:Cpp/algorithm.hpp ****     {
 578:Cpp/algorithm.hpp ****       using std::begin;
 579:Cpp/algorithm.hpp ****       using std::end;
 580:Cpp/algorithm.hpp ****       return std::sort_heap(begin(cont), end(cont), std::forward<Compare>(comp));
 581:Cpp/algorithm.hpp ****     }
 582:Cpp/algorithm.hpp **** 
 583:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::stable_partition()
 584:Cpp/algorithm.hpp ****     template<typename Cont, typename UnaryPredicate>
 585:Cpp/algorithm.hpp ****     decltype(auto) stable_partition(Cont&& cont, UnaryPredicate&& p)
 586:Cpp/algorithm.hpp ****     {
 587:Cpp/algorithm.hpp ****       using std::begin;
 588:Cpp/algorithm.hpp ****       using std::end;
 589:Cpp/algorithm.hpp ****       return std::stable_partition(begin(cont), end(cont), std::forward<UnaryPredicate>(p));
 590:Cpp/algorithm.hpp ****     }
 591:Cpp/algorithm.hpp **** 
 592:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::stable_sort()
 593:Cpp/algorithm.hpp ****     template<typename Cont>
ARM GAS  /tmp/ccU23Djm.s 			page 120


 594:Cpp/algorithm.hpp ****     decltype(auto) stable_sort(Cont&& cont)
 595:Cpp/algorithm.hpp ****     {
 596:Cpp/algorithm.hpp ****       using std::begin;
 597:Cpp/algorithm.hpp ****       using std::end;
 598:Cpp/algorithm.hpp ****       return std::stable_sort(begin(cont), end(cont));
 599:Cpp/algorithm.hpp ****     }
 600:Cpp/algorithm.hpp **** 
 601:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::stable_sort()
 602:Cpp/algorithm.hpp ****     template<typename Cont, typename Compare>
 603:Cpp/algorithm.hpp ****     decltype(auto) stable_sort(Cont&& cont, Compare&& comp)
 604:Cpp/algorithm.hpp ****     {
 605:Cpp/algorithm.hpp ****       using std::begin;
 606:Cpp/algorithm.hpp ****       using std::end;
 607:Cpp/algorithm.hpp ****       return std::stable_sort(begin(cont), end(cont), std::forward<Compare>(comp));
 608:Cpp/algorithm.hpp ****     }
 609:Cpp/algorithm.hpp **** 
 610:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::swap_ranges()
 611:Cpp/algorithm.hpp ****     template<typename Cont, typename ForwardIterator>
 612:Cpp/algorithm.hpp ****     decltype(auto) swap_ranges(Cont&& cont, ForwardIterator&& first)
 613:Cpp/algorithm.hpp ****     {
 614:Cpp/algorithm.hpp ****       using std::begin;
 615:Cpp/algorithm.hpp ****       using std::end;
 616:Cpp/algorithm.hpp ****       return std::swap_ranges(begin(cont), end(cont), std::forward<ForwardIterator>(first));
 617:Cpp/algorithm.hpp ****     }
 618:Cpp/algorithm.hpp **** 
 619:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::transform()
 620:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename F>
 621:Cpp/algorithm.hpp ****     auto transform(Cont&& cont, Cont2&& cont2, F&& f) -> decltype(begin(cont2))
 622:Cpp/algorithm.hpp ****     {
 623:Cpp/algorithm.hpp ****       using std::begin;
 624:Cpp/algorithm.hpp ****       using std::end;
 625:Cpp/algorithm.hpp ****       return std::transform(begin(cont), end(cont), begin(cont2), std::forward<F>(f));
 626:Cpp/algorithm.hpp ****     }
 627:Cpp/algorithm.hpp **** 
 628:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::transform()
 629:Cpp/algorithm.hpp ****     template<typename Cont, typename Iter, typename F>
 630:Cpp/algorithm.hpp ****     decltype(auto) transform(Cont&& cont, Iter&& iter, F&& f)
 631:Cpp/algorithm.hpp ****     {
 632:Cpp/algorithm.hpp ****       using std::begin;
 633:Cpp/algorithm.hpp ****       using std::end;
 634:Cpp/algorithm.hpp ****       return std::transform(begin(cont), end(cont), std::forward<Iter>(iter), std::forward<F>(f));
 635:Cpp/algorithm.hpp ****     }
 636:Cpp/algorithm.hpp **** 
 637:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::transform()
 638:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename Cont3, typename BinaryPredicate>
 639:Cpp/algorithm.hpp ****     auto transform(Cont&& cont, Cont2&& cont2, Cont3&& cont3, BinaryPredicate&& f)
 640:Cpp/algorithm.hpp ****       -> decltype(begin(cont2), begin(cont3))
 641:Cpp/algorithm.hpp ****     {
 642:Cpp/algorithm.hpp ****       using std::begin;
 643:Cpp/algorithm.hpp ****       using std::end;
 644:Cpp/algorithm.hpp ****       return std::transform(begin(cont), end(cont), begin(cont2), begin(cont3), std::forward<Binary
 645:Cpp/algorithm.hpp ****     }
 646:Cpp/algorithm.hpp **** 
 647:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::transform()
 648:Cpp/algorithm.hpp ****     template<typename Cont, typename InputIterator, typename Cont3, typename BinaryPredicate>
 649:Cpp/algorithm.hpp ****     auto transform(Cont&& cont, InputIterator&& iter, Cont3&& cont3, BinaryPredicate&& f)
 650:Cpp/algorithm.hpp ****       -> decltype(begin(cont), begin(cont3))
ARM GAS  /tmp/ccU23Djm.s 			page 121


 651:Cpp/algorithm.hpp ****     {
 652:Cpp/algorithm.hpp ****       using std::begin;
 653:Cpp/algorithm.hpp ****       using std::end;
 654:Cpp/algorithm.hpp ****       return std::transform(begin(cont), end(cont), std::forward<InputIterator>(iter), begin(cont3)
 655:Cpp/algorithm.hpp ****                             std::forward<BinaryPredicate>(f));
 656:Cpp/algorithm.hpp ****     }
 657:Cpp/algorithm.hpp **** 
 658:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::transform()
 659:Cpp/algorithm.hpp ****     template<typename Cont, typename Cont2, typename InputIterator, typename BinaryPredicate>
 660:Cpp/algorithm.hpp ****     auto transform(Cont&& cont, Cont2&& cont2, InputIterator&& iter, BinaryPredicate&& f)
 661:Cpp/algorithm.hpp ****       -> decltype(begin(cont), begin(cont2), iter)
 662:Cpp/algorithm.hpp ****     {
 663:Cpp/algorithm.hpp ****       using std::begin;
 664:Cpp/algorithm.hpp ****       using std::end;
 665:Cpp/algorithm.hpp ****       return std::transform(begin(cont), end(cont), begin(cont2), std::forward<InputIterator>(iter)
 666:Cpp/algorithm.hpp ****                             std::forward<BinaryPredicate>(f));
 667:Cpp/algorithm.hpp ****     }
 668:Cpp/algorithm.hpp **** 
 669:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::transform()
 670:Cpp/algorithm.hpp ****     template<typename Cont, typename InputIterator, typename OutputIterator, typename BinaryOperati
 671:Cpp/algorithm.hpp ****     decltype(auto) transform(Cont&& cont, InputIterator&& firstIn, OutputIterator&& firstOut, Binar
 672:Cpp/algorithm.hpp ****     {
 673:Cpp/algorithm.hpp ****       using std::begin;
 674:Cpp/algorithm.hpp ****       using std::end;
 675:Cpp/algorithm.hpp ****       return std::transform(begin(cont), end(cont), std::forward<InputIterator>(firstIn),
 676:Cpp/algorithm.hpp ****                             std::forward<OutputIterator>(firstOut), std::forward<BinaryOperation>(o
 677:Cpp/algorithm.hpp ****     }
 678:Cpp/algorithm.hpp **** 
 679:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::unique()
 680:Cpp/algorithm.hpp ****     template<typename Cont>
 681:Cpp/algorithm.hpp ****     decltype(auto) unique(Cont&& cont)
 682:Cpp/algorithm.hpp ****     {
 683:Cpp/algorithm.hpp ****       using std::begin;
 684:Cpp/algorithm.hpp ****       using std::end;
 685:Cpp/algorithm.hpp ****       return std::unique(begin(cont), end(cont));
 686:Cpp/algorithm.hpp ****     }
 687:Cpp/algorithm.hpp **** 
 688:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::unique()
 689:Cpp/algorithm.hpp ****     template<typename Cont, typename BinaryPredicate>
 690:Cpp/algorithm.hpp ****     decltype(auto) unique(Cont&& cont, BinaryPredicate&& p)
 691:Cpp/algorithm.hpp ****     {
 692:Cpp/algorithm.hpp ****       using std::begin;
 693:Cpp/algorithm.hpp ****       using std::end;
 694:Cpp/algorithm.hpp ****       return std::unique(begin(cont), end(cont), std::forward<BinaryPredicate>(p));
 695:Cpp/algorithm.hpp ****     }
 696:Cpp/algorithm.hpp **** 
 697:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::unique_copy()
 698:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator>
 699:Cpp/algorithm.hpp ****     decltype(auto) unique_copy(Cont&& cont, OutputIterator&& first)
 700:Cpp/algorithm.hpp ****     {
 701:Cpp/algorithm.hpp ****       using std::begin;
 702:Cpp/algorithm.hpp ****       using std::end;
 703:Cpp/algorithm.hpp ****       return std::unique_copy(begin(cont), end(cont), std::forward<OutputIterator>(first));
 704:Cpp/algorithm.hpp ****     }
 705:Cpp/algorithm.hpp **** 
 706:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::unique_copy()
 707:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator, typename BinaryPredicate>
ARM GAS  /tmp/ccU23Djm.s 			page 122


 708:Cpp/algorithm.hpp ****     decltype(auto) unique_copy(Cont&& cont, OutputIterator&& first, BinaryPredicate&& p)
 709:Cpp/algorithm.hpp ****     {
 710:Cpp/algorithm.hpp ****       using std::begin;
 711:Cpp/algorithm.hpp ****       using std::end;
 712:Cpp/algorithm.hpp ****       return std::unique_copy(begin(cont), end(cont), std::forward<OutputIterator>(first),
 713:Cpp/algorithm.hpp ****                               std::forward<BinaryPredicate>(p));
 714:Cpp/algorithm.hpp ****     }
 715:Cpp/algorithm.hpp **** 
 716:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::upper_bound()
 717:Cpp/algorithm.hpp ****     template<typename Cont, typename T>
 718:Cpp/algorithm.hpp ****     decltype(auto) upper_bound(Cont&& cont, T&& value)
 719:Cpp/algorithm.hpp ****     {
 720:Cpp/algorithm.hpp ****       using std::begin;
 721:Cpp/algorithm.hpp ****       using std::end;
 722:Cpp/algorithm.hpp ****       return std::upper_bound(begin(cont), end(cont), std::forward<T>(value));
 723:Cpp/algorithm.hpp ****     }
 724:Cpp/algorithm.hpp **** 
 725:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::upper_bound()
 726:Cpp/algorithm.hpp ****     template<typename Cont, typename T, typename Compare>
 727:Cpp/algorithm.hpp ****     decltype(auto) upper_bound(Cont&& cont, T&& value, Compare&& comp)
 728:Cpp/algorithm.hpp ****     {
 729:Cpp/algorithm.hpp ****       using std::begin;
 730:Cpp/algorithm.hpp ****       using std::end;
 731:Cpp/algorithm.hpp ****       return std::upper_bound(begin(cont), end(cont), std::forward<T>(value), std::forward<Compare>
 732:Cpp/algorithm.hpp ****     }
 733:Cpp/algorithm.hpp **** 
 734:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::copy()
 735:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator>
 736:Cpp/algorithm.hpp ****     decltype(auto) copy(Cont&& cont, OutputIterator&& first)
 3745              		.loc 10 736 20
 3746              		.cfi_startproc
 3747              		@ args = 0, pretend = 0, frame = 8
 3748              		@ frame_needed = 1, uses_anonymous_args = 0
 3749 0000 B0B5     		push	{r4, r5, r7, lr}
 3750              	.LCFI214:
 3751              		.cfi_def_cfa_offset 16
 3752              		.cfi_offset 4, -16
 3753              		.cfi_offset 5, -12
 3754              		.cfi_offset 7, -8
 3755              		.cfi_offset 14, -4
 3756 0002 82B0     		sub	sp, sp, #8
 3757              	.LCFI215:
 3758              		.cfi_def_cfa_offset 24
 3759 0004 00AF     		add	r7, sp, #0
 3760              	.LCFI216:
 3761              		.cfi_def_cfa_register 7
 3762 0006 7860     		str	r0, [r7, #4]
 3763 0008 3960     		str	r1, [r7]
 737:Cpp/algorithm.hpp ****     {
 738:Cpp/algorithm.hpp ****       using std::begin;
 739:Cpp/algorithm.hpp ****       using std::end;
 740:Cpp/algorithm.hpp ****       return std::copy(begin(cont), end(cont), std::forward<OutputIterator>(first));
 3764              		.loc 10 740 23
 3765 000a 7868     		ldr	r0, [r7, #4]
 3766 000c FFF7FEFF 		bl	_ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_
 3767 0010 0446     		mov	r4, r0
 3768 0012 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 123


 3769 0014 FFF7FEFF 		bl	_ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_
 3770 0018 0546     		mov	r5, r0
 3771              		.loc 10 740 76
 3772 001a 3868     		ldr	r0, [r7]
 3773 001c FFF7FEFF 		bl	_ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE
 3774 0020 0346     		mov	r3, r0
 3775              		.loc 10 740 23
 3776 0022 1B68     		ldr	r3, [r3]
 3777 0024 1A46     		mov	r2, r3
 3778 0026 2946     		mov	r1, r5
 3779 0028 2046     		mov	r0, r4
 3780 002a FFF7FEFF 		bl	_ZSt4copyIPKhPhET0_T_S4_S3_
 3781 002e 0346     		mov	r3, r0
 741:Cpp/algorithm.hpp ****     }
 3782              		.loc 10 741 5
 3783 0030 1846     		mov	r0, r3
 3784 0032 0837     		adds	r7, r7, #8
 3785              	.LCFI217:
 3786              		.cfi_def_cfa_offset 16
 3787 0034 BD46     		mov	sp, r7
 3788              	.LCFI218:
 3789              		.cfi_def_cfa_register 13
 3790              		@ sp needed
 3791 0036 B0BD     		pop	{r4, r5, r7, pc}
 3792              		.cfi_endproc
 3793              	.LFE4072:
 3795              		.section	.text._ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE,"axG",%progbits,_ZN4otto3mcu7ws28
 3796              		.align	1
 3797              		.weak	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 3798              		.syntax unified
 3799              		.thumb
 3800              		.thumb_func
 3801              		.fpu fpv4-sp-d16
 3803              	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE:
 3804              	.LFB4071:
  70:Cpp/ws2812b.hpp **** 
  71:Cpp/ws2812b.hpp ****     Ws2812bRef& operator=(RGBColor col)
 3805              		.loc 9 71 17
 3806              		.cfi_startproc
 3807              		@ args = 0, pretend = 0, frame = 16
 3808              		@ frame_needed = 1, uses_anonymous_args = 0
 3809 0000 80B5     		push	{r7, lr}
 3810              	.LCFI219:
 3811              		.cfi_def_cfa_offset 8
 3812              		.cfi_offset 7, -8
 3813              		.cfi_offset 14, -4
 3814 0002 84B0     		sub	sp, sp, #16
 3815              	.LCFI220:
 3816              		.cfi_def_cfa_offset 24
 3817 0004 00AF     		add	r7, sp, #0
 3818              	.LCFI221:
 3819              		.cfi_def_cfa_register 7
 3820 0006 7860     		str	r0, [r7, #4]
 3821 0008 3960     		str	r1, [r7]
  72:Cpp/ws2812b.hpp ****     {
  73:Cpp/ws2812b.hpp ****       if (col == *this) return *this;
 3822              		.loc 9 73 19
ARM GAS  /tmp/ccU23Djm.s 			page 124


 3823 000a 7868     		ldr	r0, [r7, #4]
 3824 000c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv
 3825 0010 0346     		mov	r3, r0
 3826 0012 1A46     		mov	r2, r3
 3827 0014 3A73     		strb	r2, [r7, #12]
 3828 0016 C3F30722 		ubfx	r2, r3, #8, #8
 3829 001a 7A73     		strb	r2, [r7, #13]
 3830 001c C3F30743 		ubfx	r3, r3, #16, #8
 3831 0020 BB73     		strb	r3, [r7, #14]
 3832              		.loc 9 73 15
 3833 0022 07F10C02 		add	r2, r7, #12
 3834 0026 3B46     		mov	r3, r7
 3835 0028 1146     		mov	r1, r2
 3836 002a 1846     		mov	r0, r3
 3837 002c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b8RGBColoreqERKS2_
 3838 0030 0346     		mov	r3, r0
 3839              		.loc 9 73 7
 3840 0032 002B     		cmp	r3, #0
 3841 0034 01D0     		beq	.L111
 3842              		.loc 9 73 33 discriminator 1
 3843 0036 7B68     		ldr	r3, [r7, #4]
 3844 0038 31E0     		b	.L113
 3845              	.L111:
  74:Cpp/ws2812b.hpp ****       auto buf_iter = data_ptr_;
 3846              		.loc 9 74 23
 3847 003a 7B68     		ldr	r3, [r7, #4]
 3848 003c 1B68     		ldr	r3, [r3]
 3849              		.loc 9 74 12
 3850 003e BB60     		str	r3, [r7, #8]
  75:Cpp/ws2812b.hpp ****       buf_iter = util::copy(ws2812b_mapping[col.r], buf_iter);
 3851              		.loc 9 75 49
 3852 0040 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 3853              		.loc 9 75 50
 3854 0042 1946     		mov	r1, r3
 3855 0044 1848     		ldr	r0, .L114
 3856 0046 FFF7FEFF 		bl	_ZNKSt5arrayIS_IhLj4EELj256EEixEj
 3857 004a 0246     		mov	r2, r0
 3858              		.loc 9 75 28
 3859 004c 07F10803 		add	r3, r7, #8
 3860 0050 1946     		mov	r1, r3
 3861 0052 1046     		mov	r0, r2
 3862 0054 FFF7FEFF 		bl	_ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_
 3863 0058 0346     		mov	r3, r0
 3864              		.loc 9 75 16
 3865 005a BB60     		str	r3, [r7, #8]
  76:Cpp/ws2812b.hpp ****       buf_iter = util::copy(ws2812b_mapping[col.g], buf_iter);
 3866              		.loc 9 76 49
 3867 005c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3868              		.loc 9 76 50
 3869 005e 1946     		mov	r1, r3
 3870 0060 1148     		ldr	r0, .L114
 3871 0062 FFF7FEFF 		bl	_ZNKSt5arrayIS_IhLj4EELj256EEixEj
 3872 0066 0246     		mov	r2, r0
 3873              		.loc 9 76 28
 3874 0068 07F10803 		add	r3, r7, #8
 3875 006c 1946     		mov	r1, r3
 3876 006e 1046     		mov	r0, r2
ARM GAS  /tmp/ccU23Djm.s 			page 125


 3877 0070 FFF7FEFF 		bl	_ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_
 3878 0074 0346     		mov	r3, r0
 3879              		.loc 9 76 16
 3880 0076 BB60     		str	r3, [r7, #8]
  77:Cpp/ws2812b.hpp ****       buf_iter = util::copy(ws2812b_mapping[col.b], buf_iter);
 3881              		.loc 9 77 49
 3882 0078 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 3883              		.loc 9 77 50
 3884 007a 1946     		mov	r1, r3
 3885 007c 0A48     		ldr	r0, .L114
 3886 007e FFF7FEFF 		bl	_ZNKSt5arrayIS_IhLj4EELj256EEixEj
 3887 0082 0246     		mov	r2, r0
 3888              		.loc 9 77 28
 3889 0084 07F10803 		add	r3, r7, #8
 3890 0088 1946     		mov	r1, r3
 3891 008a 1046     		mov	r0, r2
 3892 008c FFF7FEFF 		bl	_ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_
 3893 0090 0346     		mov	r3, r0
 3894              		.loc 9 77 16
 3895 0092 BB60     		str	r3, [r7, #8]
  78:Cpp/ws2812b.hpp ****       needs_update_ = true;
 3896              		.loc 9 78 7
 3897 0094 7B68     		ldr	r3, [r7, #4]
 3898 0096 5B68     		ldr	r3, [r3, #4]
 3899              		.loc 9 78 21
 3900 0098 0122     		movs	r2, #1
 3901 009a 1A70     		strb	r2, [r3]
  79:Cpp/ws2812b.hpp ****       return *this;
 3902              		.loc 9 79 15
 3903 009c 7B68     		ldr	r3, [r7, #4]
 3904              	.L113:
  80:Cpp/ws2812b.hpp ****     }
 3905              		.loc 9 80 5 discriminator 1
 3906 009e 1846     		mov	r0, r3
 3907 00a0 1037     		adds	r7, r7, #16
 3908              	.LCFI222:
 3909              		.cfi_def_cfa_offset 8
 3910 00a2 BD46     		mov	sp, r7
 3911              	.LCFI223:
 3912              		.cfi_def_cfa_register 13
 3913              		@ sp needed
 3914 00a4 80BD     		pop	{r7, pc}
 3915              	.L115:
 3916 00a6 00BF     		.align	2
 3917              	.L114:
 3918 00a8 00000000 		.word	_ZN4otto3mcu7ws2812bL15ws2812b_mappingE
 3919              		.cfi_endproc
 3920              	.LFE4071:
 3922              		.section	.text._ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv,"axG",%progbits,_ZN4otto3mcu7ws2
 3923              		.align	1
 3924              		.weak	_ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv
 3925              		.syntax unified
 3926              		.thumb
 3927              		.thumb_func
 3928              		.fpu fpv4-sp-d16
 3930              	_ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv:
 3931              	.LFB4073:
ARM GAS  /tmp/ccU23Djm.s 			page 126


  81:Cpp/ws2812b.hpp **** 
  82:Cpp/ws2812b.hpp ****     operator RGBColor()
 3932              		.loc 9 82 5
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 24
 3935              		@ frame_needed = 1, uses_anonymous_args = 0
 3936 0000 80B5     		push	{r7, lr}
 3937              	.LCFI224:
 3938              		.cfi_def_cfa_offset 8
 3939              		.cfi_offset 7, -8
 3940              		.cfi_offset 14, -4
 3941 0002 86B0     		sub	sp, sp, #24
 3942              	.LCFI225:
 3943              		.cfi_def_cfa_offset 32
 3944 0004 00AF     		add	r7, sp, #0
 3945              	.LCFI226:
 3946              		.cfi_def_cfa_register 7
 3947 0006 7860     		str	r0, [r7, #4]
  83:Cpp/ws2812b.hpp ****     {
  84:Cpp/ws2812b.hpp ****       return {
  85:Cpp/ws2812b.hpp ****         .r = byte_from_mapping({data_ptr_[0 + 0], data_ptr_[0 + 1], data_ptr_[0 + 2], data_ptr_[0 +
 3948              		.loc 9 85 33
 3949 0008 7B68     		ldr	r3, [r7, #4]
 3950 000a 1B68     		ldr	r3, [r3]
 3951              		.loc 9 85 48
 3952 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3953              		.loc 9 85 31
 3954 000e 3B73     		strb	r3, [r7, #12]
 3955              		.loc 9 85 51
 3956 0010 7B68     		ldr	r3, [r7, #4]
 3957 0012 1B68     		ldr	r3, [r3]
 3958              		.loc 9 85 31
 3959 0014 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3960 0016 7B73     		strb	r3, [r7, #13]
 3961              		.loc 9 85 69
 3962 0018 7B68     		ldr	r3, [r7, #4]
 3963 001a 1B68     		ldr	r3, [r3]
 3964              		.loc 9 85 31
 3965 001c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3966 001e BB73     		strb	r3, [r7, #14]
 3967              		.loc 9 85 87
 3968 0020 7B68     		ldr	r3, [r7, #4]
 3969 0022 1B68     		ldr	r3, [r3]
 3970              		.loc 9 85 31
 3971 0024 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3972 0026 FB73     		strb	r3, [r7, #15]
 3973 0028 F868     		ldr	r0, [r7, #12]
 3974 002a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE
 3975 002e 0346     		mov	r3, r0
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
  87:Cpp/ws2812b.hpp ****         .b = byte_from_mapping({data_ptr_[8 + 0], data_ptr_[8 + 1], data_ptr_[8 + 2], data_ptr_[8 +
  88:Cpp/ws2812b.hpp ****       };
 3976              		.loc 9 88 7
 3977 0030 3B72     		strb	r3, [r7, #8]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3978              		.loc 9 86 33
 3979 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 127


 3980 0034 1B68     		ldr	r3, [r3]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3981              		.loc 9 86 31
 3982 0036 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3983 0038 3B74     		strb	r3, [r7, #16]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3984              		.loc 9 86 51
 3985 003a 7B68     		ldr	r3, [r7, #4]
 3986 003c 1B68     		ldr	r3, [r3]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3987              		.loc 9 86 31
 3988 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3989 0040 7B74     		strb	r3, [r7, #17]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3990              		.loc 9 86 69
 3991 0042 7B68     		ldr	r3, [r7, #4]
 3992 0044 1B68     		ldr	r3, [r3]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3993              		.loc 9 86 31
 3994 0046 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 3995 0048 BB74     		strb	r3, [r7, #18]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3996              		.loc 9 86 87
 3997 004a 7B68     		ldr	r3, [r7, #4]
 3998 004c 1B68     		ldr	r3, [r3]
  86:Cpp/ws2812b.hpp ****         .g = byte_from_mapping({data_ptr_[4 + 0], data_ptr_[4 + 1], data_ptr_[4 + 2], data_ptr_[4 +
 3999              		.loc 9 86 31
 4000 004e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 4001 0050 FB74     		strb	r3, [r7, #19]
 4002 0052 3869     		ldr	r0, [r7, #16]
 4003 0054 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE
 4004 0058 0346     		mov	r3, r0
 4005              		.loc 9 88 7
 4006 005a 7B72     		strb	r3, [r7, #9]
  87:Cpp/ws2812b.hpp ****       };
 4007              		.loc 9 87 33
 4008 005c 7B68     		ldr	r3, [r7, #4]
 4009 005e 1B68     		ldr	r3, [r3]
  87:Cpp/ws2812b.hpp ****       };
 4010              		.loc 9 87 31
 4011 0060 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4012 0062 3B75     		strb	r3, [r7, #20]
  87:Cpp/ws2812b.hpp ****       };
 4013              		.loc 9 87 51
 4014 0064 7B68     		ldr	r3, [r7, #4]
 4015 0066 1B68     		ldr	r3, [r3]
  87:Cpp/ws2812b.hpp ****       };
 4016              		.loc 9 87 31
 4017 0068 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 4018 006a 7B75     		strb	r3, [r7, #21]
  87:Cpp/ws2812b.hpp ****       };
 4019              		.loc 9 87 69
 4020 006c 7B68     		ldr	r3, [r7, #4]
 4021 006e 1B68     		ldr	r3, [r3]
  87:Cpp/ws2812b.hpp ****       };
 4022              		.loc 9 87 31
 4023 0070 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
ARM GAS  /tmp/ccU23Djm.s 			page 128


 4024 0072 BB75     		strb	r3, [r7, #22]
  87:Cpp/ws2812b.hpp ****       };
 4025              		.loc 9 87 87
 4026 0074 7B68     		ldr	r3, [r7, #4]
 4027 0076 1B68     		ldr	r3, [r3]
  87:Cpp/ws2812b.hpp ****       };
 4028              		.loc 9 87 31
 4029 0078 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4030 007a FB75     		strb	r3, [r7, #23]
 4031 007c 7869     		ldr	r0, [r7, #20]
 4032 007e FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE
 4033 0082 0346     		mov	r3, r0
 4034              		.loc 9 88 7
 4035 0084 BB72     		strb	r3, [r7, #10]
 4036 0086 0023     		movs	r3, #0
 4037 0088 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 4038 008a 62F30703 		bfi	r3, r2, #0, #8
 4039 008e 7A7A     		ldrb	r2, [r7, #9]	@ zero_extendqisi2
 4040 0090 62F30F23 		bfi	r3, r2, #8, #8
 4041 0094 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 4042 0096 62F31743 		bfi	r3, r2, #16, #8
  89:Cpp/ws2812b.hpp ****     }
 4043              		.loc 9 89 5
 4044 009a 1846     		mov	r0, r3
 4045 009c 1837     		adds	r7, r7, #24
 4046              	.LCFI227:
 4047              		.cfi_def_cfa_offset 8
 4048 009e BD46     		mov	sp, r7
 4049              	.LCFI228:
 4050              		.cfi_def_cfa_register 13
 4051              		@ sp needed
 4052 00a0 80BD     		pop	{r7, pc}
 4053              		.cfi_endproc
 4054              	.LFE4073:
 4056              		.section	.data._ZN4otto3mcu7ws2812bL6colorsE,"aw"
 4057              		.align	2
 4060              	_ZN4otto3mcu7ws2812bL6colorsE:
 4061 0000 80       		.byte	-128
 4062 0001 80       		.byte	-128
 4063 0002 80       		.byte	-128
 4064 0003 80       		.byte	-128
 4065 0004 80       		.byte	-128
 4066 0005 00       		.byte	0
 4067 0006 80       		.byte	-128
 4068 0007 00       		.byte	0
 4069 0008 00       		.byte	0
 4070 0009 80       		.byte	-128
 4071 000a 00       		.byte	0
 4072 000b 80       		.byte	-128
 4073 000c 00       		.byte	0
 4074 000d 00       		.byte	0
 4075 000e 80       		.byte	-128
 4076 000f 00       		.byte	0
 4077 0010 80       		.byte	-128
 4078 0011 80       		.byte	-128
 4079 0012 00       		.byte	0
 4080 0013 80       		.byte	-128
ARM GAS  /tmp/ccU23Djm.s 			page 129


 4081 0014 00       		.byte	0
 4082              		.section	.text._ZN4otto3mcu9SchedulerD2Ev,"axG",%progbits,_ZN4otto3mcu9SchedulerD5Ev,comdat
 4083              		.align	1
 4084              		.weak	_ZN4otto3mcu9SchedulerD2Ev
 4085              		.syntax unified
 4086              		.thumb
 4087              		.thumb_func
 4088              		.fpu fpv4-sp-d16
 4090              	_ZN4otto3mcu9SchedulerD2Ev:
 4091              	.LFB4102:
  11:Cpp/scheduler.hpp ****     /// Move-only function with max size of 48
 4092              		.loc 6 11 10
 4093              		.cfi_startproc
 4094              		@ args = 0, pretend = 0, frame = 8
 4095              		@ frame_needed = 1, uses_anonymous_args = 0
 4096 0000 80B5     		push	{r7, lr}
 4097              	.LCFI229:
 4098              		.cfi_def_cfa_offset 8
 4099              		.cfi_offset 7, -8
 4100              		.cfi_offset 14, -4
 4101 0002 82B0     		sub	sp, sp, #8
 4102              	.LCFI230:
 4103              		.cfi_def_cfa_offset 16
 4104 0004 00AF     		add	r7, sp, #0
 4105              	.LCFI231:
 4106              		.cfi_def_cfa_register 7
 4107 0006 7860     		str	r0, [r7, #4]
 4108              	.LBB18:
  11:Cpp/scheduler.hpp ****     /// Move-only function with max size of 48
 4109              		.loc 6 11 10
 4110 0008 7B68     		ldr	r3, [r7, #4]
 4111 000a 1846     		mov	r0, r3
 4112 000c FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED1Ev
 4113              	.LBE18:
 4114 0010 7B68     		ldr	r3, [r7, #4]
 4115 0012 1846     		mov	r0, r3
 4116 0014 0837     		adds	r7, r7, #8
 4117              	.LCFI232:
 4118              		.cfi_def_cfa_offset 8
 4119 0016 BD46     		mov	sp, r7
 4120              	.LCFI233:
 4121              		.cfi_def_cfa_register 13
 4122              		@ sp needed
 4123 0018 80BD     		pop	{r7, pc}
 4124              		.cfi_endproc
 4125              	.LFE4102:
 4127              		.weak	_ZN4otto3mcu9SchedulerD1Ev
 4128              		.thumb_set _ZN4otto3mcu9SchedulerD1Ev,_ZN4otto3mcu9SchedulerD2Ev
 4129              		.global	_ZN4otto3mcu9main_loopE
 4130              		.section	.bss._ZN4otto3mcu9main_loopE,"aw",%nobits
 4131              		.align	3
 4134              	_ZN4otto3mcu9main_loopE:
 4135 0000 00000000 		.space	81928
 4135      00000000 
 4135      00000000 
 4135      00000000 
 4135      00000000 
ARM GAS  /tmp/ccU23Djm.s 			page 130


 4136              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv,"axG",%progbits,_ZN4otto3mcu7ws281
 4137              		.align	1
 4138              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv
 4139              		.syntax unified
 4140              		.thumb
 4141              		.thumb_func
 4142              		.fpu fpv4-sp-d16
 4144              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv:
 4145              	.LFB4104:
  90:Cpp/ws2812b.hpp **** 
  91:Cpp/ws2812b.hpp ****   private:
  92:Cpp/ws2812b.hpp ****     std::uint8_t* const data_ptr_;
  93:Cpp/ws2812b.hpp ****     bool& needs_update_;
  94:Cpp/ws2812b.hpp ****   };
  95:Cpp/ws2812b.hpp **** 
  96:Cpp/ws2812b.hpp ****   struct Ws2812bIter {
  97:Cpp/ws2812b.hpp ****     Ws2812bIter(std::uint8_t* ptr, bool* needs_update) : ptr_(ptr), needs_update_(needs_update) {}
  98:Cpp/ws2812b.hpp **** 
  99:Cpp/ws2812b.hpp ****     Ws2812bRef operator*()
 100:Cpp/ws2812b.hpp ****     {
 101:Cpp/ws2812b.hpp ****       return {ptr_, *needs_update_};
 102:Cpp/ws2812b.hpp ****     }
 103:Cpp/ws2812b.hpp **** 
 104:Cpp/ws2812b.hpp ****     Ws2812bIter& operator++()
 105:Cpp/ws2812b.hpp ****     {
 106:Cpp/ws2812b.hpp ****       ptr_ += 12;
 107:Cpp/ws2812b.hpp ****       return *this;
 108:Cpp/ws2812b.hpp ****     }
 109:Cpp/ws2812b.hpp **** 
 110:Cpp/ws2812b.hpp ****     Ws2812bIter operator++(int)
 111:Cpp/ws2812b.hpp ****     {
 112:Cpp/ws2812b.hpp ****       auto old = *this;
 113:Cpp/ws2812b.hpp ****       ++(*this);
 114:Cpp/ws2812b.hpp ****       return old;
 115:Cpp/ws2812b.hpp ****     }
 116:Cpp/ws2812b.hpp **** 
 117:Cpp/ws2812b.hpp ****     bool operator==(const Ws2812bIter& rhs) const
 118:Cpp/ws2812b.hpp ****     {
 119:Cpp/ws2812b.hpp ****       return ptr_ == rhs.ptr_;
 120:Cpp/ws2812b.hpp ****     }
 121:Cpp/ws2812b.hpp **** 
 122:Cpp/ws2812b.hpp ****     bool operator!=(const Ws2812bIter& rhs) const
 123:Cpp/ws2812b.hpp ****     {
 124:Cpp/ws2812b.hpp ****       return ptr_ != rhs.ptr_;
 125:Cpp/ws2812b.hpp ****     }
 126:Cpp/ws2812b.hpp **** 
 127:Cpp/ws2812b.hpp ****   private:
 128:Cpp/ws2812b.hpp ****     std::uint8_t* ptr_ = nullptr;
 129:Cpp/ws2812b.hpp ****     bool* needs_update_ = nullptr;
 130:Cpp/ws2812b.hpp ****   };
 131:Cpp/ws2812b.hpp **** 
 132:Cpp/ws2812b.hpp ****   template<int N>
 133:Cpp/ws2812b.hpp ****   struct Ws2812bArray {
 134:Cpp/ws2812b.hpp ****     using iterator = Ws2812bIter;
 135:Cpp/ws2812b.hpp **** 
 136:Cpp/ws2812b.hpp ****     Ws2812bArray(SPI_HandleTypeDef& hspi) : hspi_(hspi)
 137:Cpp/ws2812b.hpp ****     {
ARM GAS  /tmp/ccU23Djm.s 			page 131


 138:Cpp/ws2812b.hpp ****       clear();
 139:Cpp/ws2812b.hpp ****     }
 140:Cpp/ws2812b.hpp **** 
 141:Cpp/ws2812b.hpp ****     void init()
 142:Cpp/ws2812b.hpp ****     {
 143:Cpp/ws2812b.hpp ****       HAL_SPI_Transmit_DMA(&hspi_, zeros_.data(), zeros_.size());
 144:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 145:Cpp/ws2812b.hpp ****         ;
 146:Cpp/ws2812b.hpp ****     }
 147:Cpp/ws2812b.hpp **** 
 148:Cpp/ws2812b.hpp ****     void clear()
 149:Cpp/ws2812b.hpp ****     {
 150:Cpp/ws2812b.hpp ****       util::fill(spi_buf_, ws2812b_mapping[0][0]);
 151:Cpp/ws2812b.hpp ****       needs_update_ = true;
 152:Cpp/ws2812b.hpp ****     }
 153:Cpp/ws2812b.hpp **** 
 154:Cpp/ws2812b.hpp ****     void maybe_update()
 155:Cpp/ws2812b.hpp ****     {
 156:Cpp/ws2812b.hpp ****       if (needs_update_) send_update();
 157:Cpp/ws2812b.hpp ****     }
 158:Cpp/ws2812b.hpp ****     void send_update()
 159:Cpp/ws2812b.hpp ****     {
 160:Cpp/ws2812b.hpp ****       transmit();
 161:Cpp/ws2812b.hpp ****       needs_update_ = false;
 162:Cpp/ws2812b.hpp ****     }
 163:Cpp/ws2812b.hpp **** 
 164:Cpp/ws2812b.hpp ****     constexpr static int size()
 4146              		.loc 9 164 26
 4147              		.cfi_startproc
 4148              		@ args = 0, pretend = 0, frame = 0
 4149              		@ frame_needed = 1, uses_anonymous_args = 0
 4150              		@ link register save eliminated.
 4151 0000 80B4     		push	{r7}
 4152              	.LCFI234:
 4153              		.cfi_def_cfa_offset 4
 4154              		.cfi_offset 7, -4
 4155 0002 00AF     		add	r7, sp, #0
 4156              	.LCFI235:
 4157              		.cfi_def_cfa_register 7
 165:Cpp/ws2812b.hpp ****     {
 166:Cpp/ws2812b.hpp ****       return N;
 4158              		.loc 9 166 14
 4159 0004 3623     		movs	r3, #54
 167:Cpp/ws2812b.hpp ****     }
 4160              		.loc 9 167 5
 4161 0006 1846     		mov	r0, r3
 4162 0008 BD46     		mov	sp, r7
 4163              	.LCFI236:
 4164              		.cfi_def_cfa_register 13
 4165              		@ sp needed
 4166 000a 5DF8047B 		ldr	r7, [sp], #4
 4167              	.LCFI237:
 4168              		.cfi_restore 7
 4169              		.cfi_def_cfa_offset 0
 4170 000e 7047     		bx	lr
 4171              		.cfi_endproc
 4172              	.LFE4104:
ARM GAS  /tmp/ccU23Djm.s 			page 132


 4174              		.global	leds
 4175              		.section	.bss.leds,"aw",%nobits
 4176              		.align	2
 4179              	leds:
 4180 0000 00000000 		.space	656
 4180      00000000 
 4180      00000000 
 4180      00000000 
 4180      00000000 
 4181              		.global	key_table
 4182              		.section	.data.key_table,"aw"
 4183              		.align	2
 4186              	key_table:
 4187 0000 00000000 		.space	512
 4187      00000000 
 4187      00000000 
 4187      00000000 
 4187      00000000 
 4188 0200 00040240 		.word	1073873920
 4189 0204 00100000 		.word	4096
 4190 0208 00       		.byte	0
 4191 0209 000000   		.space	3
 4192 020c 00040240 		.word	1073873920
 4193 0210 00200000 		.word	8192
 4194 0214 00       		.byte	0
 4195 0215 000000   		.space	3
 4196 0218 00040240 		.word	1073873920
 4197 021c 00400000 		.word	16384
 4198 0220 00       		.byte	0
 4199 0221 000000   		.space	3
 4200 0224 00040240 		.word	1073873920
 4201 0228 00800000 		.word	32768
 4202 022c 00       		.byte	0
 4203 022d 000000   		.space	3
 4204 0230 00080240 		.word	1073874944
 4205 0234 01000000 		.word	1
 4206 0238 00       		.byte	0
 4207 0239 000000   		.space	3
 4208 023c 00080240 		.word	1073874944
 4209 0240 02000000 		.word	2
 4210 0244 00       		.byte	0
 4211 0245 000000   		.space	3
 4212 0248 00080240 		.word	1073874944
 4213 024c 00100000 		.word	4096
 4214 0250 00       		.byte	0
 4215 0251 000000   		.space	3
 4216 0254 00080240 		.word	1073874944
 4217 0258 08000000 		.word	8
 4218 025c 00       		.byte	0
 4219 025d 000000   		.space	3
 4220 0260 00100240 		.word	1073876992
 4221 0264 01000000 		.word	1
 4222 0268 00       		.byte	0
 4223 0269 000000   		.space	3
 4224 026c 00100240 		.word	1073876992
 4225 0270 02000000 		.word	2
 4226 0274 00       		.byte	0
ARM GAS  /tmp/ccU23Djm.s 			page 133


 4227 0275 000000   		.space	3
 4228 0278 00100240 		.word	1073876992
 4229 027c 80000000 		.word	128
 4230 0280 00       		.byte	0
 4231 0281 000000   		.space	3
 4232 0284 00100240 		.word	1073876992
 4233 0288 00010000 		.word	256
 4234 028c 00       		.byte	0
 4235 028d 000000   		.space	3
 4236 0290 00100240 		.word	1073876992
 4237 0294 00040000 		.word	1024
 4238 0298 00       		.byte	0
 4239 0299 000000   		.space	3
 4240 029c 00100240 		.word	1073876992
 4241 02a0 00100000 		.word	4096
 4242 02a4 00       		.byte	0
 4243 02a5 000000   		.space	3
 4244 02a8 00100240 		.word	1073876992
 4245 02ac 00800000 		.word	32768
 4246 02b0 00       		.byte	0
 4247 02b1 000000   		.space	3
 4248 02b4 00080240 		.word	1073874944
 4249 02b8 00040000 		.word	1024
 4250 02bc 00       		.byte	0
 4251 02bd 000000   		.space	3
 4252              		.global	blue_encoder
 4253              		.section	.bss.blue_encoder,"aw",%nobits
 4254              		.align	2
 4257              	blue_encoder:
 4258 0000 00000000 		.space	36
 4258      00000000 
 4258      00000000 
 4258      00000000 
 4258      00000000 
 4259              		.global	green_encoder
 4260              		.section	.bss.green_encoder,"aw",%nobits
 4261              		.align	2
 4264              	green_encoder:
 4265 0000 00000000 		.space	36
 4265      00000000 
 4265      00000000 
 4265      00000000 
 4265      00000000 
 4266              		.global	yellow_encoder
 4267              		.section	.bss.yellow_encoder,"aw",%nobits
 4268              		.align	2
 4271              	yellow_encoder:
 4272 0000 00000000 		.space	36
 4272      00000000 
 4272      00000000 
 4272      00000000 
 4272      00000000 
 4273              		.global	red_encoder
 4274              		.section	.bss.red_encoder,"aw",%nobits
 4275              		.align	2
 4278              	red_encoder:
 4279 0000 00000000 		.space	36
ARM GAS  /tmp/ccU23Djm.s 			page 134


 4279      00000000 
 4279      00000000 
 4279      00000000 
 4279      00000000 
 4280              		.section	.text._Z9test_ledsv,"ax",%progbits
 4281              		.align	1
 4282              		.global	_Z9test_ledsv
 4283              		.syntax unified
 4284              		.thumb
 4285              		.thumb_func
 4286              		.fpu fpv4-sp-d16
 4288              	_Z9test_ledsv:
 4289              	.LFB4105:
 4290              		.file 11 "Cpp/main.cpp"
   1:Cpp/main.cpp  **** #include "encoder.hpp"
   2:Cpp/main.cpp  **** #include "keys.hpp"
   3:Cpp/main.cpp  **** #include "otto.hpp"
   4:Cpp/main.cpp  **** #include "scheduler.hpp"
   5:Cpp/main.cpp  **** #include "ws2812b.hpp"
   6:Cpp/main.cpp  **** 
   7:Cpp/main.cpp  **** #include "stm32f4xx_hal_i2c.h"
   8:Cpp/main.cpp  **** 
   9:Cpp/main.cpp  **** namespace otto::mcu {
  10:Cpp/main.cpp  ****   Scheduler main_loop;
  11:Cpp/main.cpp  **** }
  12:Cpp/main.cpp  **** 
  13:Cpp/main.cpp  **** using namespace otto::mcu;
  14:Cpp/main.cpp  **** 
  15:Cpp/main.cpp  **** ws2812b::Ws2812bArray<54> leds = {hspi3};
  16:Cpp/main.cpp  **** 
  17:Cpp/main.cpp  **** struct KeyData {
  18:Cpp/main.cpp  ****   int led_idx = -1;
  19:Cpp/main.cpp  **** };
  20:Cpp/main.cpp  **** 
  21:Cpp/main.cpp  **** using KeyMatrix = keys::KeyMatrix<KeyData, 8, 8>;
  22:Cpp/main.cpp  **** 
  23:Cpp/main.cpp  **** KeyMatrix key_table = {
  24:Cpp/main.cpp  ****   .table = {{
  25:Cpp/main.cpp  ****     KeyMatrix::Row{{{{10}}, {{2}}, {{5}}, {{8}}, {{31}}, {{42}}, {{}}, {{49}}}},
  26:Cpp/main.cpp  ****     KeyMatrix::Row{{{{0}}, {{3}}, {{6}}, {{9}}, {{44}}, {{43}}, {{}}, {{51}}}},
  27:Cpp/main.cpp  ****     KeyMatrix::Row{{{{1}}, {{4}}, {{7}}, {{25}}, {{35}}, {{36}}, {{}}, {{50}}}},
  28:Cpp/main.cpp  ****     KeyMatrix::Row{{{{11}}, {{16}}, {{21}}, {{27}}, {{33}}, {{40}}, {{}}, {{47}}}},
  29:Cpp/main.cpp  ****     KeyMatrix::Row{{{{12}}, {{17}}, {{22}}, {{28}}, {{32}}, {{38}}, {{}}, {{}}}},
  30:Cpp/main.cpp  ****     KeyMatrix::Row{{{{13}}, {{18}}, {{23}}, {{30}}, {{45}}, {{41}}, {{}}, {{48}}}},
  31:Cpp/main.cpp  ****     KeyMatrix::Row{{{{14}}, {{19}}, {{24}}, {{29}}, {{34}}, {{37}}, {{}}, {{52}}}},
  32:Cpp/main.cpp  ****     KeyMatrix::Row{{{{15}}, {{20}}, {{}}, {{26}}, {{46}}, {{39}}, {{}}, {{53}}}},
  33:Cpp/main.cpp  ****   }},
  34:Cpp/main.cpp  ****   .row_pins = {{
  35:Cpp/main.cpp  ****     {ROW_1_GPIO_Port, ROW_1_Pin},
  36:Cpp/main.cpp  ****     {ROW_2_GPIO_Port, ROW_2_Pin},
  37:Cpp/main.cpp  ****     {ROW_3_GPIO_Port, ROW_3_Pin},
  38:Cpp/main.cpp  ****     {ROW_4_GPIO_Port, ROW_4_Pin},
  39:Cpp/main.cpp  ****     {ROW_5_GPIO_Port, ROW_5_Pin},
  40:Cpp/main.cpp  ****     {ROW_6_GPIO_Port, ROW_6_Pin},
  41:Cpp/main.cpp  ****     {ROW_7_GPIO_Port, ROW_7_Pin},
  42:Cpp/main.cpp  ****     {ROW_8_GPIO_Port, ROW_8_Pin},
  43:Cpp/main.cpp  ****   }},
ARM GAS  /tmp/ccU23Djm.s 			page 135


  44:Cpp/main.cpp  ****   .col_pins = {{
  45:Cpp/main.cpp  ****     {COL_1_GPIO_Port, COL_1_Pin},
  46:Cpp/main.cpp  ****     {COL_2_GPIO_Port, COL_2_Pin},
  47:Cpp/main.cpp  ****     {COL_3_GPIO_Port, COL_3_Pin},
  48:Cpp/main.cpp  ****     {COL_4_GPIO_Port, COL_4_Pin},
  49:Cpp/main.cpp  ****     {COL_5_GPIO_Port, COL_5_Pin},
  50:Cpp/main.cpp  ****     {COL_6_GPIO_Port, COL_6_Pin},
  51:Cpp/main.cpp  ****     {COL_7_GPIO_Port, COL_7_Pin},
  52:Cpp/main.cpp  ****     {COL_8_GPIO_Port, COL_8_Pin},
  53:Cpp/main.cpp  ****   }},
  54:Cpp/main.cpp  **** };
  55:Cpp/main.cpp  **** 
  56:Cpp/main.cpp  **** Encoder blue_encoder = {{ENC_1_A_GPIO_Port, ENC_1_A_Pin}, {ENC_1_B_GPIO_Port, ENC_1_B_Pin}};
  57:Cpp/main.cpp  **** Encoder green_encoder = {{ENC_2_A_GPIO_Port, ENC_2_A_Pin}, {ENC_2_B_GPIO_Port, ENC_2_B_Pin}};
  58:Cpp/main.cpp  **** Encoder yellow_encoder = {{ENC_3_A_GPIO_Port, ENC_3_A_Pin}, {ENC_3_B_GPIO_Port, ENC_3_B_Pin}};
  59:Cpp/main.cpp  **** Encoder red_encoder = {{ENC_4_A_GPIO_Port, ENC_4_A_Pin}, {ENC_4_B_GPIO_Port, ENC_4_B_Pin}};
  60:Cpp/main.cpp  **** 
  61:Cpp/main.cpp  **** void test_leds()
  62:Cpp/main.cpp  **** {
 4291              		.loc 11 62 1
 4292              		.cfi_startproc
 4293              		@ args = 0, pretend = 0, frame = 0
 4294              		@ frame_needed = 1, uses_anonymous_args = 0
 4295 0000 80B5     		push	{r7, lr}
 4296              	.LCFI238:
 4297              		.cfi_def_cfa_offset 8
 4298              		.cfi_offset 7, -8
 4299              		.cfi_offset 14, -4
 4300 0002 00AF     		add	r7, sp, #0
 4301              	.LCFI239:
 4302              		.cfi_def_cfa_register 7
  63:Cpp/main.cpp  ****   led_pulse_colors(leds);
 4303              		.loc 11 63 19
 4304 0004 0348     		ldr	r0, .L123
 4305 0006 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE
  64:Cpp/main.cpp  ****   led_cascade_colors(leds);
 4306              		.loc 11 64 21
 4307 000a 0248     		ldr	r0, .L123
 4308 000c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE
  65:Cpp/main.cpp  **** }
 4309              		.loc 11 65 1
 4310 0010 00BF     		nop
 4311 0012 80BD     		pop	{r7, pc}
 4312              	.L124:
 4313              		.align	2
 4314              	.L123:
 4315 0014 00000000 		.word	leds
 4316              		.cfi_endproc
 4317              	.LFE4105:
 4319              		.section	.text._Z9test_keysv,"ax",%progbits
 4320              		.align	1
 4321              		.global	_Z9test_keysv
 4322              		.syntax unified
 4323              		.thumb
 4324              		.thumb_func
 4325              		.fpu fpv4-sp-d16
 4327              	_Z9test_keysv:
ARM GAS  /tmp/ccU23Djm.s 			page 136


 4328              	.LFB4106:
  66:Cpp/main.cpp  **** 
  67:Cpp/main.cpp  **** /// Tests keys by updating the corresponding LED for each key.
  68:Cpp/main.cpp  **** void test_keys()
  69:Cpp/main.cpp  **** {
 4329              		.loc 11 69 1
 4330              		.cfi_startproc
 4331              		@ args = 0, pretend = 0, frame = 48
 4332              		@ frame_needed = 1, uses_anonymous_args = 0
 4333 0000 80B5     		push	{r7, lr}
 4334              	.LCFI240:
 4335              		.cfi_def_cfa_offset 8
 4336              		.cfi_offset 7, -8
 4337              		.cfi_offset 14, -4
 4338 0002 8CB0     		sub	sp, sp, #48
 4339              	.LCFI241:
 4340              		.cfi_def_cfa_offset 56
 4341 0004 00AF     		add	r7, sp, #0
 4342              	.LCFI242:
 4343              		.cfi_def_cfa_register 7
  70:Cpp/main.cpp  ****   key_table.scan();
 4344              		.loc 11 70 17
 4345 0006 2B48     		ldr	r0, .L135
 4346 0008 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv
 4347              	.LBB19:
  71:Cpp/main.cpp  ****   for (const auto& row : key_table.table) {
 4348              		.loc 11 71 36
 4349 000c 294B     		ldr	r3, .L135
 4350 000e 7B62     		str	r3, [r7, #36]
 4351 0010 284B     		ldr	r3, .L135
 4352 0012 FB62     		str	r3, [r7, #44]
 4353 0014 284B     		ldr	r3, .L135+4
 4354 0016 3B62     		str	r3, [r7, #32]
 4355              	.L133:
 4356              		.loc 11 71 36 is_stmt 0 discriminator 1
 4357 0018 FA6A     		ldr	r2, [r7, #44]
 4358 001a 3B6A     		ldr	r3, [r7, #32]
 4359 001c 9A42     		cmp	r2, r3
 4360 001e 3ED0     		beq	.L126
 4361              	.LBB20:
 4362              		.loc 11 71 20 is_stmt 1 discriminator 2
 4363 0020 FB6A     		ldr	r3, [r7, #44]
 4364 0022 FB61     		str	r3, [r7, #28]
 4365              	.LBB21:
  72:Cpp/main.cpp  ****     for (auto& cell : row) {
 4366              		.loc 11 72 23 discriminator 2
 4367 0024 FB69     		ldr	r3, [r7, #28]
 4368 0026 BB61     		str	r3, [r7, #24]
 4369 0028 B869     		ldr	r0, [r7, #24]
 4370 002a FFF7FEFF 		bl	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv
 4371 002e B862     		str	r0, [r7, #40]
 4372 0030 B869     		ldr	r0, [r7, #24]
 4373 0032 FFF7FEFF 		bl	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv
 4374 0036 7861     		str	r0, [r7, #20]
 4375              	.L132:
 4376              		.loc 11 72 23 is_stmt 0 discriminator 1
 4377 0038 BA6A     		ldr	r2, [r7, #40]
ARM GAS  /tmp/ccU23Djm.s 			page 137


 4378 003a 7B69     		ldr	r3, [r7, #20]
 4379 003c 9A42     		cmp	r2, r3
 4380 003e 2AD0     		beq	.L127
 4381              		.loc 11 72 16 is_stmt 1 discriminator 2
 4382 0040 BB6A     		ldr	r3, [r7, #40]
 4383 0042 3B61     		str	r3, [r7, #16]
  73:Cpp/main.cpp  ****       if (cell.data.led_idx < 0) continue;
 4384              		.loc 11 73 21 discriminator 2
 4385 0044 3B69     		ldr	r3, [r7, #16]
 4386 0046 1B68     		ldr	r3, [r3]
 4387              		.loc 11 73 7 discriminator 2
 4388 0048 002B     		cmp	r3, #0
 4389 004a 1FDB     		blt	.L134
  74:Cpp/main.cpp  ****       leds[cell.data.led_idx] = cell.is_down ? ws2812b::RGBColor{0x00, 0x80, 0x0} : ws2812b::RGBCol
 4390              		.loc 11 74 38
 4391 004c 3B69     		ldr	r3, [r7, #16]
 4392 004e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4393              		.loc 11 74 119
 4394 0050 002B     		cmp	r3, #0
 4395 0052 06D0     		beq	.L130
 4396              		.loc 11 74 119 is_stmt 0 discriminator 1
 4397 0054 0023     		movs	r3, #0
 4398 0056 3B71     		strb	r3, [r7, #4]
 4399 0058 8023     		movs	r3, #128
 4400 005a 7B71     		strb	r3, [r7, #5]
 4401 005c 0023     		movs	r3, #0
 4402 005e BB71     		strb	r3, [r7, #6]
 4403 0060 05E0     		b	.L131
 4404              	.L130:
 4405              		.loc 11 74 119 discriminator 2
 4406 0062 0023     		movs	r3, #0
 4407 0064 3B71     		strb	r3, [r7, #4]
 4408 0066 0023     		movs	r3, #0
 4409 0068 7B71     		strb	r3, [r7, #5]
 4410 006a 0023     		movs	r3, #0
 4411 006c BB71     		strb	r3, [r7, #6]
 4412              	.L131:
 4413              		.loc 11 74 22 is_stmt 1 discriminator 4
 4414 006e 3B69     		ldr	r3, [r7, #16]
 4415 0070 1A68     		ldr	r2, [r3]
 4416              		.loc 11 74 29 discriminator 4
 4417 0072 07F10803 		add	r3, r7, #8
 4418 0076 1149     		ldr	r1, .L135+8
 4419 0078 1846     		mov	r0, r3
 4420 007a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 4421              		.loc 11 74 119 discriminator 4
 4422 007e 07F10803 		add	r3, r7, #8
 4423 0082 7968     		ldr	r1, [r7, #4]
 4424 0084 1846     		mov	r0, r3
 4425 0086 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 4426 008a 00E0     		b	.L129
 4427              	.L134:
  73:Cpp/main.cpp  ****       if (cell.data.led_idx < 0) continue;
 4428              		.loc 11 73 34
 4429 008c 00BF     		nop
 4430              	.L129:
  72:Cpp/main.cpp  ****     for (auto& cell : row) {
ARM GAS  /tmp/ccU23Djm.s 			page 138


 4431              		.loc 11 72 5 discriminator 3
 4432 008e BB6A     		ldr	r3, [r7, #40]
 4433 0090 0833     		adds	r3, r3, #8
 4434 0092 BB62     		str	r3, [r7, #40]
 4435 0094 D0E7     		b	.L132
 4436              	.L127:
 4437              	.LBE21:
 4438              	.LBE20:
  71:Cpp/main.cpp  ****     for (auto& cell : row) {
 4439              		.loc 11 71 3 discriminator 3
 4440 0096 FB6A     		ldr	r3, [r7, #44]
 4441 0098 4033     		adds	r3, r3, #64
 4442 009a FB62     		str	r3, [r7, #44]
 4443 009c BCE7     		b	.L133
 4444              	.L126:
 4445              	.LBE19:
  75:Cpp/main.cpp  ****     }
  76:Cpp/main.cpp  ****   }
  77:Cpp/main.cpp  ****   leds.maybe_update();
 4446              		.loc 11 77 20
 4447 009e 0748     		ldr	r0, .L135+8
 4448 00a0 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv
  78:Cpp/main.cpp  ****   HAL_Delay(5);
 4449              		.loc 11 78 12
 4450 00a4 0520     		movs	r0, #5
 4451 00a6 FFF7FEFF 		bl	HAL_Delay
  79:Cpp/main.cpp  **** }
 4452              		.loc 11 79 1
 4453 00aa 00BF     		nop
 4454 00ac 3037     		adds	r7, r7, #48
 4455              	.LCFI243:
 4456              		.cfi_def_cfa_offset 8
 4457 00ae BD46     		mov	sp, r7
 4458              	.LCFI244:
 4459              		.cfi_def_cfa_register 13
 4460              		@ sp needed
 4461 00b0 80BD     		pop	{r7, pc}
 4462              	.L136:
 4463 00b2 00BF     		.align	2
 4464              	.L135:
 4465 00b4 00000000 		.word	key_table
 4466 00b8 00020000 		.word	key_table+512
 4467 00bc 00000000 		.word	leds
 4468              		.cfi_endproc
 4469              	.LFE4106:
 4471              		.section	.text._ZZ13test_encodersvENKUlvE_clEv,"ax",%progbits
 4472              		.align	1
 4473              		.syntax unified
 4474              		.thumb
 4475              		.thumb_func
 4476              		.fpu fpv4-sp-d16
 4478              	_ZZ13test_encodersvENKUlvE_clEv:
 4479              	.LFB4112:
  80:Cpp/main.cpp  **** 
  81:Cpp/main.cpp  **** void test_encoders()
  82:Cpp/main.cpp  **** {
  83:Cpp/main.cpp  ****   blue_encoder.handler = [] {
ARM GAS  /tmp/ccU23Djm.s 			page 139


 4480              		.loc 11 83 26
 4481              		.cfi_startproc
 4482              		@ args = 0, pretend = 0, frame = 40
 4483              		@ frame_needed = 1, uses_anonymous_args = 0
 4484 0000 80B5     		push	{r7, lr}
 4485              	.LCFI245:
 4486              		.cfi_def_cfa_offset 8
 4487              		.cfi_offset 7, -8
 4488              		.cfi_offset 14, -4
 4489 0002 8AB0     		sub	sp, sp, #40
 4490              	.LCFI246:
 4491              		.cfi_def_cfa_offset 48
 4492 0004 00AF     		add	r7, sp, #0
 4493              	.LCFI247:
 4494              		.cfi_def_cfa_register 7
 4495 0006 7860     		str	r0, [r7, #4]
 4496              	.LBB22:
  84:Cpp/main.cpp  ****     int led_idx = std::clamp(blue_encoder.value + 0, 0, 15) + 10;
 4497              		.loc 11 84 43
 4498 0008 174B     		ldr	r3, .L138
 4499 000a 93F91830 		ldrsb	r3, [r3, #24]
 4500              		.loc 11 84 49
 4501 000e FB60     		str	r3, [r7, #12]
 4502              		.loc 11 84 54
 4503 0010 0023     		movs	r3, #0
 4504 0012 3B61     		str	r3, [r7, #16]
 4505              		.loc 11 84 57
 4506 0014 0F23     		movs	r3, #15
 4507 0016 7B61     		str	r3, [r7, #20]
 4508              		.loc 11 84 59
 4509 0018 07F11402 		add	r2, r7, #20
 4510 001c 07F11001 		add	r1, r7, #16
 4511 0020 07F10C03 		add	r3, r7, #12
 4512 0024 1846     		mov	r0, r3
 4513 0026 FFF7FEFF 		bl	_ZSt5clampIiERKT_S2_S2_S2_
 4514 002a 0346     		mov	r3, r0
 4515              		.loc 11 84 29
 4516 002c 1B68     		ldr	r3, [r3]
 4517              		.loc 11 84 63
 4518 002e 0A33     		adds	r3, r3, #10
 4519 0030 7B62     		str	r3, [r7, #36]
  85:Cpp/main.cpp  ****     leds.clear();
 4520              		.loc 11 85 15
 4521 0032 0E48     		ldr	r0, .L138+4
 4522 0034 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
  86:Cpp/main.cpp  ****     leds[led_idx] = {0x00, 0x00, 0x80};
 4523              		.loc 11 86 19
 4524 0038 0023     		movs	r3, #0
 4525 003a 3B76     		strb	r3, [r7, #24]
 4526 003c 0023     		movs	r3, #0
 4527 003e 7B76     		strb	r3, [r7, #25]
 4528 0040 8023     		movs	r3, #128
 4529 0042 BB76     		strb	r3, [r7, #26]
 4530              		.loc 11 86 17
 4531 0044 07F11C03 		add	r3, r7, #28
 4532 0048 7A6A     		ldr	r2, [r7, #36]
 4533 004a 0849     		ldr	r1, .L138+4
ARM GAS  /tmp/ccU23Djm.s 			page 140


 4534 004c 1846     		mov	r0, r3
 4535 004e FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 4536              		.loc 11 86 38
 4537 0052 07F11C03 		add	r3, r7, #28
 4538 0056 B969     		ldr	r1, [r7, #24]
 4539 0058 1846     		mov	r0, r3
 4540 005a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 4541              	.LBE22:
  87:Cpp/main.cpp  ****   };
 4542              		.loc 11 87 3
 4543 005e 00BF     		nop
 4544 0060 2837     		adds	r7, r7, #40
 4545              	.LCFI248:
 4546              		.cfi_def_cfa_offset 8
 4547 0062 BD46     		mov	sp, r7
 4548              	.LCFI249:
 4549              		.cfi_def_cfa_register 13
 4550              		@ sp needed
 4551 0064 80BD     		pop	{r7, pc}
 4552              	.L139:
 4553 0066 00BF     		.align	2
 4554              	.L138:
 4555 0068 00000000 		.word	blue_encoder
 4556 006c 00000000 		.word	leds
 4557              		.cfi_endproc
 4558              	.LFE4112:
 4560              		.section	.text._ZZ13test_encodersvENUlvE_4_FUNEv,"ax",%progbits
 4561              		.align	1
 4562              		.syntax unified
 4563              		.thumb
 4564              		.thumb_func
 4565              		.fpu fpv4-sp-d16
 4567              	_ZZ13test_encodersvENUlvE_4_FUNEv:
 4568              	.LFB4113:
  83:Cpp/main.cpp  ****     int led_idx = std::clamp(blue_encoder.value + 0, 0, 15) + 10;
 4569              		.loc 11 83 26
 4570              		.cfi_startproc
 4571              		@ args = 0, pretend = 0, frame = 0
 4572              		@ frame_needed = 1, uses_anonymous_args = 0
 4573 0000 80B5     		push	{r7, lr}
 4574              	.LCFI250:
 4575              		.cfi_def_cfa_offset 8
 4576              		.cfi_offset 7, -8
 4577              		.cfi_offset 14, -4
 4578 0002 00AF     		add	r7, sp, #0
 4579              	.LCFI251:
 4580              		.cfi_def_cfa_register 7
 4581              		.loc 11 87 3
 4582 0004 0020     		movs	r0, #0
 4583 0006 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE_clEv
 4584 000a 80BD     		pop	{r7, pc}
 4585              		.cfi_endproc
 4586              	.LFE4113:
 4588              		.section	.text._ZZ13test_encodersvENKUlvE_cvPFvvEEv,"ax",%progbits
 4589              		.align	1
 4590              		.syntax unified
 4591              		.thumb
ARM GAS  /tmp/ccU23Djm.s 			page 141


 4592              		.thumb_func
 4593              		.fpu fpv4-sp-d16
 4595              	_ZZ13test_encodersvENKUlvE_cvPFvvEEv:
 4596              	.LFB4114:
  83:Cpp/main.cpp  ****     int led_idx = std::clamp(blue_encoder.value + 0, 0, 15) + 10;
 4597              		.loc 11 83 26
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 8
 4600              		@ frame_needed = 1, uses_anonymous_args = 0
 4601              		@ link register save eliminated.
 4602 0000 80B4     		push	{r7}
 4603              	.LCFI252:
 4604              		.cfi_def_cfa_offset 4
 4605              		.cfi_offset 7, -4
 4606 0002 83B0     		sub	sp, sp, #12
 4607              	.LCFI253:
 4608              		.cfi_def_cfa_offset 16
 4609 0004 00AF     		add	r7, sp, #0
 4610              	.LCFI254:
 4611              		.cfi_def_cfa_register 7
 4612 0006 7860     		str	r0, [r7, #4]
 4613              		.loc 11 87 3
 4614 0008 034B     		ldr	r3, .L144
 4615 000a 1846     		mov	r0, r3
 4616 000c 0C37     		adds	r7, r7, #12
 4617              	.LCFI255:
 4618              		.cfi_def_cfa_offset 4
 4619 000e BD46     		mov	sp, r7
 4620              	.LCFI256:
 4621              		.cfi_def_cfa_register 13
 4622              		@ sp needed
 4623 0010 5DF8047B 		ldr	r7, [sp], #4
 4624              	.LCFI257:
 4625              		.cfi_restore 7
 4626              		.cfi_def_cfa_offset 0
 4627 0014 7047     		bx	lr
 4628              	.L145:
 4629 0016 00BF     		.align	2
 4630              	.L144:
 4631 0018 00000000 		.word	_ZZ13test_encodersvENUlvE_4_FUNEv
 4632              		.cfi_endproc
 4633              	.LFE4114:
 4635              		.section	.text._ZZ13test_encodersvENKUlvE0_clEv,"ax",%progbits
 4636              		.align	1
 4637              		.syntax unified
 4638              		.thumb
 4639              		.thumb_func
 4640              		.fpu fpv4-sp-d16
 4642              	_ZZ13test_encodersvENKUlvE0_clEv:
 4643              	.LFB4115:
  88:Cpp/main.cpp  ****   green_encoder.handler = [] {
 4644              		.loc 11 88 27
 4645              		.cfi_startproc
 4646              		@ args = 0, pretend = 0, frame = 40
 4647              		@ frame_needed = 1, uses_anonymous_args = 0
 4648 0000 80B5     		push	{r7, lr}
 4649              	.LCFI258:
ARM GAS  /tmp/ccU23Djm.s 			page 142


 4650              		.cfi_def_cfa_offset 8
 4651              		.cfi_offset 7, -8
 4652              		.cfi_offset 14, -4
 4653 0002 8AB0     		sub	sp, sp, #40
 4654              	.LCFI259:
 4655              		.cfi_def_cfa_offset 48
 4656 0004 00AF     		add	r7, sp, #0
 4657              	.LCFI260:
 4658              		.cfi_def_cfa_register 7
 4659 0006 7860     		str	r0, [r7, #4]
 4660              	.LBB23:
  89:Cpp/main.cpp  ****     int led_idx = std::clamp(green_encoder.value + 0, 0, 15) + 10;
 4661              		.loc 11 89 44
 4662 0008 174B     		ldr	r3, .L147
 4663 000a 93F91830 		ldrsb	r3, [r3, #24]
 4664              		.loc 11 89 50
 4665 000e FB60     		str	r3, [r7, #12]
 4666              		.loc 11 89 55
 4667 0010 0023     		movs	r3, #0
 4668 0012 3B61     		str	r3, [r7, #16]
 4669              		.loc 11 89 58
 4670 0014 0F23     		movs	r3, #15
 4671 0016 7B61     		str	r3, [r7, #20]
 4672              		.loc 11 89 60
 4673 0018 07F11402 		add	r2, r7, #20
 4674 001c 07F11001 		add	r1, r7, #16
 4675 0020 07F10C03 		add	r3, r7, #12
 4676 0024 1846     		mov	r0, r3
 4677 0026 FFF7FEFF 		bl	_ZSt5clampIiERKT_S2_S2_S2_
 4678 002a 0346     		mov	r3, r0
 4679              		.loc 11 89 29
 4680 002c 1B68     		ldr	r3, [r3]
 4681              		.loc 11 89 64
 4682 002e 0A33     		adds	r3, r3, #10
 4683 0030 7B62     		str	r3, [r7, #36]
  90:Cpp/main.cpp  ****     leds.clear();
 4684              		.loc 11 90 15
 4685 0032 0E48     		ldr	r0, .L147+4
 4686 0034 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
  91:Cpp/main.cpp  ****     leds[led_idx] = {0x00, 0x80, 0x00};
 4687              		.loc 11 91 19
 4688 0038 0023     		movs	r3, #0
 4689 003a 3B76     		strb	r3, [r7, #24]
 4690 003c 8023     		movs	r3, #128
 4691 003e 7B76     		strb	r3, [r7, #25]
 4692 0040 0023     		movs	r3, #0
 4693 0042 BB76     		strb	r3, [r7, #26]
 4694              		.loc 11 91 17
 4695 0044 07F11C03 		add	r3, r7, #28
 4696 0048 7A6A     		ldr	r2, [r7, #36]
 4697 004a 0849     		ldr	r1, .L147+4
 4698 004c 1846     		mov	r0, r3
 4699 004e FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 4700              		.loc 11 91 38
 4701 0052 07F11C03 		add	r3, r7, #28
 4702 0056 B969     		ldr	r1, [r7, #24]
 4703 0058 1846     		mov	r0, r3
ARM GAS  /tmp/ccU23Djm.s 			page 143


 4704 005a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 4705              	.LBE23:
  92:Cpp/main.cpp  ****   };
 4706              		.loc 11 92 3
 4707 005e 00BF     		nop
 4708 0060 2837     		adds	r7, r7, #40
 4709              	.LCFI261:
 4710              		.cfi_def_cfa_offset 8
 4711 0062 BD46     		mov	sp, r7
 4712              	.LCFI262:
 4713              		.cfi_def_cfa_register 13
 4714              		@ sp needed
 4715 0064 80BD     		pop	{r7, pc}
 4716              	.L148:
 4717 0066 00BF     		.align	2
 4718              	.L147:
 4719 0068 00000000 		.word	green_encoder
 4720 006c 00000000 		.word	leds
 4721              		.cfi_endproc
 4722              	.LFE4115:
 4724              		.section	.text._ZZ13test_encodersvENUlvE0_4_FUNEv,"ax",%progbits
 4725              		.align	1
 4726              		.syntax unified
 4727              		.thumb
 4728              		.thumb_func
 4729              		.fpu fpv4-sp-d16
 4731              	_ZZ13test_encodersvENUlvE0_4_FUNEv:
 4732              	.LFB4116:
  88:Cpp/main.cpp  ****     int led_idx = std::clamp(green_encoder.value + 0, 0, 15) + 10;
 4733              		.loc 11 88 27
 4734              		.cfi_startproc
 4735              		@ args = 0, pretend = 0, frame = 0
 4736              		@ frame_needed = 1, uses_anonymous_args = 0
 4737 0000 80B5     		push	{r7, lr}
 4738              	.LCFI263:
 4739              		.cfi_def_cfa_offset 8
 4740              		.cfi_offset 7, -8
 4741              		.cfi_offset 14, -4
 4742 0002 00AF     		add	r7, sp, #0
 4743              	.LCFI264:
 4744              		.cfi_def_cfa_register 7
 4745              		.loc 11 92 3
 4746 0004 0020     		movs	r0, #0
 4747 0006 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE0_clEv
 4748 000a 80BD     		pop	{r7, pc}
 4749              		.cfi_endproc
 4750              	.LFE4116:
 4752              		.section	.text._ZZ13test_encodersvENKUlvE0_cvPFvvEEv,"ax",%progbits
 4753              		.align	1
 4754              		.syntax unified
 4755              		.thumb
 4756              		.thumb_func
 4757              		.fpu fpv4-sp-d16
 4759              	_ZZ13test_encodersvENKUlvE0_cvPFvvEEv:
 4760              	.LFB4117:
  88:Cpp/main.cpp  ****     int led_idx = std::clamp(green_encoder.value + 0, 0, 15) + 10;
 4761              		.loc 11 88 27
ARM GAS  /tmp/ccU23Djm.s 			page 144


 4762              		.cfi_startproc
 4763              		@ args = 0, pretend = 0, frame = 8
 4764              		@ frame_needed = 1, uses_anonymous_args = 0
 4765              		@ link register save eliminated.
 4766 0000 80B4     		push	{r7}
 4767              	.LCFI265:
 4768              		.cfi_def_cfa_offset 4
 4769              		.cfi_offset 7, -4
 4770 0002 83B0     		sub	sp, sp, #12
 4771              	.LCFI266:
 4772              		.cfi_def_cfa_offset 16
 4773 0004 00AF     		add	r7, sp, #0
 4774              	.LCFI267:
 4775              		.cfi_def_cfa_register 7
 4776 0006 7860     		str	r0, [r7, #4]
 4777              		.loc 11 92 3
 4778 0008 034B     		ldr	r3, .L153
 4779 000a 1846     		mov	r0, r3
 4780 000c 0C37     		adds	r7, r7, #12
 4781              	.LCFI268:
 4782              		.cfi_def_cfa_offset 4
 4783 000e BD46     		mov	sp, r7
 4784              	.LCFI269:
 4785              		.cfi_def_cfa_register 13
 4786              		@ sp needed
 4787 0010 5DF8047B 		ldr	r7, [sp], #4
 4788              	.LCFI270:
 4789              		.cfi_restore 7
 4790              		.cfi_def_cfa_offset 0
 4791 0014 7047     		bx	lr
 4792              	.L154:
 4793 0016 00BF     		.align	2
 4794              	.L153:
 4795 0018 00000000 		.word	_ZZ13test_encodersvENUlvE0_4_FUNEv
 4796              		.cfi_endproc
 4797              	.LFE4117:
 4799              		.section	.rodata
 4800 0012 0000     		.align	2
 4801              	.LC0:
 4802 0014 80       		.byte	-128
 4803 0015 80       		.byte	-128
 4804 0016 00       		.byte	0
 4805              		.section	.text._ZZ13test_encodersvENKUlvE1_clEv,"ax",%progbits
 4806              		.align	1
 4807              		.syntax unified
 4808              		.thumb
 4809              		.thumb_func
 4810              		.fpu fpv4-sp-d16
 4812              	_ZZ13test_encodersvENKUlvE1_clEv:
 4813              	.LFB4118:
  93:Cpp/main.cpp  ****   yellow_encoder.handler = [] {
 4814              		.loc 11 93 28
 4815              		.cfi_startproc
 4816              		@ args = 0, pretend = 0, frame = 40
 4817              		@ frame_needed = 1, uses_anonymous_args = 0
 4818 0000 80B5     		push	{r7, lr}
 4819              	.LCFI271:
ARM GAS  /tmp/ccU23Djm.s 			page 145


 4820              		.cfi_def_cfa_offset 8
 4821              		.cfi_offset 7, -8
 4822              		.cfi_offset 14, -4
 4823 0002 8AB0     		sub	sp, sp, #40
 4824              	.LCFI272:
 4825              		.cfi_def_cfa_offset 48
 4826 0004 00AF     		add	r7, sp, #0
 4827              	.LCFI273:
 4828              		.cfi_def_cfa_register 7
 4829 0006 7860     		str	r0, [r7, #4]
 4830              	.LBB24:
  94:Cpp/main.cpp  ****     int led_idx = std::clamp(yellow_encoder.value + 0, 0, 15) + 10;
 4831              		.loc 11 94 45
 4832 0008 184B     		ldr	r3, .L156
 4833 000a 93F91830 		ldrsb	r3, [r3, #24]
 4834              		.loc 11 94 51
 4835 000e FB60     		str	r3, [r7, #12]
 4836              		.loc 11 94 56
 4837 0010 0023     		movs	r3, #0
 4838 0012 3B61     		str	r3, [r7, #16]
 4839              		.loc 11 94 59
 4840 0014 0F23     		movs	r3, #15
 4841 0016 7B61     		str	r3, [r7, #20]
 4842              		.loc 11 94 61
 4843 0018 07F11402 		add	r2, r7, #20
 4844 001c 07F11001 		add	r1, r7, #16
 4845 0020 07F10C03 		add	r3, r7, #12
 4846 0024 1846     		mov	r0, r3
 4847 0026 FFF7FEFF 		bl	_ZSt5clampIiERKT_S2_S2_S2_
 4848 002a 0346     		mov	r3, r0
 4849              		.loc 11 94 29
 4850 002c 1B68     		ldr	r3, [r3]
 4851              		.loc 11 94 65
 4852 002e 0A33     		adds	r3, r3, #10
 4853 0030 7B62     		str	r3, [r7, #36]
  95:Cpp/main.cpp  ****     leds.clear();
 4854              		.loc 11 95 15
 4855 0032 0F48     		ldr	r0, .L156+4
 4856 0034 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
  96:Cpp/main.cpp  ****     leds[led_idx] = {0x80, 0x80, 0x00};
 4857              		.loc 11 96 19
 4858 0038 0E4A     		ldr	r2, .L156+8
 4859 003a 07F11803 		add	r3, r7, #24
 4860 003e 1268     		ldr	r2, [r2]
 4861 0040 1146     		mov	r1, r2	@ movhi
 4862 0042 1980     		strh	r1, [r3]	@ movhi
 4863 0044 0233     		adds	r3, r3, #2
 4864 0046 120C     		lsrs	r2, r2, #16
 4865 0048 1A70     		strb	r2, [r3]
 4866              		.loc 11 96 17
 4867 004a 07F11C03 		add	r3, r7, #28
 4868 004e 7A6A     		ldr	r2, [r7, #36]
 4869 0050 0749     		ldr	r1, .L156+4
 4870 0052 1846     		mov	r0, r3
 4871 0054 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 4872              		.loc 11 96 38
 4873 0058 07F11C03 		add	r3, r7, #28
ARM GAS  /tmp/ccU23Djm.s 			page 146


 4874 005c B969     		ldr	r1, [r7, #24]
 4875 005e 1846     		mov	r0, r3
 4876 0060 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 4877              	.LBE24:
  97:Cpp/main.cpp  ****   };
 4878              		.loc 11 97 3
 4879 0064 00BF     		nop
 4880 0066 2837     		adds	r7, r7, #40
 4881              	.LCFI274:
 4882              		.cfi_def_cfa_offset 8
 4883 0068 BD46     		mov	sp, r7
 4884              	.LCFI275:
 4885              		.cfi_def_cfa_register 13
 4886              		@ sp needed
 4887 006a 80BD     		pop	{r7, pc}
 4888              	.L157:
 4889              		.align	2
 4890              	.L156:
 4891 006c 00000000 		.word	yellow_encoder
 4892 0070 00000000 		.word	leds
 4893 0074 14000000 		.word	.LC0
 4894              		.cfi_endproc
 4895              	.LFE4118:
 4897              		.section	.text._ZZ13test_encodersvENUlvE1_4_FUNEv,"ax",%progbits
 4898              		.align	1
 4899              		.syntax unified
 4900              		.thumb
 4901              		.thumb_func
 4902              		.fpu fpv4-sp-d16
 4904              	_ZZ13test_encodersvENUlvE1_4_FUNEv:
 4905              	.LFB4119:
  93:Cpp/main.cpp  ****     int led_idx = std::clamp(yellow_encoder.value + 0, 0, 15) + 10;
 4906              		.loc 11 93 28
 4907              		.cfi_startproc
 4908              		@ args = 0, pretend = 0, frame = 0
 4909              		@ frame_needed = 1, uses_anonymous_args = 0
 4910 0000 80B5     		push	{r7, lr}
 4911              	.LCFI276:
 4912              		.cfi_def_cfa_offset 8
 4913              		.cfi_offset 7, -8
 4914              		.cfi_offset 14, -4
 4915 0002 00AF     		add	r7, sp, #0
 4916              	.LCFI277:
 4917              		.cfi_def_cfa_register 7
 4918              		.loc 11 97 3
 4919 0004 0020     		movs	r0, #0
 4920 0006 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE1_clEv
 4921 000a 80BD     		pop	{r7, pc}
 4922              		.cfi_endproc
 4923              	.LFE4119:
 4925              		.section	.text._ZZ13test_encodersvENKUlvE1_cvPFvvEEv,"ax",%progbits
 4926              		.align	1
 4927              		.syntax unified
 4928              		.thumb
 4929              		.thumb_func
 4930              		.fpu fpv4-sp-d16
 4932              	_ZZ13test_encodersvENKUlvE1_cvPFvvEEv:
ARM GAS  /tmp/ccU23Djm.s 			page 147


 4933              	.LFB4120:
  93:Cpp/main.cpp  ****     int led_idx = std::clamp(yellow_encoder.value + 0, 0, 15) + 10;
 4934              		.loc 11 93 28
 4935              		.cfi_startproc
 4936              		@ args = 0, pretend = 0, frame = 8
 4937              		@ frame_needed = 1, uses_anonymous_args = 0
 4938              		@ link register save eliminated.
 4939 0000 80B4     		push	{r7}
 4940              	.LCFI278:
 4941              		.cfi_def_cfa_offset 4
 4942              		.cfi_offset 7, -4
 4943 0002 83B0     		sub	sp, sp, #12
 4944              	.LCFI279:
 4945              		.cfi_def_cfa_offset 16
 4946 0004 00AF     		add	r7, sp, #0
 4947              	.LCFI280:
 4948              		.cfi_def_cfa_register 7
 4949 0006 7860     		str	r0, [r7, #4]
 4950              		.loc 11 97 3
 4951 0008 034B     		ldr	r3, .L162
 4952 000a 1846     		mov	r0, r3
 4953 000c 0C37     		adds	r7, r7, #12
 4954              	.LCFI281:
 4955              		.cfi_def_cfa_offset 4
 4956 000e BD46     		mov	sp, r7
 4957              	.LCFI282:
 4958              		.cfi_def_cfa_register 13
 4959              		@ sp needed
 4960 0010 5DF8047B 		ldr	r7, [sp], #4
 4961              	.LCFI283:
 4962              		.cfi_restore 7
 4963              		.cfi_def_cfa_offset 0
 4964 0014 7047     		bx	lr
 4965              	.L163:
 4966 0016 00BF     		.align	2
 4967              	.L162:
 4968 0018 00000000 		.word	_ZZ13test_encodersvENUlvE1_4_FUNEv
 4969              		.cfi_endproc
 4970              	.LFE4120:
 4972              		.section	.text._ZZ13test_encodersvENKUlvE2_clEv,"ax",%progbits
 4973              		.align	1
 4974              		.syntax unified
 4975              		.thumb
 4976              		.thumb_func
 4977              		.fpu fpv4-sp-d16
 4979              	_ZZ13test_encodersvENKUlvE2_clEv:
 4980              	.LFB4121:
  98:Cpp/main.cpp  ****   red_encoder.handler = [] {
 4981              		.loc 11 98 25
 4982              		.cfi_startproc
 4983              		@ args = 0, pretend = 0, frame = 40
 4984              		@ frame_needed = 1, uses_anonymous_args = 0
 4985 0000 80B5     		push	{r7, lr}
 4986              	.LCFI284:
 4987              		.cfi_def_cfa_offset 8
 4988              		.cfi_offset 7, -8
 4989              		.cfi_offset 14, -4
ARM GAS  /tmp/ccU23Djm.s 			page 148


 4990 0002 8AB0     		sub	sp, sp, #40
 4991              	.LCFI285:
 4992              		.cfi_def_cfa_offset 48
 4993 0004 00AF     		add	r7, sp, #0
 4994              	.LCFI286:
 4995              		.cfi_def_cfa_register 7
 4996 0006 7860     		str	r0, [r7, #4]
 4997              	.LBB25:
  99:Cpp/main.cpp  ****     int led_idx = std::clamp(red_encoder.value + 0, 0, 15) + 10;
 4998              		.loc 11 99 42
 4999 0008 174B     		ldr	r3, .L165
 5000 000a 93F91830 		ldrsb	r3, [r3, #24]
 5001              		.loc 11 99 48
 5002 000e FB60     		str	r3, [r7, #12]
 5003              		.loc 11 99 53
 5004 0010 0023     		movs	r3, #0
 5005 0012 3B61     		str	r3, [r7, #16]
 5006              		.loc 11 99 56
 5007 0014 0F23     		movs	r3, #15
 5008 0016 7B61     		str	r3, [r7, #20]
 5009              		.loc 11 99 58
 5010 0018 07F11402 		add	r2, r7, #20
 5011 001c 07F11001 		add	r1, r7, #16
 5012 0020 07F10C03 		add	r3, r7, #12
 5013 0024 1846     		mov	r0, r3
 5014 0026 FFF7FEFF 		bl	_ZSt5clampIiERKT_S2_S2_S2_
 5015 002a 0346     		mov	r3, r0
 5016              		.loc 11 99 29
 5017 002c 1B68     		ldr	r3, [r3]
 5018              		.loc 11 99 62
 5019 002e 0A33     		adds	r3, r3, #10
 5020 0030 7B62     		str	r3, [r7, #36]
 100:Cpp/main.cpp  ****     leds.clear();
 5021              		.loc 11 100 15
 5022 0032 0E48     		ldr	r0, .L165+4
 5023 0034 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
 101:Cpp/main.cpp  ****     leds[led_idx] = {0x80, 0x00, 0x00};
 5024              		.loc 11 101 19
 5025 0038 8023     		movs	r3, #128
 5026 003a 3B76     		strb	r3, [r7, #24]
 5027 003c 0023     		movs	r3, #0
 5028 003e 7B76     		strb	r3, [r7, #25]
 5029 0040 0023     		movs	r3, #0
 5030 0042 BB76     		strb	r3, [r7, #26]
 5031              		.loc 11 101 17
 5032 0044 07F11C03 		add	r3, r7, #28
 5033 0048 7A6A     		ldr	r2, [r7, #36]
 5034 004a 0849     		ldr	r1, .L165+4
 5035 004c 1846     		mov	r0, r3
 5036 004e FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 5037              		.loc 11 101 38
 5038 0052 07F11C03 		add	r3, r7, #28
 5039 0056 B969     		ldr	r1, [r7, #24]
 5040 0058 1846     		mov	r0, r3
 5041 005a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 5042              	.LBE25:
 102:Cpp/main.cpp  ****   };
ARM GAS  /tmp/ccU23Djm.s 			page 149


 5043              		.loc 11 102 3
 5044 005e 00BF     		nop
 5045 0060 2837     		adds	r7, r7, #40
 5046              	.LCFI287:
 5047              		.cfi_def_cfa_offset 8
 5048 0062 BD46     		mov	sp, r7
 5049              	.LCFI288:
 5050              		.cfi_def_cfa_register 13
 5051              		@ sp needed
 5052 0064 80BD     		pop	{r7, pc}
 5053              	.L166:
 5054 0066 00BF     		.align	2
 5055              	.L165:
 5056 0068 00000000 		.word	red_encoder
 5057 006c 00000000 		.word	leds
 5058              		.cfi_endproc
 5059              	.LFE4121:
 5061              		.section	.text._ZZ13test_encodersvENUlvE2_4_FUNEv,"ax",%progbits
 5062              		.align	1
 5063              		.syntax unified
 5064              		.thumb
 5065              		.thumb_func
 5066              		.fpu fpv4-sp-d16
 5068              	_ZZ13test_encodersvENUlvE2_4_FUNEv:
 5069              	.LFB4122:
  98:Cpp/main.cpp  ****     int led_idx = std::clamp(red_encoder.value + 0, 0, 15) + 10;
 5070              		.loc 11 98 25
 5071              		.cfi_startproc
 5072              		@ args = 0, pretend = 0, frame = 0
 5073              		@ frame_needed = 1, uses_anonymous_args = 0
 5074 0000 80B5     		push	{r7, lr}
 5075              	.LCFI289:
 5076              		.cfi_def_cfa_offset 8
 5077              		.cfi_offset 7, -8
 5078              		.cfi_offset 14, -4
 5079 0002 00AF     		add	r7, sp, #0
 5080              	.LCFI290:
 5081              		.cfi_def_cfa_register 7
 5082              		.loc 11 102 3
 5083 0004 0020     		movs	r0, #0
 5084 0006 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE2_clEv
 5085 000a 80BD     		pop	{r7, pc}
 5086              		.cfi_endproc
 5087              	.LFE4122:
 5089              		.section	.text._ZZ13test_encodersvENKUlvE2_cvPFvvEEv,"ax",%progbits
 5090              		.align	1
 5091              		.syntax unified
 5092              		.thumb
 5093              		.thumb_func
 5094              		.fpu fpv4-sp-d16
 5096              	_ZZ13test_encodersvENKUlvE2_cvPFvvEEv:
 5097              	.LFB4123:
  98:Cpp/main.cpp  ****     int led_idx = std::clamp(red_encoder.value + 0, 0, 15) + 10;
 5098              		.loc 11 98 25
 5099              		.cfi_startproc
 5100              		@ args = 0, pretend = 0, frame = 8
 5101              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 150


 5102              		@ link register save eliminated.
 5103 0000 80B4     		push	{r7}
 5104              	.LCFI291:
 5105              		.cfi_def_cfa_offset 4
 5106              		.cfi_offset 7, -4
 5107 0002 83B0     		sub	sp, sp, #12
 5108              	.LCFI292:
 5109              		.cfi_def_cfa_offset 16
 5110 0004 00AF     		add	r7, sp, #0
 5111              	.LCFI293:
 5112              		.cfi_def_cfa_register 7
 5113 0006 7860     		str	r0, [r7, #4]
 5114              		.loc 11 102 3
 5115 0008 034B     		ldr	r3, .L171
 5116 000a 1846     		mov	r0, r3
 5117 000c 0C37     		adds	r7, r7, #12
 5118              	.LCFI294:
 5119              		.cfi_def_cfa_offset 4
 5120 000e BD46     		mov	sp, r7
 5121              	.LCFI295:
 5122              		.cfi_def_cfa_register 13
 5123              		@ sp needed
 5124 0010 5DF8047B 		ldr	r7, [sp], #4
 5125              	.LCFI296:
 5126              		.cfi_restore 7
 5127              		.cfi_def_cfa_offset 0
 5128 0014 7047     		bx	lr
 5129              	.L172:
 5130 0016 00BF     		.align	2
 5131              	.L171:
 5132 0018 00000000 		.word	_ZZ13test_encodersvENUlvE2_4_FUNEv
 5133              		.cfi_endproc
 5134              	.LFE4123:
 5136              		.section	.text._Z13test_encodersv,"ax",%progbits
 5137              		.align	1
 5138              		.global	_Z13test_encodersv
 5139              		.syntax unified
 5140              		.thumb
 5141              		.thumb_func
 5142              		.fpu fpv4-sp-d16
 5144              	_Z13test_encodersv:
 5145              	.LFB4111:
  82:Cpp/main.cpp  ****   blue_encoder.handler = [] {
 5146              		.loc 11 82 1
 5147              		.cfi_startproc
 5148              		@ args = 0, pretend = 0, frame = 16
 5149              		@ frame_needed = 1, uses_anonymous_args = 0
 5150 0000 80B5     		push	{r7, lr}
 5151              	.LCFI297:
 5152              		.cfi_def_cfa_offset 8
 5153              		.cfi_offset 7, -8
 5154              		.cfi_offset 14, -4
 5155 0002 84B0     		sub	sp, sp, #16
 5156              	.LCFI298:
 5157              		.cfi_def_cfa_offset 24
 5158 0004 00AF     		add	r7, sp, #0
 5159              	.LCFI299:
ARM GAS  /tmp/ccU23Djm.s 			page 151


 5160              		.cfi_def_cfa_register 7
  87:Cpp/main.cpp  ****   green_encoder.handler = [] {
 5161              		.loc 11 87 3
 5162 0006 3B46     		mov	r3, r7
 5163 0008 1846     		mov	r0, r3
 5164 000a FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE_cvPFvvEEv
 5165 000e 0346     		mov	r3, r0
  83:Cpp/main.cpp  ****     int led_idx = std::clamp(blue_encoder.value + 0, 0, 15) + 10;
 5166              		.loc 11 83 24
 5167 0010 0E4A     		ldr	r2, .L174
 5168 0012 D361     		str	r3, [r2, #28]
  92:Cpp/main.cpp  ****   yellow_encoder.handler = [] {
 5169              		.loc 11 92 3
 5170 0014 3B1D     		adds	r3, r7, #4
 5171 0016 1846     		mov	r0, r3
 5172 0018 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE0_cvPFvvEEv
 5173 001c 0346     		mov	r3, r0
  88:Cpp/main.cpp  ****     int led_idx = std::clamp(green_encoder.value + 0, 0, 15) + 10;
 5174              		.loc 11 88 25
 5175 001e 0C4A     		ldr	r2, .L174+4
 5176 0020 D361     		str	r3, [r2, #28]
  97:Cpp/main.cpp  ****   red_encoder.handler = [] {
 5177              		.loc 11 97 3
 5178 0022 07F10803 		add	r3, r7, #8
 5179 0026 1846     		mov	r0, r3
 5180 0028 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE1_cvPFvvEEv
 5181 002c 0346     		mov	r3, r0
  93:Cpp/main.cpp  ****     int led_idx = std::clamp(yellow_encoder.value + 0, 0, 15) + 10;
 5182              		.loc 11 93 26
 5183 002e 094A     		ldr	r2, .L174+8
 5184 0030 D361     		str	r3, [r2, #28]
 5185              		.loc 11 102 3
 5186 0032 07F10C03 		add	r3, r7, #12
 5187 0036 1846     		mov	r0, r3
 5188 0038 FFF7FEFF 		bl	_ZZ13test_encodersvENKUlvE2_cvPFvvEEv
 5189 003c 0346     		mov	r3, r0
  98:Cpp/main.cpp  ****     int led_idx = std::clamp(red_encoder.value + 0, 0, 15) + 10;
 5190              		.loc 11 98 23
 5191 003e 064A     		ldr	r2, .L174+12
 5192 0040 D361     		str	r3, [r2, #28]
 103:Cpp/main.cpp  **** }
 5193              		.loc 11 103 1
 5194 0042 00BF     		nop
 5195 0044 1037     		adds	r7, r7, #16
 5196              	.LCFI300:
 5197              		.cfi_def_cfa_offset 8
 5198 0046 BD46     		mov	sp, r7
 5199              	.LCFI301:
 5200              		.cfi_def_cfa_register 13
 5201              		@ sp needed
 5202 0048 80BD     		pop	{r7, pc}
 5203              	.L175:
 5204 004a 00BF     		.align	2
 5205              	.L174:
 5206 004c 00000000 		.word	blue_encoder
 5207 0050 00000000 		.word	green_encoder
 5208 0054 00000000 		.word	yellow_encoder
ARM GAS  /tmp/ccU23Djm.s 			page 152


 5209 0058 00000000 		.word	red_encoder
 5210              		.cfi_endproc
 5211              	.LFE4111:
 5213              		.global	_ZN4otto3mcu5power5stateE
 5214              		.section	.bss._ZN4otto3mcu5power5stateE,"aw",%nobits
 5217              	_ZN4otto3mcu5power5stateE:
 5218 0000 00       		.space	1
 5219              		.global	_ZN4otto3mcu5power12power_switchE
 5220              		.section	.data._ZN4otto3mcu5power12power_switchE,"aw"
 5221              		.align	2
 5224              	_ZN4otto3mcu5power12power_switchE:
 5225 0000 000C0240 		.word	1073875968
 5226 0004 01000000 		.word	1
 5227 0008 00       		.byte	0
 5228 0009 000000   		.space	3
 5229              		.global	_ZN4otto3mcu5power9rpi_powerE
 5230              		.section	.data._ZN4otto3mcu5power9rpi_powerE,"aw"
 5231              		.align	2
 5234              	_ZN4otto3mcu5power9rpi_powerE:
 5235 0000 000C0240 		.word	1073875968
 5236 0004 02000000 		.word	2
 5237 0008 00       		.byte	0
 5238 0009 000000   		.space	3
 5239              		.global	_ZN4otto3mcu5power9led_powerE
 5240              		.section	.data._ZN4otto3mcu5power9led_powerE,"aw"
 5241              		.align	2
 5244              	_ZN4otto3mcu5power9led_powerE:
 5245 0000 00000240 		.word	1073872896
 5246 0004 00040000 		.word	1024
 5247 0008 00       		.byte	0
 5248 0009 000000   		.space	3
 5249              		.section	.text._ZN4otto3mcu5power13state_changedEv,"ax",%progbits
 5250              		.align	1
 5251              		.global	_ZN4otto3mcu5power13state_changedEv
 5252              		.syntax unified
 5253              		.thumb
 5254              		.thumb_func
 5255              		.fpu fpv4-sp-d16
 5257              	_ZN4otto3mcu5power13state_changedEv:
 5258              	.LFB4124:
 104:Cpp/main.cpp  **** 
 105:Cpp/main.cpp  **** namespace otto::mcu::power {
 106:Cpp/main.cpp  ****   bool state = false;
 107:Cpp/main.cpp  ****   GpioPin power_switch = {PWR_BUTTON_GPIO_Port, PWR_BUTTON_Pin};
 108:Cpp/main.cpp  ****   GpioPin rpi_power = {PI_PWR_EN_GPIO_Port, PI_PWR_EN_Pin};
 109:Cpp/main.cpp  ****   GpioPin led_power = {LED_PWR_EN_GPIO_Port, LED_PWR_EN_Pin};
 110:Cpp/main.cpp  **** 
 111:Cpp/main.cpp  ****   void state_changed()
 112:Cpp/main.cpp  ****   {
 5259              		.loc 11 112 3
 5260              		.cfi_startproc
 5261              		@ args = 0, pretend = 0, frame = 0
 5262              		@ frame_needed = 1, uses_anonymous_args = 0
 5263 0000 80B5     		push	{r7, lr}
 5264              	.LCFI302:
 5265              		.cfi_def_cfa_offset 8
 5266              		.cfi_offset 7, -8
ARM GAS  /tmp/ccU23Djm.s 			page 153


 5267              		.cfi_offset 14, -4
 5268 0002 00AF     		add	r7, sp, #0
 5269              	.LCFI303:
 5270              		.cfi_def_cfa_register 7
 113:Cpp/main.cpp  ****     rpi_power.write(state);
 5271              		.loc 11 113 20
 5272 0004 094B     		ldr	r3, .L177
 5273 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5274 0008 1946     		mov	r1, r3
 5275 000a 0948     		ldr	r0, .L177+4
 5276 000c FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin5writeEb
 114:Cpp/main.cpp  ****     led_power.write(state);
 5277              		.loc 11 114 20
 5278 0010 064B     		ldr	r3, .L177
 5279 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5280 0014 1946     		mov	r1, r3
 5281 0016 0748     		ldr	r0, .L177+8
 5282 0018 FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin5writeEb
 115:Cpp/main.cpp  ****     status_led.write(state);
 5283              		.loc 11 115 21
 5284 001c 034B     		ldr	r3, .L177
 5285 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5286 0020 1946     		mov	r1, r3
 5287 0022 0548     		ldr	r0, .L177+12
 5288 0024 FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin5writeEb
 116:Cpp/main.cpp  ****   }
 5289              		.loc 11 116 3
 5290 0028 00BF     		nop
 5291 002a 80BD     		pop	{r7, pc}
 5292              	.L178:
 5293              		.align	2
 5294              	.L177:
 5295 002c 00000000 		.word	_ZN4otto3mcu5power5stateE
 5296 0030 00000000 		.word	_ZN4otto3mcu5power9rpi_powerE
 5297 0034 00000000 		.word	_ZN4otto3mcu5power9led_powerE
 5298 0038 00000000 		.word	_ZN4otto3mcuL10status_ledE
 5299              		.cfi_endproc
 5300              	.LFE4124:
 5302              		.section	.text._ZN4otto3mcu5power4pollEv,"ax",%progbits
 5303              		.align	1
 5304              		.global	_ZN4otto3mcu5power4pollEv
 5305              		.syntax unified
 5306              		.thumb
 5307              		.thumb_func
 5308              		.fpu fpv4-sp-d16
 5310              	_ZN4otto3mcu5power4pollEv:
 5311              	.LFB4125:
 117:Cpp/main.cpp  **** 
 118:Cpp/main.cpp  ****   void poll()
 119:Cpp/main.cpp  ****   {
 5312              		.loc 11 119 3
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 8
 5315              		@ frame_needed = 1, uses_anonymous_args = 0
 5316 0000 80B5     		push	{r7, lr}
 5317              	.LCFI304:
 5318              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccU23Djm.s 			page 154


 5319              		.cfi_offset 7, -8
 5320              		.cfi_offset 14, -4
 5321 0002 82B0     		sub	sp, sp, #8
 5322              	.LCFI305:
 5323              		.cfi_def_cfa_offset 16
 5324 0004 00AF     		add	r7, sp, #0
 5325              	.LCFI306:
 5326              		.cfi_def_cfa_register 7
 120:Cpp/main.cpp  ****     auto new_state = power_switch.read();
 5327              		.loc 11 120 39
 5328 0006 0A48     		ldr	r0, .L183
 5329 0008 FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin4readEv
 5330 000c 0346     		mov	r3, r0
 5331 000e FB71     		strb	r3, [r7, #7]
 121:Cpp/main.cpp  ****     if (new_state == state) return;
 5332              		.loc 11 121 19
 5333 0010 084B     		ldr	r3, .L183+4
 5334 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5335              		.loc 11 121 5
 5336 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5337 0016 9A42     		cmp	r2, r3
 5338 0018 05D0     		beq	.L182
 122:Cpp/main.cpp  ****     state = new_state;
 5339              		.loc 11 122 11
 5340 001a 064A     		ldr	r2, .L183+4
 5341 001c FB79     		ldrb	r3, [r7, #7]
 5342 001e 1370     		strb	r3, [r2]
 123:Cpp/main.cpp  ****     state_changed();
 5343              		.loc 11 123 18
 5344 0020 FFF7FEFF 		bl	_ZN4otto3mcu5power13state_changedEv
 5345 0024 00E0     		b	.L179
 5346              	.L182:
 121:Cpp/main.cpp  ****     if (new_state == state) return;
 5347              		.loc 11 121 29
 5348 0026 00BF     		nop
 5349              	.L179:
 124:Cpp/main.cpp  ****   }
 5350              		.loc 11 124 3
 5351 0028 0837     		adds	r7, r7, #8
 5352              	.LCFI307:
 5353              		.cfi_def_cfa_offset 8
 5354 002a BD46     		mov	sp, r7
 5355              	.LCFI308:
 5356              		.cfi_def_cfa_register 13
 5357              		@ sp needed
 5358 002c 80BD     		pop	{r7, pc}
 5359              	.L184:
 5360 002e 00BF     		.align	2
 5361              	.L183:
 5362 0030 00000000 		.word	_ZN4otto3mcu5power12power_switchE
 5363 0034 00000000 		.word	_ZN4otto3mcu5power5stateE
 5364              		.cfi_endproc
 5365              	.LFE4125:
 5367              		.section	.text._ZN4otto3mcu5power4initEv,"ax",%progbits
 5368              		.align	1
 5369              		.global	_ZN4otto3mcu5power4initEv
 5370              		.syntax unified
ARM GAS  /tmp/ccU23Djm.s 			page 155


 5371              		.thumb
 5372              		.thumb_func
 5373              		.fpu fpv4-sp-d16
 5375              	_ZN4otto3mcu5power4initEv:
 5376              	.LFB4126:
 125:Cpp/main.cpp  **** 
 126:Cpp/main.cpp  ****   void init()
 127:Cpp/main.cpp  ****   {
 5377              		.loc 11 127 3
 5378              		.cfi_startproc
 5379              		@ args = 0, pretend = 0, frame = 72
 5380              		@ frame_needed = 1, uses_anonymous_args = 0
 5381 0000 80B5     		push	{r7, lr}
 5382              	.LCFI309:
 5383              		.cfi_def_cfa_offset 8
 5384              		.cfi_offset 7, -8
 5385              		.cfi_offset 14, -4
 5386 0002 92B0     		sub	sp, sp, #72
 5387              	.LCFI310:
 5388              		.cfi_def_cfa_offset 80
 5389 0004 00AF     		add	r7, sp, #0
 5390              	.LCFI311:
 5391              		.cfi_def_cfa_register 7
 128:Cpp/main.cpp  ****     power_switch.init(GpioPin::Mode::input, GpioPin::Pull::up);
 5392              		.loc 11 128 22
 5393 0006 0023     		movs	r3, #0
 5394 0008 0122     		movs	r2, #1
 5395 000a 0021     		movs	r1, #0
 5396 000c 0C48     		ldr	r0, .L186
 5397 000e FFF7FEFF 		bl	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
 129:Cpp/main.cpp  ****     main_loop.schedule(poll, 0, 500);
 5398              		.loc 11 129 23
 5399 0012 3B46     		mov	r3, r7
 5400 0014 0B49     		ldr	r1, .L186+4
 5401 0016 1846     		mov	r0, r3
 5402 0018 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IRS0_EEOT_
 5403 001c 3946     		mov	r1, r7
 5404 001e 4FF4FA73 		mov	r3, #500
 5405 0022 0022     		movs	r2, #0
 5406 0024 0848     		ldr	r0, .L186+8
 5407 0026 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm
 5408              		.loc 11 129 36
 5409 002a 3B46     		mov	r3, r7
 5410 002c 1846     		mov	r0, r3
 5411 002e FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev
 130:Cpp/main.cpp  ****     state_changed();
 5412              		.loc 11 130 18
 5413 0032 FFF7FEFF 		bl	_ZN4otto3mcu5power13state_changedEv
 131:Cpp/main.cpp  ****   }
 5414              		.loc 11 131 3
 5415 0036 00BF     		nop
 5416 0038 4837     		adds	r7, r7, #72
 5417              	.LCFI312:
 5418              		.cfi_def_cfa_offset 8
 5419 003a BD46     		mov	sp, r7
 5420              	.LCFI313:
 5421              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccU23Djm.s 			page 156


 5422              		@ sp needed
 5423 003c 80BD     		pop	{r7, pc}
 5424              	.L187:
 5425 003e 00BF     		.align	2
 5426              	.L186:
 5427 0040 00000000 		.word	_ZN4otto3mcu5power12power_switchE
 5428 0044 00000000 		.word	_ZN4otto3mcu5power4pollEv
 5429 0048 00000000 		.word	_ZN4otto3mcu9main_loopE
 5430              		.cfi_endproc
 5431              	.LFE4126:
 5433              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 5434              		.align	1
 5435              		.global	HAL_GPIO_EXTI_Callback
 5436              		.syntax unified
 5437              		.thumb
 5438              		.thumb_func
 5439              		.fpu fpv4-sp-d16
 5441              	HAL_GPIO_EXTI_Callback:
 5442              	.LFB4127:
 132:Cpp/main.cpp  **** } // namespace otto::mcu::power
 133:Cpp/main.cpp  **** 
 134:Cpp/main.cpp  **** extern "C" {
 135:Cpp/main.cpp  **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 136:Cpp/main.cpp  **** {
 5443              		.loc 11 136 1
 5444              		.cfi_startproc
 5445              		@ args = 0, pretend = 0, frame = 8
 5446              		@ frame_needed = 1, uses_anonymous_args = 0
 5447 0000 80B5     		push	{r7, lr}
 5448              	.LCFI314:
 5449              		.cfi_def_cfa_offset 8
 5450              		.cfi_offset 7, -8
 5451              		.cfi_offset 14, -4
 5452 0002 82B0     		sub	sp, sp, #8
 5453              	.LCFI315:
 5454              		.cfi_def_cfa_offset 16
 5455 0004 00AF     		add	r7, sp, #0
 5456              	.LCFI316:
 5457              		.cfi_def_cfa_register 7
 5458 0006 0346     		mov	r3, r0
 5459 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 137:Cpp/main.cpp  ****   blue_encoder.irq_checked(GPIO_Pin);
 5460              		.loc 11 137 27
 5461 000a FB88     		ldrh	r3, [r7, #6]
 5462 000c 1946     		mov	r1, r3
 5463 000e 0B48     		ldr	r0, .L189
 5464 0010 FFF7FEFF 		bl	_ZN4otto3mcu7Encoder11irq_checkedEt
 138:Cpp/main.cpp  ****   green_encoder.irq_checked(GPIO_Pin);
 5465              		.loc 11 138 28
 5466 0014 FB88     		ldrh	r3, [r7, #6]
 5467 0016 1946     		mov	r1, r3
 5468 0018 0948     		ldr	r0, .L189+4
 5469 001a FFF7FEFF 		bl	_ZN4otto3mcu7Encoder11irq_checkedEt
 139:Cpp/main.cpp  ****   yellow_encoder.irq_checked(GPIO_Pin);
 5470              		.loc 11 139 29
 5471 001e FB88     		ldrh	r3, [r7, #6]
 5472 0020 1946     		mov	r1, r3
ARM GAS  /tmp/ccU23Djm.s 			page 157


 5473 0022 0848     		ldr	r0, .L189+8
 5474 0024 FFF7FEFF 		bl	_ZN4otto3mcu7Encoder11irq_checkedEt
 140:Cpp/main.cpp  ****   red_encoder.irq_checked(GPIO_Pin);
 5475              		.loc 11 140 26
 5476 0028 FB88     		ldrh	r3, [r7, #6]
 5477 002a 1946     		mov	r1, r3
 5478 002c 0648     		ldr	r0, .L189+12
 5479 002e FFF7FEFF 		bl	_ZN4otto3mcu7Encoder11irq_checkedEt
 141:Cpp/main.cpp  **** }
 5480              		.loc 11 141 1
 5481 0032 00BF     		nop
 5482 0034 0837     		adds	r7, r7, #8
 5483              	.LCFI317:
 5484              		.cfi_def_cfa_offset 8
 5485 0036 BD46     		mov	sp, r7
 5486              	.LCFI318:
 5487              		.cfi_def_cfa_register 13
 5488              		@ sp needed
 5489 0038 80BD     		pop	{r7, pc}
 5490              	.L190:
 5491 003a 00BF     		.align	2
 5492              	.L189:
 5493 003c 00000000 		.word	blue_encoder
 5494 0040 00000000 		.word	green_encoder
 5495 0044 00000000 		.word	yellow_encoder
 5496 0048 00000000 		.word	red_encoder
 5497              		.cfi_endproc
 5498              	.LFE4127:
 5500              		.section	.text._ZZ14OTTO_main_loopENKUlvE_clEv,"ax",%progbits
 5501              		.align	1
 5502              		.syntax unified
 5503              		.thumb
 5504              		.thumb_func
 5505              		.fpu fpv4-sp-d16
 5507              	_ZZ14OTTO_main_loopENKUlvE_clEv:
 5508              	.LFB4129:
 142:Cpp/main.cpp  **** 
 143:Cpp/main.cpp  **** void OTTO_main_loop()
 144:Cpp/main.cpp  **** {
 145:Cpp/main.cpp  ****   key_table.init();
 146:Cpp/main.cpp  ****   leds.init();
 147:Cpp/main.cpp  ****   main_loop.schedule([] { leds.maybe_update(); }, 0, 20);
 5509              		.loc 11 147 22
 5510              		.cfi_startproc
 5511              		@ args = 0, pretend = 0, frame = 8
 5512              		@ frame_needed = 1, uses_anonymous_args = 0
 5513 0000 80B5     		push	{r7, lr}
 5514              	.LCFI319:
 5515              		.cfi_def_cfa_offset 8
 5516              		.cfi_offset 7, -8
 5517              		.cfi_offset 14, -4
 5518 0002 82B0     		sub	sp, sp, #8
 5519              	.LCFI320:
 5520              		.cfi_def_cfa_offset 16
 5521 0004 00AF     		add	r7, sp, #0
 5522              	.LCFI321:
 5523              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccU23Djm.s 			page 158


 5524 0006 7860     		str	r0, [r7, #4]
 5525              		.loc 11 147 44
 5526 0008 0348     		ldr	r0, .L192
 5527 000a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv
 5528              		.loc 11 147 48
 5529 000e 00BF     		nop
 5530 0010 0837     		adds	r7, r7, #8
 5531              	.LCFI322:
 5532              		.cfi_def_cfa_offset 8
 5533 0012 BD46     		mov	sp, r7
 5534              	.LCFI323:
 5535              		.cfi_def_cfa_register 13
 5536              		@ sp needed
 5537 0014 80BD     		pop	{r7, pc}
 5538              	.L193:
 5539 0016 00BF     		.align	2
 5540              	.L192:
 5541 0018 00000000 		.word	leds
 5542              		.cfi_endproc
 5543              	.LFE4129:
 5545              		.section	.text.OTTO_main_loop,"ax",%progbits
 5546              		.align	1
 5547              		.global	OTTO_main_loop
 5548              		.syntax unified
 5549              		.thumb
 5550              		.thumb_func
 5551              		.fpu fpv4-sp-d16
 5553              	OTTO_main_loop:
 5554              	.LFB4128:
 144:Cpp/main.cpp  ****   key_table.init();
 5555              		.loc 11 144 1
 5556              		.cfi_startproc
 5557              		@ args = 0, pretend = 0, frame = 80
 5558              		@ frame_needed = 1, uses_anonymous_args = 0
 5559 0000 80B5     		push	{r7, lr}
 5560              	.LCFI324:
 5561              		.cfi_def_cfa_offset 8
 5562              		.cfi_offset 7, -8
 5563              		.cfi_offset 14, -4
 5564 0002 94B0     		sub	sp, sp, #80
 5565              	.LCFI325:
 5566              		.cfi_def_cfa_offset 88
 5567 0004 00AF     		add	r7, sp, #0
 5568              	.LCFI326:
 5569              		.cfi_def_cfa_register 7
 145:Cpp/main.cpp  ****   leds.init();
 5570              		.loc 11 145 17
 5571 0006 1548     		ldr	r0, .L196
 5572 0008 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv
 146:Cpp/main.cpp  ****   main_loop.schedule([] { leds.maybe_update(); }, 0, 20);
 5573              		.loc 11 146 12
 5574 000c 1448     		ldr	r0, .L196+4
 5575 000e FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv
 5576              		.loc 11 147 21
 5577 0012 07F14C02 		add	r2, r7, #76
 5578 0016 3B46     		mov	r3, r7
 5579 0018 1146     		mov	r1, r2
ARM GAS  /tmp/ccU23Djm.s 			page 159


 5580 001a 1846     		mov	r0, r3
 5581 001c FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZ14OTTO_main_loopEUlvE_EEOT_
 5582 0020 3946     		mov	r1, r7
 5583 0022 1423     		movs	r3, #20
 5584 0024 0022     		movs	r2, #0
 5585 0026 0F48     		ldr	r0, .L196+8
 5586 0028 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm
 5587              		.loc 11 147 56
 5588 002c 3B46     		mov	r3, r7
 5589 002e 1846     		mov	r0, r3
 5590 0030 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev
 148:Cpp/main.cpp  ****   blue_encoder.init();
 5591              		.loc 11 148 20
 5592 0034 0C48     		ldr	r0, .L196+12
 5593 0036 FFF7FEFF 		bl	_ZN4otto3mcu7Encoder4initEv
 149:Cpp/main.cpp  ****   green_encoder.init();
 5594              		.loc 11 149 21
 5595 003a 0C48     		ldr	r0, .L196+16
 5596 003c FFF7FEFF 		bl	_ZN4otto3mcu7Encoder4initEv
 150:Cpp/main.cpp  ****   yellow_encoder.init();
 5597              		.loc 11 150 22
 5598 0040 0B48     		ldr	r0, .L196+20
 5599 0042 FFF7FEFF 		bl	_ZN4otto3mcu7Encoder4initEv
 151:Cpp/main.cpp  ****   red_encoder.init();
 5600              		.loc 11 151 19
 5601 0046 0B48     		ldr	r0, .L196+24
 5602 0048 FFF7FEFF 		bl	_ZN4otto3mcu7Encoder4initEv
 152:Cpp/main.cpp  ****   power::init();
 5603              		.loc 11 152 14
 5604 004c FFF7FEFF 		bl	_ZN4otto3mcu5power4initEv
 153:Cpp/main.cpp  **** 
 154:Cpp/main.cpp  ****   test_encoders();
 5605              		.loc 11 154 16
 5606 0050 FFF7FEFF 		bl	_Z13test_encodersv
 5607              	.L195:
 155:Cpp/main.cpp  ****   // ws2812b::led_cascade_colors(leds);
 156:Cpp/main.cpp  **** 
 157:Cpp/main.cpp  ****   while (true) {
 158:Cpp/main.cpp  ****     main_loop.exec();
 5608              		.loc 11 158 19 discriminator 1
 5609 0054 0348     		ldr	r0, .L196+8
 5610 0056 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4execEv
 5611 005a FBE7     		b	.L195
 5612              	.L197:
 5613              		.align	2
 5614              	.L196:
 5615 005c 00000000 		.word	key_table
 5616 0060 00000000 		.word	leds
 5617 0064 00000000 		.word	_ZN4otto3mcu9main_loopE
 5618 0068 00000000 		.word	blue_encoder
 5619 006c 00000000 		.word	green_encoder
 5620 0070 00000000 		.word	yellow_encoder
 5621 0074 00000000 		.word	red_encoder
 5622              		.cfi_endproc
 5623              	.LFE4128:
 5625              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv,"axG",%progbits
 5626              		.align	1
ARM GAS  /tmp/ccU23Djm.s 			page 160


 5627              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv
 5628              		.syntax unified
 5629              		.thumb
 5630              		.thumb_func
 5631              		.fpu fpv4-sp-d16
 5633              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv:
 5634              	.LFB4434:
 106:Cpp/local_vector.hpp ****     {
 5635              		.loc 5 106 27
 5636              		.cfi_startproc
 5637              		@ args = 0, pretend = 0, frame = 8
 5638              		@ frame_needed = 1, uses_anonymous_args = 0
 5639 0000 80B5     		push	{r7, lr}
 5640              	.LCFI327:
 5641              		.cfi_def_cfa_offset 8
 5642              		.cfi_offset 7, -8
 5643              		.cfi_offset 14, -4
 5644 0002 82B0     		sub	sp, sp, #8
 5645              	.LCFI328:
 5646              		.cfi_def_cfa_offset 16
 5647 0004 00AF     		add	r7, sp, #0
 5648              	.LCFI329:
 5649              		.cfi_def_cfa_register 7
 5650 0006 7860     		str	r0, [r7, #4]
 108:Cpp/local_vector.hpp ****     }
 5651              		.loc 5 108 14
 5652 0008 7868     		ldr	r0, [r7, #4]
 5653 000a FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv
 5654 000e 0346     		mov	r3, r0
 109:Cpp/local_vector.hpp **** 
 5655              		.loc 5 109 5
 5656 0010 1846     		mov	r0, r3
 5657 0012 0837     		adds	r7, r7, #8
 5658              	.LCFI330:
 5659              		.cfi_def_cfa_offset 8
 5660 0014 BD46     		mov	sp, r7
 5661              	.LCFI331:
 5662              		.cfi_def_cfa_register 13
 5663              		@ sp needed
 5664 0016 80BD     		pop	{r7, pc}
 5665              		.cfi_endproc
 5666              	.LFE4434:
 5668              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev,"axG",%progbits,_ZN19fix
 5669              		.align	1
 5670              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev
 5671              		.syntax unified
 5672              		.thumb
 5673              		.thumb_func
 5674              		.fpu fpv4-sp-d16
 5676              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev:
 5677              	.LFB4436:
 5678              		.file 12 "Cpp/fixed_size_function.hpp"
   1:Cpp/fixed_size_function.hpp **** //
   2:Cpp/fixed_size_function.hpp **** // Copyright (c) 2014-2016 Pavel Medvedev. All rights reserved.
   3:Cpp/fixed_size_function.hpp **** //
   4:Cpp/fixed_size_function.hpp **** // Distributed under the MIT software license, see the accompanying
   5:Cpp/fixed_size_function.hpp **** // file LICENSE
ARM GAS  /tmp/ccU23Djm.s 			page 161


   6:Cpp/fixed_size_function.hpp **** 
   7:Cpp/fixed_size_function.hpp **** #pragma once
   8:Cpp/fixed_size_function.hpp **** 
   9:Cpp/fixed_size_function.hpp **** #include <functional>
  10:Cpp/fixed_size_function.hpp **** #include <stdexcept>
  11:Cpp/fixed_size_function.hpp **** #include <tuple>
  12:Cpp/fixed_size_function.hpp **** #include <type_traits>
  13:Cpp/fixed_size_function.hpp **** 
  14:Cpp/fixed_size_function.hpp **** enum class construct_type {
  15:Cpp/fixed_size_function.hpp ****   none,
  16:Cpp/fixed_size_function.hpp ****   copy,
  17:Cpp/fixed_size_function.hpp ****   move,
  18:Cpp/fixed_size_function.hpp ****   copy_and_move,
  19:Cpp/fixed_size_function.hpp **** };
  20:Cpp/fixed_size_function.hpp **** 
  21:Cpp/fixed_size_function.hpp **** namespace details {
  22:Cpp/fixed_size_function.hpp **** 
  23:Cpp/fixed_size_function.hpp ****   // V-table implementation
  24:Cpp/fixed_size_function.hpp ****   template<typename Ret, typename... Args>
  25:Cpp/fixed_size_function.hpp ****   struct fixed_function_vtable_base {
  26:Cpp/fixed_size_function.hpp ****     Ret (*call)(void*, Args&&...) = nullptr;
  27:Cpp/fixed_size_function.hpp ****     void (*destroy)(void*) = nullptr;
  28:Cpp/fixed_size_function.hpp ****   };
  29:Cpp/fixed_size_function.hpp **** 
  30:Cpp/fixed_size_function.hpp ****   template<construct_type ConstructStrategy, typename Ret, typename... Args>
  31:Cpp/fixed_size_function.hpp ****   struct fixed_function_vtable;
  32:Cpp/fixed_size_function.hpp **** 
  33:Cpp/fixed_size_function.hpp ****   template<typename Ret, typename... Args>
  34:Cpp/fixed_size_function.hpp ****   struct fixed_function_vtable<construct_type::none, Ret, Args...> : fixed_function_vtable_base<Ret
  35:Cpp/fixed_size_function.hpp **** 
  36:Cpp/fixed_size_function.hpp ****   template<typename Ret, typename... Args>
  37:Cpp/fixed_size_function.hpp ****   struct fixed_function_vtable<construct_type::copy, Ret, Args...> : fixed_function_vtable_base<Ret
  38:Cpp/fixed_size_function.hpp ****     void (*copy)(const void*, void*) = nullptr;
  39:Cpp/fixed_size_function.hpp ****   };
  40:Cpp/fixed_size_function.hpp **** 
  41:Cpp/fixed_size_function.hpp ****   template<typename Ret, typename... Args>
  42:Cpp/fixed_size_function.hpp ****   struct fixed_function_vtable<construct_type::move, Ret, Args...> : fixed_function_vtable_base<Ret
  43:Cpp/fixed_size_function.hpp ****     void (*move)(void*, void*) = nullptr;
  44:Cpp/fixed_size_function.hpp ****   };
  45:Cpp/fixed_size_function.hpp **** 
  46:Cpp/fixed_size_function.hpp ****   template<typename Ret, typename... Args>
  47:Cpp/fixed_size_function.hpp ****   struct fixed_function_vtable<construct_type::copy_and_move, Ret, Args...> : fixed_function_vtable
  48:Cpp/fixed_size_function.hpp ****     void (*copy)(const void*, void*) = nullptr;
  49:Cpp/fixed_size_function.hpp ****     void (*move)(void*, void*) = nullptr;
  50:Cpp/fixed_size_function.hpp ****   };
  51:Cpp/fixed_size_function.hpp **** 
  52:Cpp/fixed_size_function.hpp **** } // namespace details
  53:Cpp/fixed_size_function.hpp **** 
  54:Cpp/fixed_size_function.hpp **** template<typename Function, size_t MaxSize = 128, construct_type ConstructStrategy = construct_type
  55:Cpp/fixed_size_function.hpp **** class fixed_size_function;
  56:Cpp/fixed_size_function.hpp **** 
  57:Cpp/fixed_size_function.hpp **** template<typename Ret, typename... Args, size_t MaxSize, construct_type ConstructStrategy>
  58:Cpp/fixed_size_function.hpp **** class fixed_size_function<Ret(Args...), MaxSize, ConstructStrategy> {
  59:Cpp/fixed_size_function.hpp **** public:
  60:Cpp/fixed_size_function.hpp ****   // Compile-time information
  61:Cpp/fixed_size_function.hpp **** 
  62:Cpp/fixed_size_function.hpp ****   using is_copyable = std::integral_constant<bool,
ARM GAS  /tmp/ccU23Djm.s 			page 162


  63:Cpp/fixed_size_function.hpp ****                                              ConstructStrategy == construct_type::copy ||
  64:Cpp/fixed_size_function.hpp ****                                                ConstructStrategy == construct_type::copy_and_move>;
  65:Cpp/fixed_size_function.hpp ****   using is_movable = std::integral_constant<bool,
  66:Cpp/fixed_size_function.hpp ****                                             ConstructStrategy == construct_type::move ||
  67:Cpp/fixed_size_function.hpp ****                                               ConstructStrategy == construct_type::copy_and_move>;
  68:Cpp/fixed_size_function.hpp **** 
  69:Cpp/fixed_size_function.hpp ****   using result_type = Ret;
  70:Cpp/fixed_size_function.hpp **** 
  71:Cpp/fixed_size_function.hpp ****   static const std::size_t arity = sizeof...(Args);
  72:Cpp/fixed_size_function.hpp **** 
  73:Cpp/fixed_size_function.hpp ****   template<std::size_t N>
  74:Cpp/fixed_size_function.hpp ****   struct argument {
  75:Cpp/fixed_size_function.hpp ****     static_assert(N < arity, "invalid argument index");
  76:Cpp/fixed_size_function.hpp ****     using type = typename std::tuple_element<N, std::tuple<Args...>>::type;
  77:Cpp/fixed_size_function.hpp ****   };
  78:Cpp/fixed_size_function.hpp **** 
  79:Cpp/fixed_size_function.hpp **** public:
  80:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  81:Cpp/fixed_size_function.hpp ****   fixed_size_function(fixed_size_function<F, S, C> const&) = delete;
  82:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  83:Cpp/fixed_size_function.hpp ****   fixed_size_function(fixed_size_function<F, S, C>&) = delete;
  84:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  85:Cpp/fixed_size_function.hpp ****   fixed_size_function(fixed_size_function<F, S, C>&&) = delete;
  86:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  87:Cpp/fixed_size_function.hpp ****   fixed_size_function& operator=(fixed_size_function<F, S, C> const&) = delete;
  88:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  89:Cpp/fixed_size_function.hpp ****   fixed_size_function& operator=(fixed_size_function<F, S, C>&) = delete;
  90:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  91:Cpp/fixed_size_function.hpp ****   fixed_size_function& operator=(fixed_size_function<F, S, C>&&) = delete;
  92:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  93:Cpp/fixed_size_function.hpp ****   void assign(fixed_size_function<F, S, C> const&) = delete;
  94:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  95:Cpp/fixed_size_function.hpp ****   void assign(fixed_size_function<F, S, C>&) = delete;
  96:Cpp/fixed_size_function.hpp ****   template<typename F, size_t S, construct_type C>
  97:Cpp/fixed_size_function.hpp ****   void assign(fixed_size_function<F, S, C>&&) = delete;
  98:Cpp/fixed_size_function.hpp **** 
  99:Cpp/fixed_size_function.hpp ****   fixed_size_function() {}
 100:Cpp/fixed_size_function.hpp **** 
 101:Cpp/fixed_size_function.hpp ****   ~fixed_size_function()
 5679              		.loc 12 101 3
 5680              		.cfi_startproc
 5681              		@ args = 0, pretend = 0, frame = 8
 5682              		@ frame_needed = 1, uses_anonymous_args = 0
 5683 0000 80B5     		push	{r7, lr}
 5684              	.LCFI332:
 5685              		.cfi_def_cfa_offset 8
 5686              		.cfi_offset 7, -8
 5687              		.cfi_offset 14, -4
 5688 0002 82B0     		sub	sp, sp, #8
 5689              	.LCFI333:
 5690              		.cfi_def_cfa_offset 16
 5691 0004 00AF     		add	r7, sp, #0
 5692              	.LCFI334:
 5693              		.cfi_def_cfa_register 7
 5694 0006 7860     		str	r0, [r7, #4]
 5695              	.LBB26:
 102:Cpp/fixed_size_function.hpp ****   {
ARM GAS  /tmp/ccU23Djm.s 			page 163


 103:Cpp/fixed_size_function.hpp ****     reset();
 5696              		.loc 12 103 5
 5697 0008 7868     		ldr	r0, [r7, #4]
 5698 000a FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv
 5699              	.LBE26:
 104:Cpp/fixed_size_function.hpp ****   }
 5700              		.loc 12 104 3
 5701 000e 7B68     		ldr	r3, [r7, #4]
 5702 0010 1846     		mov	r0, r3
 5703 0012 0837     		adds	r7, r7, #8
 5704              	.LCFI335:
 5705              		.cfi_def_cfa_offset 8
 5706 0014 BD46     		mov	sp, r7
 5707              	.LCFI336:
 5708              		.cfi_def_cfa_register 13
 5709              		@ sp needed
 5710 0016 80BD     		pop	{r7, pc}
 5711              		.cfi_endproc
 5712              	.LFE4436:
 5714              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev
 5715              		.thumb_set _ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev,_ZN19fixed_size_functionIFvv
 5716              		.section	.text._ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv,"axG",%progbits,_ZNK19
 5717              		.align	1
 5718              		.weak	_ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv
 5719              		.syntax unified
 5720              		.thumb
 5721              		.thumb_func
 5722              		.fpu fpv4-sp-d16
 5724              	_ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv:
 5725              	.LFB4438:
 105:Cpp/fixed_size_function.hpp **** 
 106:Cpp/fixed_size_function.hpp ****   fixed_size_function(std::nullptr_t) {}
 107:Cpp/fixed_size_function.hpp **** 
 108:Cpp/fixed_size_function.hpp ****   fixed_size_function& operator=(std::nullptr_t)
 109:Cpp/fixed_size_function.hpp ****   {
 110:Cpp/fixed_size_function.hpp ****     reset();
 111:Cpp/fixed_size_function.hpp ****     return *this;
 112:Cpp/fixed_size_function.hpp ****   }
 113:Cpp/fixed_size_function.hpp **** 
 114:Cpp/fixed_size_function.hpp ****   // fixed_size_function(fixed_size_function const& src)
 115:Cpp/fixed_size_function.hpp ****   // {
 116:Cpp/fixed_size_function.hpp ****   //   copy(src);
 117:Cpp/fixed_size_function.hpp ****   // }
 118:Cpp/fixed_size_function.hpp **** 
 119:Cpp/fixed_size_function.hpp ****   // fixed_size_function& operator=(fixed_size_function const& src)
 120:Cpp/fixed_size_function.hpp ****   // {
 121:Cpp/fixed_size_function.hpp ****   //   assign(src);
 122:Cpp/fixed_size_function.hpp ****   //   return *this;
 123:Cpp/fixed_size_function.hpp ****   // }
 124:Cpp/fixed_size_function.hpp **** 
 125:Cpp/fixed_size_function.hpp ****   // fixed_size_function(fixed_size_function& src)
 126:Cpp/fixed_size_function.hpp ****   // {
 127:Cpp/fixed_size_function.hpp ****   //   copy(src);
 128:Cpp/fixed_size_function.hpp ****   // }
 129:Cpp/fixed_size_function.hpp **** 
 130:Cpp/fixed_size_function.hpp ****   // fixed_size_function& operator=(fixed_size_function& src)
 131:Cpp/fixed_size_function.hpp ****   // {
ARM GAS  /tmp/ccU23Djm.s 			page 164


 132:Cpp/fixed_size_function.hpp ****   //   assign(src);
 133:Cpp/fixed_size_function.hpp ****   //   return *this;
 134:Cpp/fixed_size_function.hpp ****   // }
 135:Cpp/fixed_size_function.hpp **** 
 136:Cpp/fixed_size_function.hpp ****   fixed_size_function(fixed_size_function&& src)
 137:Cpp/fixed_size_function.hpp ****   {
 138:Cpp/fixed_size_function.hpp ****     move(std::move(src));
 139:Cpp/fixed_size_function.hpp ****   }
 140:Cpp/fixed_size_function.hpp **** 
 141:Cpp/fixed_size_function.hpp ****   fixed_size_function& operator=(fixed_size_function&& src)
 142:Cpp/fixed_size_function.hpp ****   {
 143:Cpp/fixed_size_function.hpp ****     assign(std::move(src));
 144:Cpp/fixed_size_function.hpp ****     return *this;
 145:Cpp/fixed_size_function.hpp ****   }
 146:Cpp/fixed_size_function.hpp **** 
 147:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 148:Cpp/fixed_size_function.hpp ****   fixed_size_function(Functor&& f)
 149:Cpp/fixed_size_function.hpp ****   {
 150:Cpp/fixed_size_function.hpp ****     create(std::forward<Functor>(f));
 151:Cpp/fixed_size_function.hpp ****   }
 152:Cpp/fixed_size_function.hpp **** 
 153:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 154:Cpp/fixed_size_function.hpp ****   fixed_size_function& operator=(Functor&& f)
 155:Cpp/fixed_size_function.hpp ****   {
 156:Cpp/fixed_size_function.hpp ****     assign(std::forward<Functor>(f));
 157:Cpp/fixed_size_function.hpp ****     return *this;
 158:Cpp/fixed_size_function.hpp ****   }
 159:Cpp/fixed_size_function.hpp **** 
 160:Cpp/fixed_size_function.hpp **** //  void assign(fixed_size_function const& src)
 161:Cpp/fixed_size_function.hpp **** //  {
 162:Cpp/fixed_size_function.hpp **** //    reset();
 163:Cpp/fixed_size_function.hpp **** //    copy(src);
 164:Cpp/fixed_size_function.hpp **** //  }
 165:Cpp/fixed_size_function.hpp **** //
 166:Cpp/fixed_size_function.hpp **** //  void assign(fixed_size_function& src)
 167:Cpp/fixed_size_function.hpp **** //  {
 168:Cpp/fixed_size_function.hpp **** //    reset();
 169:Cpp/fixed_size_function.hpp **** //    copy(src);
 170:Cpp/fixed_size_function.hpp **** //  }
 171:Cpp/fixed_size_function.hpp **** 
 172:Cpp/fixed_size_function.hpp ****   void assign(fixed_size_function&& src)
 173:Cpp/fixed_size_function.hpp ****   {
 174:Cpp/fixed_size_function.hpp ****     reset();
 175:Cpp/fixed_size_function.hpp ****     move(std::move(src));
 176:Cpp/fixed_size_function.hpp ****   }
 177:Cpp/fixed_size_function.hpp **** 
 178:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 179:Cpp/fixed_size_function.hpp ****   void assign(Functor&& f)
 180:Cpp/fixed_size_function.hpp ****   {
 181:Cpp/fixed_size_function.hpp ****     reset();
 182:Cpp/fixed_size_function.hpp ****     create(std::forward<Functor>(f));
 183:Cpp/fixed_size_function.hpp ****   }
 184:Cpp/fixed_size_function.hpp **** 
 185:Cpp/fixed_size_function.hpp ****   void reset()
 186:Cpp/fixed_size_function.hpp ****   {
 187:Cpp/fixed_size_function.hpp ****     auto destroy = vtable_.destroy;
 188:Cpp/fixed_size_function.hpp ****     if (destroy) {
ARM GAS  /tmp/ccU23Djm.s 			page 165


 189:Cpp/fixed_size_function.hpp ****       vtable_ = vtable();
 190:Cpp/fixed_size_function.hpp ****       destroy(&storage_);
 191:Cpp/fixed_size_function.hpp ****     }
 192:Cpp/fixed_size_function.hpp ****   }
 193:Cpp/fixed_size_function.hpp **** 
 194:Cpp/fixed_size_function.hpp ****   explicit operator bool() const
 5726              		.loc 12 194 12
 5727              		.cfi_startproc
 5728              		@ args = 0, pretend = 0, frame = 8
 5729              		@ frame_needed = 1, uses_anonymous_args = 0
 5730              		@ link register save eliminated.
 5731 0000 80B4     		push	{r7}
 5732              	.LCFI337:
 5733              		.cfi_def_cfa_offset 4
 5734              		.cfi_offset 7, -4
 5735 0002 83B0     		sub	sp, sp, #12
 5736              	.LCFI338:
 5737              		.cfi_def_cfa_offset 16
 5738 0004 00AF     		add	r7, sp, #0
 5739              	.LCFI339:
 5740              		.cfi_def_cfa_register 7
 5741 0006 7860     		str	r0, [r7, #4]
 195:Cpp/fixed_size_function.hpp ****   {
 196:Cpp/fixed_size_function.hpp ****     return vtable_.call != nullptr;
 5742              		.loc 12 196 20
 5743 0008 7B68     		ldr	r3, [r7, #4]
 5744 000a 1B68     		ldr	r3, [r3]
 5745              		.loc 12 196 28
 5746 000c 002B     		cmp	r3, #0
 5747 000e 14BF     		ite	ne
 5748 0010 0123     		movne	r3, #1
 5749 0012 0023     		moveq	r3, #0
 5750 0014 DBB2     		uxtb	r3, r3
 197:Cpp/fixed_size_function.hpp ****   }
 5751              		.loc 12 197 3
 5752 0016 1846     		mov	r0, r3
 5753 0018 0C37     		adds	r7, r7, #12
 5754              	.LCFI340:
 5755              		.cfi_def_cfa_offset 4
 5756 001a BD46     		mov	sp, r7
 5757              	.LCFI341:
 5758              		.cfi_def_cfa_register 13
 5759              		@ sp needed
 5760 001c 5DF8047B 		ldr	r7, [sp], #4
 5761              	.LCFI342:
 5762              		.cfi_restore 7
 5763              		.cfi_def_cfa_offset 0
 5764 0020 7047     		bx	lr
 5765              		.cfi_endproc
 5766              	.LFE4438:
 5768              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv,"axG",%progbits,_ZN19fix
 5769              		.align	1
 5770              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv
 5771              		.syntax unified
 5772              		.thumb
 5773              		.thumb_func
 5774              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU23Djm.s 			page 166


 5776              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv:
 5777              	.LFB4439:
 198:Cpp/fixed_size_function.hpp **** 
 199:Cpp/fixed_size_function.hpp ****   /// Precondition: `*this != nullptr`
 200:Cpp/fixed_size_function.hpp ****   Ret operator()(Args... args)
 5778              		.loc 12 200 7
 5779              		.cfi_startproc
 5780              		@ args = 0, pretend = 0, frame = 8
 5781              		@ frame_needed = 1, uses_anonymous_args = 0
 5782 0000 80B5     		push	{r7, lr}
 5783              	.LCFI343:
 5784              		.cfi_def_cfa_offset 8
 5785              		.cfi_offset 7, -8
 5786              		.cfi_offset 14, -4
 5787 0002 82B0     		sub	sp, sp, #8
 5788              	.LCFI344:
 5789              		.cfi_def_cfa_offset 16
 5790 0004 00AF     		add	r7, sp, #0
 5791              	.LCFI345:
 5792              		.cfi_def_cfa_register 7
 5793 0006 7860     		str	r0, [r7, #4]
 201:Cpp/fixed_size_function.hpp ****   {
 202:Cpp/fixed_size_function.hpp ****     return vtable_.call(&storage_, std::forward<Args>(args)...);
 5794              		.loc 12 202 20
 5795 0008 7B68     		ldr	r3, [r7, #4]
 5796 000a 1B68     		ldr	r3, [r3]
 5797              		.loc 12 202 26
 5798 000c 7A68     		ldr	r2, [r7, #4]
 5799 000e 1032     		adds	r2, r2, #16
 5800              		.loc 12 202 20
 5801 0010 1046     		mov	r0, r2
 5802 0012 9847     		blx	r3
 5803              	.LVL1:
 5804              		.loc 12 202 63
 5805 0014 00BF     		nop
 203:Cpp/fixed_size_function.hpp ****   }
 5806              		.loc 12 203 3
 5807 0016 0837     		adds	r7, r7, #8
 5808              	.LCFI346:
 5809              		.cfi_def_cfa_offset 8
 5810 0018 BD46     		mov	sp, r7
 5811              	.LCFI347:
 5812              		.cfi_def_cfa_register 13
 5813              		@ sp needed
 5814 001a 80BD     		pop	{r7, pc}
 5815              		.cfi_endproc
 5816              	.LFE4439:
 5818              		.section	.text._ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_,"axG",%p
 5819              		.align	1
 5820              		.weak	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 5821              		.syntax unified
 5822              		.thumb
 5823              		.thumb_func
 5824              		.fpu fpv4-sp-d16
 5826              	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_:
 5827              	.LFB4440:
 5828              		.file 13 "/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h"
ARM GAS  /tmp/ccU23Djm.s 			page 167


   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** /** @file bits/move.h
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****  */
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** #ifndef _MOVE_H
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** #define _MOVE_H 1
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** #include <bits/c++config.h>
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** {
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   /**
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @ingroup utilities
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    */
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   template<typename _Tp>
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** #if __cplusplus >= 201103L
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** } // namespace
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  /tmp/ccU23Djm.s 			page 168


  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** {
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   /**
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @addtogroup utilities
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @{
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    */
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   /**
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    */
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   template<typename _Tp>
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     constexpr _Tp&&
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   /**
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @brief  Forward an rvalue.
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @return The parameter cast to the specified type.
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    */
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   template<typename _Tp>
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     constexpr _Tp&&
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     {
  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****       return static_cast<_Tp&&>(__t);
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     }
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   /**
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   */
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****   template<typename _Tp>
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     move(_Tp&& __t) noexcept
 5829              		.loc 13 99 5
 5830              		.cfi_startproc
 5831              		@ args = 0, pretend = 0, frame = 8
 5832              		@ frame_needed = 1, uses_anonymous_args = 0
 5833              		@ link register save eliminated.
 5834 0000 80B4     		push	{r7}
 5835              	.LCFI348:
 5836              		.cfi_def_cfa_offset 4
 5837              		.cfi_offset 7, -4
 5838 0002 83B0     		sub	sp, sp, #12
 5839              	.LCFI349:
 5840              		.cfi_def_cfa_offset 16
 5841 0004 00AF     		add	r7, sp, #0
 5842              	.LCFI350:
 5843              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccU23Djm.s 			page 169


 5844 0006 7860     		str	r0, [r7, #4]
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 5845              		.loc 13 100 74
 5846 0008 7B68     		ldr	r3, [r7, #4]
 5847              		.loc 13 100 77
 5848 000a 1846     		mov	r0, r3
 5849 000c 0C37     		adds	r7, r7, #12
 5850              	.LCFI351:
 5851              		.cfi_def_cfa_offset 4
 5852 000e BD46     		mov	sp, r7
 5853              	.LCFI352:
 5854              		.cfi_def_cfa_register 13
 5855              		@ sp needed
 5856 0010 5DF8047B 		ldr	r7, [sp], #4
 5857              	.LCFI353:
 5858              		.cfi_restore 7
 5859              		.cfi_def_cfa_offset 0
 5860 0014 7047     		bx	lr
 5861              		.cfi_endproc
 5862              	.LFE4440:
 5864              		.section	.text._ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referen
 5865              		.align	1
 5866              		.weak	_ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4ty
 5867              		.syntax unified
 5868              		.thumb
 5869              		.thumb_func
 5870              		.fpu fpv4-sp-d16
 5872              	_ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_
 5873              	.LFB4441:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 5874              		.loc 13 99 5
 5875              		.cfi_startproc
 5876              		@ args = 0, pretend = 0, frame = 8
 5877              		@ frame_needed = 1, uses_anonymous_args = 0
 5878              		@ link register save eliminated.
 5879 0000 80B4     		push	{r7}
 5880              	.LCFI354:
 5881              		.cfi_def_cfa_offset 4
 5882              		.cfi_offset 7, -4
 5883 0002 83B0     		sub	sp, sp, #12
 5884              	.LCFI355:
 5885              		.cfi_def_cfa_offset 16
 5886 0004 00AF     		add	r7, sp, #0
 5887              	.LCFI356:
 5888              		.cfi_def_cfa_register 7
 5889 0006 7860     		str	r0, [r7, #4]
 5890              		.loc 13 100 74
 5891 0008 7B68     		ldr	r3, [r7, #4]
 5892              		.loc 13 100 77
 5893 000a 1846     		mov	r0, r3
 5894 000c 0C37     		adds	r7, r7, #12
 5895              	.LCFI357:
 5896              		.cfi_def_cfa_offset 4
 5897 000e BD46     		mov	sp, r7
 5898              	.LCFI358:
 5899              		.cfi_def_cfa_register 13
 5900              		@ sp needed
ARM GAS  /tmp/ccU23Djm.s 			page 170


 5901 0010 5DF8047B 		ldr	r7, [sp], #4
 5902              	.LCFI359:
 5903              		.cfi_restore 7
 5904              		.cfi_def_cfa_offset 0
 5905 0014 7047     		bx	lr
 5906              		.cfi_endproc
 5907              	.LFE4441:
 5909              		.section	.text._ZN7details26fixed_function_vtable_baseIvJEEC2Ev,"axG",%progbits,_ZN7details26fixed
 5910              		.align	1
 5911              		.weak	_ZN7details26fixed_function_vtable_baseIvJEEC2Ev
 5912              		.syntax unified
 5913              		.thumb
 5914              		.thumb_func
 5915              		.fpu fpv4-sp-d16
 5917              	_ZN7details26fixed_function_vtable_baseIvJEEC2Ev:
 5918              	.LFB4445:
  25:Cpp/fixed_size_function.hpp ****     Ret (*call)(void*, Args&&...) = nullptr;
 5919              		.loc 12 25 10
 5920              		.cfi_startproc
 5921              		@ args = 0, pretend = 0, frame = 8
 5922              		@ frame_needed = 1, uses_anonymous_args = 0
 5923              		@ link register save eliminated.
 5924 0000 80B4     		push	{r7}
 5925              	.LCFI360:
 5926              		.cfi_def_cfa_offset 4
 5927              		.cfi_offset 7, -4
 5928 0002 83B0     		sub	sp, sp, #12
 5929              	.LCFI361:
 5930              		.cfi_def_cfa_offset 16
 5931 0004 00AF     		add	r7, sp, #0
 5932              	.LCFI362:
 5933              		.cfi_def_cfa_register 7
 5934 0006 7860     		str	r0, [r7, #4]
 5935              	.LBB27:
  25:Cpp/fixed_size_function.hpp ****     Ret (*call)(void*, Args&&...) = nullptr;
 5936              		.loc 12 25 10
 5937 0008 7B68     		ldr	r3, [r7, #4]
 5938 000a 0022     		movs	r2, #0
 5939 000c 1A60     		str	r2, [r3]
 5940 000e 7B68     		ldr	r3, [r7, #4]
 5941 0010 0022     		movs	r2, #0
 5942 0012 5A60     		str	r2, [r3, #4]
 5943              	.LBE27:
 5944 0014 7B68     		ldr	r3, [r7, #4]
 5945 0016 1846     		mov	r0, r3
 5946 0018 0C37     		adds	r7, r7, #12
 5947              	.LCFI363:
 5948              		.cfi_def_cfa_offset 4
 5949 001a BD46     		mov	sp, r7
 5950              	.LCFI364:
 5951              		.cfi_def_cfa_register 13
 5952              		@ sp needed
 5953 001c 5DF8047B 		ldr	r7, [sp], #4
 5954              	.LCFI365:
 5955              		.cfi_restore 7
 5956              		.cfi_def_cfa_offset 0
 5957 0020 7047     		bx	lr
ARM GAS  /tmp/ccU23Djm.s 			page 171


 5958              		.cfi_endproc
 5959              	.LFE4445:
 5961              		.weak	_ZN7details26fixed_function_vtable_baseIvJEEC1Ev
 5962              		.thumb_set _ZN7details26fixed_function_vtable_baseIvJEEC1Ev,_ZN7details26fixed_function_vtable_bas
 5963              		.section	.text._ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev,"axG",%progbits,_ZN7
 5964              		.align	1
 5965              		.weak	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev
 5966              		.syntax unified
 5967              		.thumb
 5968              		.thumb_func
 5969              		.fpu fpv4-sp-d16
 5971              	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev:
 5972              	.LFB4447:
  42:Cpp/fixed_size_function.hpp ****     void (*move)(void*, void*) = nullptr;
 5973              		.loc 12 42 10
 5974              		.cfi_startproc
 5975              		@ args = 0, pretend = 0, frame = 8
 5976              		@ frame_needed = 1, uses_anonymous_args = 0
 5977 0000 80B5     		push	{r7, lr}
 5978              	.LCFI366:
 5979              		.cfi_def_cfa_offset 8
 5980              		.cfi_offset 7, -8
 5981              		.cfi_offset 14, -4
 5982 0002 82B0     		sub	sp, sp, #8
 5983              	.LCFI367:
 5984              		.cfi_def_cfa_offset 16
 5985 0004 00AF     		add	r7, sp, #0
 5986              	.LCFI368:
 5987              		.cfi_def_cfa_register 7
 5988 0006 7860     		str	r0, [r7, #4]
 5989              	.LBB28:
  42:Cpp/fixed_size_function.hpp ****     void (*move)(void*, void*) = nullptr;
 5990              		.loc 12 42 10
 5991 0008 7B68     		ldr	r3, [r7, #4]
 5992 000a 1846     		mov	r0, r3
 5993 000c FFF7FEFF 		bl	_ZN7details26fixed_function_vtable_baseIvJEEC2Ev
 5994 0010 7B68     		ldr	r3, [r7, #4]
 5995 0012 0022     		movs	r2, #0
 5996 0014 9A60     		str	r2, [r3, #8]
 5997              	.LBE28:
 5998 0016 7B68     		ldr	r3, [r7, #4]
 5999 0018 1846     		mov	r0, r3
 6000 001a 0837     		adds	r7, r7, #8
 6001              	.LCFI369:
 6002              		.cfi_def_cfa_offset 8
 6003 001c BD46     		mov	sp, r7
 6004              	.LCFI370:
 6005              		.cfi_def_cfa_register 13
 6006              		@ sp needed
 6007 001e 80BD     		pop	{r7, pc}
 6008              		.cfi_endproc
 6009              	.LFE4447:
 6011              		.weak	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
 6012              		.thumb_set _ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev,_ZN7details21fixed_funct
 6013              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_,"axG",%progbits,_ZN19
 6014              		.align	1
 6015              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_
ARM GAS  /tmp/ccU23Djm.s 			page 172


 6016              		.syntax unified
 6017              		.thumb
 6018              		.thumb_func
 6019              		.fpu fpv4-sp-d16
 6021              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_:
 6022              	.LFB4449:
 136:Cpp/fixed_size_function.hpp ****   {
 6023              		.loc 12 136 3
 6024              		.cfi_startproc
 6025              		@ args = 0, pretend = 0, frame = 8
 6026              		@ frame_needed = 1, uses_anonymous_args = 0
 6027 0000 80B5     		push	{r7, lr}
 6028              	.LCFI371:
 6029              		.cfi_def_cfa_offset 8
 6030              		.cfi_offset 7, -8
 6031              		.cfi_offset 14, -4
 6032 0002 82B0     		sub	sp, sp, #8
 6033              	.LCFI372:
 6034              		.cfi_def_cfa_offset 16
 6035 0004 00AF     		add	r7, sp, #0
 6036              	.LCFI373:
 6037              		.cfi_def_cfa_register 7
 6038 0006 7860     		str	r0, [r7, #4]
 6039 0008 3960     		str	r1, [r7]
 6040              	.LBB29:
 137:Cpp/fixed_size_function.hpp ****     move(std::move(src));
 6041              		.loc 12 137 3
 6042 000a 7B68     		ldr	r3, [r7, #4]
 6043 000c 1846     		mov	r0, r3
 6044 000e FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
 138:Cpp/fixed_size_function.hpp ****   }
 6045              		.loc 12 138 19
 6046 0012 3868     		ldr	r0, [r7]
 6047 0014 FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 6048 0018 0346     		mov	r3, r0
 138:Cpp/fixed_size_function.hpp ****   }
 6049              		.loc 12 138 5
 6050 001a 1946     		mov	r1, r3
 6051 001c 7868     		ldr	r0, [r7, #4]
 6052 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_
 6053              	.LBE29:
 139:Cpp/fixed_size_function.hpp **** 
 6054              		.loc 12 139 3
 6055 0022 7B68     		ldr	r3, [r7, #4]
 6056 0024 1846     		mov	r0, r3
 6057 0026 0837     		adds	r7, r7, #8
 6058              	.LCFI374:
 6059              		.cfi_def_cfa_offset 8
 6060 0028 BD46     		mov	sp, r7
 6061              	.LCFI375:
 6062              		.cfi_def_cfa_register 13
 6063              		@ sp needed
 6064 002a 80BD     		pop	{r7, pc}
 6065              		.cfi_endproc
 6066              	.LFE4449:
 6068              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1EOS2_
 6069              		.thumb_set _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1EOS2_,_ZN19fixed_size_functionI
ARM GAS  /tmp/ccU23Djm.s 			page 173


 6070              		.section	.text._ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referen
 6071              		.align	1
 6072              		.weak	_ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4ty
 6073              		.syntax unified
 6074              		.thumb
 6075              		.thumb_func
 6076              		.fpu fpv4-sp-d16
 6078              	_ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_
 6079              	.LFB4451:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 6080              		.loc 13 99 5
 6081              		.cfi_startproc
 6082              		@ args = 0, pretend = 0, frame = 8
 6083              		@ frame_needed = 1, uses_anonymous_args = 0
 6084              		@ link register save eliminated.
 6085 0000 80B4     		push	{r7}
 6086              	.LCFI376:
 6087              		.cfi_def_cfa_offset 4
 6088              		.cfi_offset 7, -4
 6089 0002 83B0     		sub	sp, sp, #12
 6090              	.LCFI377:
 6091              		.cfi_def_cfa_offset 16
 6092 0004 00AF     		add	r7, sp, #0
 6093              	.LCFI378:
 6094              		.cfi_def_cfa_register 7
 6095 0006 7860     		str	r0, [r7, #4]
 6096              		.loc 13 100 74
 6097 0008 7B68     		ldr	r3, [r7, #4]
 6098              		.loc 13 100 77
 6099 000a 1846     		mov	r0, r3
 6100 000c 0C37     		adds	r7, r7, #12
 6101              	.LCFI379:
 6102              		.cfi_def_cfa_offset 4
 6103 000e BD46     		mov	sp, r7
 6104              	.LCFI380:
 6105              		.cfi_def_cfa_register 13
 6106              		@ sp needed
 6107 0010 5DF8047B 		ldr	r7, [sp], #4
 6108              	.LCFI381:
 6109              		.cfi_restore 7
 6110              		.cfi_def_cfa_offset 0
 6111 0014 7047     		bx	lr
 6112              		.cfi_endproc
 6113              	.LFE4451:
 6115              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv,"axG",%progbits,_ZN19fix
 6116              		.align	1
 6117              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv
 6118              		.syntax unified
 6119              		.thumb
 6120              		.thumb_func
 6121              		.fpu fpv4-sp-d16
 6123              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv:
 6124              	.LFB4452:
 200:Cpp/fixed_size_function.hpp ****   {
 6125              		.loc 12 200 7
 6126              		.cfi_startproc
 6127              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccU23Djm.s 			page 174


 6128              		@ frame_needed = 1, uses_anonymous_args = 0
 6129 0000 80B5     		push	{r7, lr}
 6130              	.LCFI382:
 6131              		.cfi_def_cfa_offset 8
 6132              		.cfi_offset 7, -8
 6133              		.cfi_offset 14, -4
 6134 0002 82B0     		sub	sp, sp, #8
 6135              	.LCFI383:
 6136              		.cfi_def_cfa_offset 16
 6137 0004 00AF     		add	r7, sp, #0
 6138              	.LCFI384:
 6139              		.cfi_def_cfa_register 7
 6140 0006 7860     		str	r0, [r7, #4]
 202:Cpp/fixed_size_function.hpp ****   }
 6141              		.loc 12 202 20
 6142 0008 7B68     		ldr	r3, [r7, #4]
 6143 000a 1B68     		ldr	r3, [r3]
 202:Cpp/fixed_size_function.hpp ****   }
 6144              		.loc 12 202 26
 6145 000c 7A68     		ldr	r2, [r7, #4]
 6146 000e 1032     		adds	r2, r2, #16
 202:Cpp/fixed_size_function.hpp ****   }
 6147              		.loc 12 202 20
 6148 0010 1046     		mov	r0, r2
 6149 0012 9847     		blx	r3
 6150              	.LVL2:
 6151 0014 0346     		mov	r3, r0
 6152              		.loc 12 203 3
 6153 0016 1846     		mov	r0, r3
 6154 0018 0837     		adds	r7, r7, #8
 6155              	.LCFI385:
 6156              		.cfi_def_cfa_offset 8
 6157 001a BD46     		mov	sp, r7
 6158              	.LCFI386:
 6159              		.cfi_def_cfa_register 13
 6160              		@ sp needed
 6161 001c 80BD     		pop	{r7, pc}
 6162              		.cfi_endproc
 6163              	.LFE4452:
 6165              		.section	.text._ZN7details26fixed_function_vtable_baseImJEEC2Ev,"axG",%progbits,_ZN7details26fixed
 6166              		.align	1
 6167              		.weak	_ZN7details26fixed_function_vtable_baseImJEEC2Ev
 6168              		.syntax unified
 6169              		.thumb
 6170              		.thumb_func
 6171              		.fpu fpv4-sp-d16
 6173              	_ZN7details26fixed_function_vtable_baseImJEEC2Ev:
 6174              	.LFB4456:
  25:Cpp/fixed_size_function.hpp ****     Ret (*call)(void*, Args&&...) = nullptr;
 6175              		.loc 12 25 10
 6176              		.cfi_startproc
 6177              		@ args = 0, pretend = 0, frame = 8
 6178              		@ frame_needed = 1, uses_anonymous_args = 0
 6179              		@ link register save eliminated.
 6180 0000 80B4     		push	{r7}
 6181              	.LCFI387:
 6182              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccU23Djm.s 			page 175


 6183              		.cfi_offset 7, -4
 6184 0002 83B0     		sub	sp, sp, #12
 6185              	.LCFI388:
 6186              		.cfi_def_cfa_offset 16
 6187 0004 00AF     		add	r7, sp, #0
 6188              	.LCFI389:
 6189              		.cfi_def_cfa_register 7
 6190 0006 7860     		str	r0, [r7, #4]
 6191              	.LBB30:
  25:Cpp/fixed_size_function.hpp ****     Ret (*call)(void*, Args&&...) = nullptr;
 6192              		.loc 12 25 10
 6193 0008 7B68     		ldr	r3, [r7, #4]
 6194 000a 0022     		movs	r2, #0
 6195 000c 1A60     		str	r2, [r3]
 6196 000e 7B68     		ldr	r3, [r7, #4]
 6197 0010 0022     		movs	r2, #0
 6198 0012 5A60     		str	r2, [r3, #4]
 6199              	.LBE30:
 6200 0014 7B68     		ldr	r3, [r7, #4]
 6201 0016 1846     		mov	r0, r3
 6202 0018 0C37     		adds	r7, r7, #12
 6203              	.LCFI390:
 6204              		.cfi_def_cfa_offset 4
 6205 001a BD46     		mov	sp, r7
 6206              	.LCFI391:
 6207              		.cfi_def_cfa_register 13
 6208              		@ sp needed
 6209 001c 5DF8047B 		ldr	r7, [sp], #4
 6210              	.LCFI392:
 6211              		.cfi_restore 7
 6212              		.cfi_def_cfa_offset 0
 6213 0020 7047     		bx	lr
 6214              		.cfi_endproc
 6215              	.LFE4456:
 6217              		.weak	_ZN7details26fixed_function_vtable_baseImJEEC1Ev
 6218              		.thumb_set _ZN7details26fixed_function_vtable_baseImJEEC1Ev,_ZN7details26fixed_function_vtable_bas
 6219              		.section	.text._ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev,"axG",%progbits,_ZN7
 6220              		.align	1
 6221              		.weak	_ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev
 6222              		.syntax unified
 6223              		.thumb
 6224              		.thumb_func
 6225              		.fpu fpv4-sp-d16
 6227              	_ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev:
 6228              	.LFB4458:
  42:Cpp/fixed_size_function.hpp ****     void (*move)(void*, void*) = nullptr;
 6229              		.loc 12 42 10
 6230              		.cfi_startproc
 6231              		@ args = 0, pretend = 0, frame = 8
 6232              		@ frame_needed = 1, uses_anonymous_args = 0
 6233 0000 80B5     		push	{r7, lr}
 6234              	.LCFI393:
 6235              		.cfi_def_cfa_offset 8
 6236              		.cfi_offset 7, -8
 6237              		.cfi_offset 14, -4
 6238 0002 82B0     		sub	sp, sp, #8
 6239              	.LCFI394:
ARM GAS  /tmp/ccU23Djm.s 			page 176


 6240              		.cfi_def_cfa_offset 16
 6241 0004 00AF     		add	r7, sp, #0
 6242              	.LCFI395:
 6243              		.cfi_def_cfa_register 7
 6244 0006 7860     		str	r0, [r7, #4]
 6245              	.LBB31:
  42:Cpp/fixed_size_function.hpp ****     void (*move)(void*, void*) = nullptr;
 6246              		.loc 12 42 10
 6247 0008 7B68     		ldr	r3, [r7, #4]
 6248 000a 1846     		mov	r0, r3
 6249 000c FFF7FEFF 		bl	_ZN7details26fixed_function_vtable_baseImJEEC2Ev
 6250 0010 7B68     		ldr	r3, [r7, #4]
 6251 0012 0022     		movs	r2, #0
 6252 0014 9A60     		str	r2, [r3, #8]
 6253              	.LBE31:
 6254 0016 7B68     		ldr	r3, [r7, #4]
 6255 0018 1846     		mov	r0, r3
 6256 001a 0837     		adds	r7, r7, #8
 6257              	.LCFI396:
 6258              		.cfi_def_cfa_offset 8
 6259 001c BD46     		mov	sp, r7
 6260              	.LCFI397:
 6261              		.cfi_def_cfa_register 13
 6262              		@ sp needed
 6263 001e 80BD     		pop	{r7, pc}
 6264              		.cfi_endproc
 6265              	.LFE4458:
 6267              		.weak	_ZN7details21fixed_function_vtableIL14construct_type2EmJEEC1Ev
 6268              		.thumb_set _ZN7details21fixed_function_vtableIL14construct_type2EmJEEC1Ev,_ZN7details21fixed_funct
 6269              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_,"axG",%progbits,_ZN19
 6270              		.align	1
 6271              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_
 6272              		.syntax unified
 6273              		.thumb
 6274              		.thumb_func
 6275              		.fpu fpv4-sp-d16
 6277              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_:
 6278              	.LFB4460:
 136:Cpp/fixed_size_function.hpp ****   {
 6279              		.loc 12 136 3
 6280              		.cfi_startproc
 6281              		@ args = 0, pretend = 0, frame = 8
 6282              		@ frame_needed = 1, uses_anonymous_args = 0
 6283 0000 80B5     		push	{r7, lr}
 6284              	.LCFI398:
 6285              		.cfi_def_cfa_offset 8
 6286              		.cfi_offset 7, -8
 6287              		.cfi_offset 14, -4
 6288 0002 82B0     		sub	sp, sp, #8
 6289              	.LCFI399:
 6290              		.cfi_def_cfa_offset 16
 6291 0004 00AF     		add	r7, sp, #0
 6292              	.LCFI400:
 6293              		.cfi_def_cfa_register 7
 6294 0006 7860     		str	r0, [r7, #4]
 6295 0008 3960     		str	r1, [r7]
 6296              	.LBB32:
ARM GAS  /tmp/ccU23Djm.s 			page 177


 137:Cpp/fixed_size_function.hpp ****     move(std::move(src));
 6297              		.loc 12 137 3
 6298 000a 7B68     		ldr	r3, [r7, #4]
 6299 000c 1846     		mov	r0, r3
 6300 000e FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EmJEEC1Ev
 138:Cpp/fixed_size_function.hpp ****   }
 6301              		.loc 12 138 19
 6302 0012 3868     		ldr	r0, [r7]
 6303 0014 FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 6304 0018 0346     		mov	r3, r0
 138:Cpp/fixed_size_function.hpp ****   }
 6305              		.loc 12 138 5
 6306 001a 1946     		mov	r1, r3
 6307 001c 7868     		ldr	r0, [r7, #4]
 6308 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_
 6309              	.LBE32:
 139:Cpp/fixed_size_function.hpp **** 
 6310              		.loc 12 139 3
 6311 0022 7B68     		ldr	r3, [r7, #4]
 6312 0024 1846     		mov	r0, r3
 6313 0026 0837     		adds	r7, r7, #8
 6314              	.LCFI401:
 6315              		.cfi_def_cfa_offset 8
 6316 0028 BD46     		mov	sp, r7
 6317              	.LCFI402:
 6318              		.cfi_def_cfa_register 13
 6319              		@ sp needed
 6320 002a 80BD     		pop	{r7, pc}
 6321              		.cfi_endproc
 6322              	.LFE4460:
 6324              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1EOS2_
 6325              		.thumb_set _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1EOS2_,_ZN19fixed_size_functionI
 6326              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev,"axG",%progbits,_ZN19fix
 6327              		.align	1
 6328              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev
 6329              		.syntax unified
 6330              		.thumb
 6331              		.thumb_func
 6332              		.fpu fpv4-sp-d16
 6334              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev:
 6335              	.LFB4463:
 101:Cpp/fixed_size_function.hpp ****   {
 6336              		.loc 12 101 3
 6337              		.cfi_startproc
 6338              		@ args = 0, pretend = 0, frame = 8
 6339              		@ frame_needed = 1, uses_anonymous_args = 0
 6340 0000 80B5     		push	{r7, lr}
 6341              	.LCFI403:
 6342              		.cfi_def_cfa_offset 8
 6343              		.cfi_offset 7, -8
 6344              		.cfi_offset 14, -4
 6345 0002 82B0     		sub	sp, sp, #8
 6346              	.LCFI404:
 6347              		.cfi_def_cfa_offset 16
 6348 0004 00AF     		add	r7, sp, #0
 6349              	.LCFI405:
 6350              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccU23Djm.s 			page 178


 6351 0006 7860     		str	r0, [r7, #4]
 6352              	.LBB33:
 103:Cpp/fixed_size_function.hpp ****   }
 6353              		.loc 12 103 5
 6354 0008 7868     		ldr	r0, [r7, #4]
 6355 000a FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv
 6356              	.LBE33:
 104:Cpp/fixed_size_function.hpp **** 
 6357              		.loc 12 104 3
 6358 000e 7B68     		ldr	r3, [r7, #4]
 6359 0010 1846     		mov	r0, r3
 6360 0012 0837     		adds	r7, r7, #8
 6361              	.LCFI406:
 6362              		.cfi_def_cfa_offset 8
 6363 0014 BD46     		mov	sp, r7
 6364              	.LCFI407:
 6365              		.cfi_def_cfa_register 13
 6366              		@ sp needed
 6367 0016 80BD     		pop	{r7, pc}
 6368              		.cfi_endproc
 6369              	.LFE4463:
 6371              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EED1Ev
 6372              		.thumb_set _ZN19fixed_size_functionIFmvELj32EL14construct_type2EED1Ev,_ZN19fixed_size_functionIFmv
 6373              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20sch
 6374              		.align	1
 6375              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20schedule_con
 6376              		.syntax unified
 6377              		.thumb
 6378              		.thumb_func
 6379              		.fpu fpv4-sp-d16
 6381              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20schedule_cond_repea
 6382              	.LFB4466:
 148:Cpp/fixed_size_function.hpp ****   {
 6383              		.loc 12 148 3
 6384              		.cfi_startproc
 6385              		@ args = 0, pretend = 0, frame = 8
 6386              		@ frame_needed = 1, uses_anonymous_args = 0
 6387 0000 80B5     		push	{r7, lr}
 6388              	.LCFI408:
 6389              		.cfi_def_cfa_offset 8
 6390              		.cfi_offset 7, -8
 6391              		.cfi_offset 14, -4
 6392 0002 82B0     		sub	sp, sp, #8
 6393              	.LCFI409:
 6394              		.cfi_def_cfa_offset 16
 6395 0004 00AF     		add	r7, sp, #0
 6396              	.LCFI410:
 6397              		.cfi_def_cfa_register 7
 6398 0006 7860     		str	r0, [r7, #4]
 6399 0008 3960     		str	r1, [r7]
 6400              	.LBB34:
 149:Cpp/fixed_size_function.hpp ****     create(std::forward<Functor>(f));
 6401              		.loc 12 149 3
 6402 000a 7B68     		ldr	r3, [r7, #4]
 6403 000c 1846     		mov	r0, r3
 6404 000e FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
 150:Cpp/fixed_size_function.hpp ****   }
ARM GAS  /tmp/ccU23Djm.s 			page 179


 6405              		.loc 12 150 5
 6406 0012 3868     		ldr	r0, [r7]
 6407 0014 FFF7FEFF 		bl	_ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14cons
 6408 0018 0346     		mov	r3, r0
 6409 001a 1946     		mov	r1, r3
 6410 001c 7868     		ldr	r0, [r7, #4]
 6411 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedule_c
 6412              	.LBE34:
 151:Cpp/fixed_size_function.hpp **** 
 6413              		.loc 12 151 3
 6414 0022 7B68     		ldr	r3, [r7, #4]
 6415 0024 1846     		mov	r0, r3
 6416 0026 0837     		adds	r7, r7, #8
 6417              	.LCFI411:
 6418              		.cfi_def_cfa_offset 8
 6419 0028 BD46     		mov	sp, r7
 6420              	.LCFI412:
 6421              		.cfi_def_cfa_register 13
 6422              		@ sp needed
 6423 002a 80BD     		pop	{r7, pc}
 6424              		.cfi_endproc
 6425              	.LFE4466:
 6427              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZN4otto3mcu9Scheduler20schedule_con
 6428              		.thumb_set _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZN4otto3mcu9Scheduler20schedul
 6429              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv,"axG",%progbits,
 6430              		.align	1
 6431              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
 6432              		.syntax unified
 6433              		.thumb
 6434              		.thumb_func
 6435              		.fpu fpv4-sp-d16
 6437              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv:
 6438              	.LFB4468:
 134:Cpp/local_vector.hpp ****     {
 6439              		.loc 5 134 27
 6440              		.cfi_startproc
 6441              		@ args = 0, pretend = 0, frame = 8
 6442              		@ frame_needed = 1, uses_anonymous_args = 0
 6443 0000 80B5     		push	{r7, lr}
 6444              	.LCFI413:
 6445              		.cfi_def_cfa_offset 8
 6446              		.cfi_offset 7, -8
 6447              		.cfi_offset 14, -4
 6448 0002 82B0     		sub	sp, sp, #8
 6449              	.LCFI414:
 6450              		.cfi_def_cfa_offset 16
 6451 0004 00AF     		add	r7, sp, #0
 6452              	.LCFI415:
 6453              		.cfi_def_cfa_register 7
 6454 0006 7860     		str	r0, [r7, #4]
 140:Cpp/local_vector.hpp **** #else
 6455              		.loc 5 140 58
 6456 0008 7B68     		ldr	r3, [r7, #4]
 140:Cpp/local_vector.hpp **** #else
 6457              		.loc 5 140 26
 6458 000a 1846     		mov	r0, r3
 6459 000c FFF7FEFF 		bl	_ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_
ARM GAS  /tmp/ccU23Djm.s 			page 180


 6460 0010 0346     		mov	r3, r0
 145:Cpp/local_vector.hpp **** 
 6461              		.loc 5 145 5
 6462 0012 1846     		mov	r0, r3
 6463 0014 0837     		adds	r7, r7, #8
 6464              	.LCFI416:
 6465              		.cfi_def_cfa_offset 8
 6466 0016 BD46     		mov	sp, r7
 6467              	.LCFI417:
 6468              		.cfi_def_cfa_register 13
 6469              		@ sp needed
 6470 0018 80BD     		pop	{r7, pc}
 6471              		.cfi_endproc
 6472              	.LFE4468:
 6474              		.section	.text._ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEO
 6475              		.align	1
 6476              		.weak	_ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_
 6477              		.syntax unified
 6478              		.thumb
 6479              		.thumb_func
 6480              		.fpu fpv4-sp-d16
 6482              	_ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_:
 6483              	.LFB4473:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 6484              		.loc 13 99 5
 6485              		.cfi_startproc
 6486              		@ args = 0, pretend = 0, frame = 8
 6487              		@ frame_needed = 1, uses_anonymous_args = 0
 6488              		@ link register save eliminated.
 6489 0000 80B4     		push	{r7}
 6490              	.LCFI418:
 6491              		.cfi_def_cfa_offset 4
 6492              		.cfi_offset 7, -4
 6493 0002 83B0     		sub	sp, sp, #12
 6494              	.LCFI419:
 6495              		.cfi_def_cfa_offset 16
 6496 0004 00AF     		add	r7, sp, #0
 6497              	.LCFI420:
 6498              		.cfi_def_cfa_register 7
 6499 0006 7860     		str	r0, [r7, #4]
 6500              		.loc 13 100 74
 6501 0008 7B68     		ldr	r3, [r7, #4]
 6502              		.loc 13 100 77
 6503 000a 1846     		mov	r0, r3
 6504 000c 0C37     		adds	r7, r7, #12
 6505              	.LCFI421:
 6506              		.cfi_def_cfa_offset 4
 6507 000e BD46     		mov	sp, r7
 6508              	.LCFI422:
 6509              		.cfi_def_cfa_register 13
 6510              		@ sp needed
 6511 0010 5DF8047B 		ldr	r7, [sp], #4
 6512              	.LCFI423:
 6513              		.cfi_restore 7
 6514              		.cfi_def_cfa_offset 0
 6515 0014 7047     		bx	lr
 6516              		.cfi_endproc
ARM GAS  /tmp/ccU23Djm.s 			page 181


 6517              	.LFE4473:
 6519              		.section	.text._ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_,"axG",%progbits,
 6520              		.align	1
 6521              		.weak	_ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_
 6522              		.syntax unified
 6523              		.thumb
 6524              		.thumb_func
 6525              		.fpu fpv4-sp-d16
 6527              	_ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:
 6528              	.LFB4469:
 6529              		.file 14 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // Heap implementation -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** /*
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  *
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * Copyright (c) 1994
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * Hewlett-Packard Company
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  *
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * representations about the suitability of this software for any
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  *
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * Copyright (c) 1997
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * Silicon Graphics Computer Systems, Inc.
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  *
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * Permission to use, copy, modify, distribute and sell this software
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * and its documentation for any purpose is hereby granted without fee,
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * provided that the above copyright notice appear in all copies and
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * that both that copyright notice and this permission notice appear
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * in supporting documentation.  Silicon Graphics makes no
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * representations about the suitability of this software for any
ARM GAS  /tmp/ccU23Djm.s 			page 182


  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  */
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** /** @file bits/stl_heap.h
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  *  This is an internal header file, included by other library headers.
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  *  Do not attempt to use it directly. @headername{queue}
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****  */
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** #ifndef _STL_HEAP_H
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** #define _STL_HEAP_H 1
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** #include <debug/debug.h>
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** #include <bits/move.h>
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** #include <bits/predefined_ops.h>
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** namespace std _GLIBCXX_VISIBILITY(default)
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** {
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   /**
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    * @defgroup heap_algorithms Heap
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    * @ingroup sorting_algorithms
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    */
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance,
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	   typename _Compare>
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     _Distance
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __is_heap_until(_RandomAccessIterator __first, _Distance __n,
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		    _Compare& __comp)
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _Distance __parent = 0;
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       for (_Distance __child = 1; __child < __n; ++__child)
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  if (__comp(__first + __parent, __first + __child))
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    return __child;
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  if ((__child & 1) == 0)
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    ++__parent;
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       return __n;
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   // __is_heap, a predicate testing whether or not a range is a heap.
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   // This function is an extension, not part of the C++ standard.
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance>
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline bool
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _Distance __n)
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_less_iter __comp;
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       return std::__is_heap_until(__first, __n, __comp) == __n;
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare,
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	   typename _Distance>
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline bool
 101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
 102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef __decltype(__comp) _Cmp;
ARM GAS  /tmp/ccU23Djm.s 			page 183


 104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
 105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       return std::__is_heap_until(__first, __n, __cmp) == __n;
 106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline bool
 110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     { return std::__is_heap(__first, std::distance(__first, __last)); }
 112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline bool
 115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	      _Compare __comp)
 117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       return std::__is_heap(__first, _GLIBCXX_MOVE(__comp),
 119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 			    std::distance(__first, __last));
 120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap,
 123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   // + is_heap and is_heap_until in C++0x.
 124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
 126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	   typename _Compare>
 127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     void
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __push_heap(_RandomAccessIterator __first,
 129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		_Distance __holeIndex, _Distance __topIndex, _Tp __value,
 130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		_Compare& __comp)
 131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _Distance __parent = (__holeIndex - 1) / 2;
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __parent;
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __parent = (__holeIndex - 1) / 2;
 138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   /**
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @brief  Push an element onto a heap.
 144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __last   End of heap + element.
 146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *
 148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  This operation pushes the element at last-1 onto the valid heap
 149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  over the range [__first,__last-1).  After completion,
 150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  [__first,__last) is a valid heap.
 151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   */
 152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline void
 154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  _ValueType;
 158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  _DistanceType;
 160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 184


 161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       // concept requirements
 162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
 165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_irreflexive(__first, __last);
 167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_heap(__first, __last - 1);
 168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_less_val __comp;
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __comp);
 173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   /**
 176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @brief  Push an element onto a heap using comparison functor.
 177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __last   End of heap + element.
 179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __comp   Comparison functor.
 180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *
 182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  This operation pushes the element at __last-1 onto the valid
 183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  heap over the range [__first,__last-1).  After completion,
 184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  [__first,__last) is a valid heap.  Compare operations are
 185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  performed using comp.
 186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   */
 187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline void
 189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	      _Compare __comp)
 191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  _ValueType;
 194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  _DistanceType;
 196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       // concept requirements
 198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
 202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_heap_pred(__first, __last - 1, __comp);
 203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	__cmp(_GLIBCXX_MOVE(__comp));
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
 209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance,
 212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	   typename _Tp, typename _Compare>
 213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     void
 214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       const _Distance __topIndex = __holeIndex;
ARM GAS  /tmp/ccU23Djm.s 			page 185


 218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _Distance __secondChild = __holeIndex;
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       while (__secondChild < (__len - 1) / 2)
 220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __secondChild = 2 * (__secondChild + 1);
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    __secondChild--;
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __secondChild;
 227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __secondChild = 2 * (__secondChild + 1);
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __secondChild - 1;
 234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	__cmp(_GLIBCXX_MOVE(__comp));
 237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, __holeIndex, __topIndex,
 238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _GLIBCXX_MOVE(__value), __cmp);
 239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline void
 243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	       _RandomAccessIterator __result, _Compare& __comp)
 245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	_ValueType;
 248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	_DistanceType;
 250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*__result);
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__adjust_heap(__first, _DistanceType(0),
 254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 			 _DistanceType(__last - __first),
 255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 			 _GLIBCXX_MOVE(__value), __comp);
 256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   /**
 259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @brief  Pop an element off a heap.
 260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __last   End of heap.
 262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @pre    [__first, __last) is a valid, non-empty range.
 263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *
 265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  This operation pops the top of the heap.  The elements __first
 266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  and __last-1 are swapped and [__first,__last-1) is made into a
 267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  heap.
 268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   */
 269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline void
 271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       // concept requirements
 274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
ARM GAS  /tmp/ccU23Djm.s 			page 186


 275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
 277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	typename iterator_traits<_RandomAccessIterator>::value_type>)
 278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_non_empty_range(__first, __last);
 279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_irreflexive(__first, __last);
 281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_heap(__first, __last);
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       if (__last - __first > 1)
 284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  --__last;
 286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __gnu_cxx::__ops::_Iter_less_iter __comp;
 287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  std::__pop_heap(__first, __last, __last, __comp);
 288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   /**
 292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @brief  Pop an element off a heap using comparison functor.
 293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __last   End of heap.
 295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @param  __comp   Comparison functor to use.
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *
 298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  This operation pops the top of the heap.  The elements __first
 299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  and __last-1 are swapped and [__first,__last-1) is made into a
 300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****    *  heap.  Comparisons are made using comp.
 301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   */
 302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     inline void
 304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     pop_heap(_RandomAccessIterator __first,
 6530              		.loc 14 304 5
 6531              		.cfi_startproc
 6532              		@ args = 0, pretend = 0, frame = 24
 6533              		@ frame_needed = 1, uses_anonymous_args = 0
 6534 0000 80B5     		push	{r7, lr}
 6535              	.LCFI424:
 6536              		.cfi_def_cfa_offset 8
 6537              		.cfi_offset 7, -8
 6538              		.cfi_offset 14, -4
 6539 0002 86B0     		sub	sp, sp, #24
 6540              	.LCFI425:
 6541              		.cfi_def_cfa_offset 32
 6542 0004 00AF     		add	r7, sp, #0
 6543              	.LCFI426:
 6544              		.cfi_def_cfa_register 7
 6545 0006 F860     		str	r0, [r7, #12]
 6546 0008 B960     		str	r1, [r7, #8]
 6547 000a 3A71     		strb	r2, [r7, #4]
 6548              	.LBB35:
 305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	     _RandomAccessIterator __last, _Compare __comp)
 306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     {
 307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       // concept requirements
 308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
 312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_non_empty_range(__first, __last);
ARM GAS  /tmp/ccU23Djm.s 			page 187


 313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       __glibcxx_requires_heap_pred(__first, __last, __comp);
 314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       if (__last - __first > 1)
 6549              		.loc 14 315 18
 6550 000c BA68     		ldr	r2, [r7, #8]
 6551 000e FB68     		ldr	r3, [r7, #12]
 6552 0010 D31A     		subs	r3, r2, r3
 6553              		.loc 14 315 7
 6554 0012 502B     		cmp	r3, #80
 6555 0014 09DD     		ble	.L236
 6556              	.LBB36:
 316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  typedef __decltype(__comp) _Cmp;
 318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
 319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  --__last;
 6557              		.loc 14 319 4
 6558 0016 BB68     		ldr	r3, [r7, #8]
 6559 0018 503B     		subs	r3, r3, #80
 6560 001a BB60     		str	r3, [r7, #8]
 320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  std::__pop_heap(__first, __last, __last, __cmp);
 6561              		.loc 14 320 19
 6562 001c 07F11403 		add	r3, r7, #20
 6563 0020 BA68     		ldr	r2, [r7, #8]
 6564 0022 B968     		ldr	r1, [r7, #8]
 6565 0024 F868     		ldr	r0, [r7, #12]
 6566 0026 FFF7FEFF 		bl	_ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EE
 6567              	.L236:
 6568              	.LBE36:
 6569              	.LBE35:
 321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 6570              		.loc 14 322 5
 6571 002a 00BF     		nop
 6572 002c 1837     		adds	r7, r7, #24
 6573              	.LCFI427:
 6574              		.cfi_def_cfa_offset 8
 6575 002e BD46     		mov	sp, r7
 6576              	.LCFI428:
 6577              		.cfi_def_cfa_register 13
 6578              		@ sp needed
 6579 0030 80BD     		pop	{r7, pc}
 6580              		.cfi_endproc
 6581              	.LFE4469:
 6583              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv,"axG",%progbits,
 6584              		.align	1
 6585              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv
 6586              		.syntax unified
 6587              		.thumb
 6588              		.thumb_func
 6589              		.fpu fpv4-sp-d16
 6591              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv:
 6592              	.LFB4474:
 116:Cpp/local_vector.hpp ****     {
 6593              		.loc 5 116 27
 6594              		.cfi_startproc
 6595              		@ args = 0, pretend = 0, frame = 8
 6596              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 188


 6597 0000 80B5     		push	{r7, lr}
 6598              	.LCFI429:
 6599              		.cfi_def_cfa_offset 8
 6600              		.cfi_offset 7, -8
 6601              		.cfi_offset 14, -4
 6602 0002 82B0     		sub	sp, sp, #8
 6603              	.LCFI430:
 6604              		.cfi_def_cfa_offset 16
 6605 0004 00AF     		add	r7, sp, #0
 6606              	.LCFI431:
 6607              		.cfi_def_cfa_register 7
 6608 0006 7860     		str	r0, [r7, #4]
 118:Cpp/local_vector.hpp ****     }
 6609              		.loc 5 118 20
 6610 0008 7868     		ldr	r0, [r7, #4]
 6611 000a FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
 6612 000e 0146     		mov	r1, r0
 118:Cpp/local_vector.hpp ****     }
 6613              		.loc 5 118 21
 6614 0010 7B68     		ldr	r3, [r7, #4]
 6615 0012 03F5A033 		add	r3, r3, #81920
 6616 0016 1A68     		ldr	r2, [r3]
 118:Cpp/local_vector.hpp ****     }
 6617              		.loc 5 118 20
 6618 0018 1346     		mov	r3, r2
 6619 001a 9B00     		lsls	r3, r3, #2
 6620 001c 1344     		add	r3, r3, r2
 6621 001e 1B01     		lsls	r3, r3, #4
 6622 0020 503B     		subs	r3, r3, #80
 118:Cpp/local_vector.hpp ****     }
 6623              		.loc 5 118 30
 6624 0022 0B44     		add	r3, r3, r1
 119:Cpp/local_vector.hpp **** 
 6625              		.loc 5 119 5
 6626 0024 1846     		mov	r0, r3
 6627 0026 0837     		adds	r7, r7, #8
 6628              	.LCFI432:
 6629              		.cfi_def_cfa_offset 8
 6630 0028 BD46     		mov	sp, r7
 6631              	.LCFI433:
 6632              		.cfi_def_cfa_register 13
 6633              		@ sp needed
 6634 002a 80BD     		pop	{r7, pc}
 6635              		.cfi_endproc
 6636              	.LFE4474:
 6638              		.section	.text._ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5error
 6639              		.align	1
 6640              		.weak	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2EOS8_
 6641              		.syntax unified
 6642              		.thumb
 6643              		.thumb_func
 6644              		.fpu fpv4-sp-d16
 6646              	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2EOS8_:
 6647              	.LFB4476:
 154:Cpp/expected.hpp **** 
 6648              		.loc 7 154 22
 6649              		.cfi_startproc
ARM GAS  /tmp/ccU23Djm.s 			page 189


 6650              		@ args = 0, pretend = 0, frame = 8
 6651              		@ frame_needed = 1, uses_anonymous_args = 0
 6652 0000 80B5     		push	{r7, lr}
 6653              	.LCFI434:
 6654              		.cfi_def_cfa_offset 8
 6655              		.cfi_offset 7, -8
 6656              		.cfi_offset 14, -4
 6657 0002 82B0     		sub	sp, sp, #8
 6658              	.LCFI435:
 6659              		.cfi_def_cfa_offset 16
 6660 0004 00AF     		add	r7, sp, #0
 6661              	.LCFI436:
 6662              		.cfi_def_cfa_register 7
 6663 0006 7860     		str	r0, [r7, #4]
 6664 0008 3960     		str	r1, [r7]
 6665              	.LBB37:
 154:Cpp/expected.hpp **** 
 6666              		.loc 7 154 57
 6667 000a 3868     		ldr	r0, [r7]
 6668 000c FFF7FEFF 		bl	_ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_refer
 6669 0010 0346     		mov	r3, r0
 154:Cpp/expected.hpp **** 
 6670              		.loc 7 154 60
 6671 0012 1A68     		ldr	r2, [r3]
 6672 0014 7B68     		ldr	r3, [r7, #4]
 6673 0016 1A60     		str	r2, [r3]
 6674              	.LBE37:
 154:Cpp/expected.hpp **** 
 6675              		.loc 7 154 63
 6676 0018 7B68     		ldr	r3, [r7, #4]
 6677 001a 1846     		mov	r0, r3
 6678 001c 0837     		adds	r7, r7, #8
 6679              	.LCFI437:
 6680              		.cfi_def_cfa_offset 8
 6681 001e BD46     		mov	sp, r7
 6682              	.LCFI438:
 6683              		.cfi_def_cfa_register 13
 6684              		@ sp needed
 6685 0020 80BD     		pop	{r7, pc}
 6686              		.cfi_endproc
 6687              	.LFE4476:
 6689              		.weak	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1EOS8_
 6690              		.thumb_set _ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1
 6691              		.section	.text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Schedul
 6692              		.align	1
 6693              		.weak	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskEL
 6694              		.syntax unified
 6695              		.thumb
 6696              		.thumb_func
 6697              		.fpu fpv4-sp-d16
 6699              	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE
 6700              	.LFB4484:
 772:Cpp/expected.hpp **** 
 6701              		.loc 7 772 41
 6702              		.cfi_startproc
 6703              		@ args = 0, pretend = 0, frame = 16
 6704              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 190


 6705 0000 90B5     		push	{r4, r7, lr}
 6706              	.LCFI439:
 6707              		.cfi_def_cfa_offset 12
 6708              		.cfi_offset 4, -12
 6709              		.cfi_offset 7, -8
 6710              		.cfi_offset 14, -4
 6711 0002 85B0     		sub	sp, sp, #20
 6712              	.LCFI440:
 6713              		.cfi_def_cfa_offset 32
 6714 0004 00AF     		add	r7, sp, #0
 6715              	.LCFI441:
 6716              		.cfi_def_cfa_register 7
 6717 0006 F860     		str	r0, [r7, #12]
 6718 0008 3972     		strb	r1, [r7, #8]
 6719 000a 7A60     		str	r2, [r7, #4]
 6720              	.LBB38:
 772:Cpp/expected.hpp **** 
 6721              		.loc 7 772 41
 6722 000c FB68     		ldr	r3, [r7, #12]
 6723 000e 7A68     		ldr	r2, [r7, #4]
 6724 0010 2146     		mov	r1, r4
 6725 0012 1846     		mov	r0, r3
 6726 0014 FFF7FEFF 		bl	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6727              	.LBE38:
 6728 0018 FB68     		ldr	r3, [r7, #12]
 6729 001a 1846     		mov	r0, r3
 6730 001c 1437     		adds	r7, r7, #20
 6731              	.LCFI442:
 6732              		.cfi_def_cfa_offset 12
 6733 001e BD46     		mov	sp, r7
 6734              	.LCFI443:
 6735              		.cfi_def_cfa_register 13
 6736              		@ sp needed
 6737 0020 90BD     		pop	{r4, r7, pc}
 6738              		.cfi_endproc
 6739              	.LFE4484:
 6741              		.weak	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskEL
 6742              		.thumb_set _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4T
 6743              		.section	.text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Tas
 6744              		.align	1
 6745              		.weak	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6746              		.syntax unified
 6747              		.thumb
 6748              		.thumb_func
 6749              		.fpu fpv4-sp-d16
 6751              	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5error
 6752              	.LFB4486:
 825:Cpp/expected.hpp **** };
 6753              		.loc 7 825 41
 6754              		.cfi_startproc
 6755              		@ args = 0, pretend = 0, frame = 16
 6756              		@ frame_needed = 1, uses_anonymous_args = 0
 6757 0000 90B5     		push	{r4, r7, lr}
 6758              	.LCFI444:
 6759              		.cfi_def_cfa_offset 12
 6760              		.cfi_offset 4, -12
 6761              		.cfi_offset 7, -8
ARM GAS  /tmp/ccU23Djm.s 			page 191


 6762              		.cfi_offset 14, -4
 6763 0002 85B0     		sub	sp, sp, #20
 6764              	.LCFI445:
 6765              		.cfi_def_cfa_offset 32
 6766 0004 00AF     		add	r7, sp, #0
 6767              	.LCFI446:
 6768              		.cfi_def_cfa_register 7
 6769 0006 F860     		str	r0, [r7, #12]
 6770 0008 3972     		strb	r1, [r7, #8]
 6771 000a 7A60     		str	r2, [r7, #4]
 6772              	.LBB39:
 825:Cpp/expected.hpp **** };
 6773              		.loc 7 825 41
 6774 000c FB68     		ldr	r3, [r7, #12]
 6775 000e 7A68     		ldr	r2, [r7, #4]
 6776 0010 2146     		mov	r1, r4
 6777 0012 1846     		mov	r0, r3
 6778 0014 FFF7FEFF 		bl	_ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj10
 6779              	.LBE39:
 6780 0018 FB68     		ldr	r3, [r7, #12]
 6781 001a 1846     		mov	r0, r3
 6782 001c 1437     		adds	r7, r7, #20
 6783              	.LCFI447:
 6784              		.cfi_def_cfa_offset 12
 6785 001e BD46     		mov	sp, r7
 6786              	.LCFI448:
 6787              		.cfi_def_cfa_register 13
 6788              		@ sp needed
 6789 0020 90BD     		pop	{r4, r7, pc}
 6790              		.cfi_endproc
 6791              	.LFE4486:
 6793              		.weak	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6794              		.thumb_set _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj
 6795              		.section	.text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Tas
 6796              		.align	1
 6797              		.weak	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6798              		.syntax unified
 6799              		.thumb
 6800              		.thumb_func
 6801              		.fpu fpv4-sp-d16
 6803              	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5error
 6804              	.LFB4488:
 858:Cpp/expected.hpp **** };
 6805              		.loc 7 858 35
 6806              		.cfi_startproc
 6807              		@ args = 0, pretend = 0, frame = 16
 6808              		@ frame_needed = 1, uses_anonymous_args = 0
 6809 0000 90B5     		push	{r4, r7, lr}
 6810              	.LCFI449:
 6811              		.cfi_def_cfa_offset 12
 6812              		.cfi_offset 4, -12
 6813              		.cfi_offset 7, -8
 6814              		.cfi_offset 14, -4
 6815 0002 85B0     		sub	sp, sp, #20
 6816              	.LCFI450:
 6817              		.cfi_def_cfa_offset 32
 6818 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccU23Djm.s 			page 192


 6819              	.LCFI451:
 6820              		.cfi_def_cfa_register 7
 6821 0006 F860     		str	r0, [r7, #12]
 6822 0008 3972     		strb	r1, [r7, #8]
 6823 000a 7A60     		str	r2, [r7, #4]
 6824              	.LBB40:
 858:Cpp/expected.hpp **** };
 6825              		.loc 7 858 35
 6826 000c FB68     		ldr	r3, [r7, #12]
 6827 000e 7A68     		ldr	r2, [r7, #4]
 6828 0010 2146     		mov	r1, r4
 6829 0012 1846     		mov	r0, r3
 6830 0014 FFF7FEFF 		bl	_ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5e
 6831              	.LBE40:
 6832 0018 FB68     		ldr	r3, [r7, #12]
 6833 001a 1846     		mov	r0, r3
 6834 001c 1437     		adds	r7, r7, #20
 6835              	.LCFI452:
 6836              		.cfi_def_cfa_offset 12
 6837 001e BD46     		mov	sp, r7
 6838              	.LCFI453:
 6839              		.cfi_def_cfa_register 13
 6840              		@ sp needed
 6841 0020 90BD     		pop	{r4, r7, pc}
 6842              		.cfi_endproc
 6843              	.LFE4488:
 6845              		.weak	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6846              		.thumb_set _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj
 6847              		.section	.text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Schedu
 6848              		.align	1
 6849              		.weak	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 6850              		.syntax unified
 6851              		.thumb
 6852              		.thumb_func
 6853              		.fpu fpv4-sp-d16
 6855              	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6856              	.LFB4490:
 893:Cpp/expected.hpp **** };
 6857              		.loc 7 893 35
 6858              		.cfi_startproc
 6859              		@ args = 0, pretend = 0, frame = 16
 6860              		@ frame_needed = 1, uses_anonymous_args = 0
 6861 0000 90B5     		push	{r4, r7, lr}
 6862              	.LCFI454:
 6863              		.cfi_def_cfa_offset 12
 6864              		.cfi_offset 4, -12
 6865              		.cfi_offset 7, -8
 6866              		.cfi_offset 14, -4
 6867 0002 85B0     		sub	sp, sp, #20
 6868              	.LCFI455:
 6869              		.cfi_def_cfa_offset 32
 6870 0004 00AF     		add	r7, sp, #0
 6871              	.LCFI456:
 6872              		.cfi_def_cfa_register 7
 6873 0006 F860     		str	r0, [r7, #12]
 6874 0008 3972     		strb	r1, [r7, #8]
 6875 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 193


 6876              	.LBB41:
 893:Cpp/expected.hpp **** };
 6877              		.loc 7 893 35
 6878 000c FB68     		ldr	r3, [r7, #12]
 6879 000e 7A68     		ldr	r2, [r7, #4]
 6880 0010 2146     		mov	r1, r4
 6881 0012 1846     		mov	r0, r3
 6882 0014 FFF7FEFF 		bl	_ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5e
 6883              	.LBE41:
 6884 0018 FB68     		ldr	r3, [r7, #12]
 6885 001a 1846     		mov	r0, r3
 6886 001c 1437     		adds	r7, r7, #20
 6887              	.LCFI457:
 6888              		.cfi_def_cfa_offset 12
 6889 001e BD46     		mov	sp, r7
 6890              	.LCFI458:
 6891              		.cfi_def_cfa_register 13
 6892              		@ sp needed
 6893 0020 90BD     		pop	{r4, r7, pc}
 6894              		.cfi_endproc
 6895              	.LFE4490:
 6897              		.weak	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 6898              		.thumb_set _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4
 6899              		.section	.text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Schedu
 6900              		.align	1
 6901              		.weak	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 6902              		.syntax unified
 6903              		.thumb
 6904              		.thumb_func
 6905              		.fpu fpv4-sp-d16
 6907              	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024E
 6908              	.LFB4492:
 927:Cpp/expected.hpp **** };
 6909              		.loc 7 927 42
 6910              		.cfi_startproc
 6911              		@ args = 0, pretend = 0, frame = 16
 6912              		@ frame_needed = 1, uses_anonymous_args = 0
 6913 0000 90B5     		push	{r4, r7, lr}
 6914              	.LCFI459:
 6915              		.cfi_def_cfa_offset 12
 6916              		.cfi_offset 4, -12
 6917              		.cfi_offset 7, -8
 6918              		.cfi_offset 14, -4
 6919 0002 85B0     		sub	sp, sp, #20
 6920              	.LCFI460:
 6921              		.cfi_def_cfa_offset 32
 6922 0004 00AF     		add	r7, sp, #0
 6923              	.LCFI461:
 6924              		.cfi_def_cfa_register 7
 6925 0006 F860     		str	r0, [r7, #12]
 6926 0008 3972     		strb	r1, [r7, #8]
 6927 000a 7A60     		str	r2, [r7, #4]
 6928              	.LBB42:
 927:Cpp/expected.hpp **** };
 6929              		.loc 7 927 42
 6930 000c FB68     		ldr	r3, [r7, #12]
 6931 000e 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 194


 6932 0010 2146     		mov	r1, r4
 6933 0012 1846     		mov	r0, r3
 6934 0014 FFF7FEFF 		bl	_ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1
 6935              	.LBE42:
 6936 0018 FB68     		ldr	r3, [r7, #12]
 6937 001a 1846     		mov	r0, r3
 6938 001c 1437     		adds	r7, r7, #20
 6939              	.LCFI462:
 6940              		.cfi_def_cfa_offset 12
 6941 001e BD46     		mov	sp, r7
 6942              	.LCFI463:
 6943              		.cfi_def_cfa_register 13
 6944              		@ sp needed
 6945 0020 90BD     		pop	{r4, r7, pc}
 6946              		.cfi_endproc
 6947              	.LFE4492:
 6949              		.weak	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskE
 6950              		.thumb_set _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4
 6951              		.section	.text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE
 6952              		.align	1
 6953              		.weak	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2IS8_LPv
 6954              		.syntax unified
 6955              		.thumb
 6956              		.thumb_func
 6957              		.fpu fpv4-sp-d16
 6959              	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2IS8_LPv0ELSB_0
 6960              	.LFB4494:
1438:Cpp/expected.hpp ****   constexpr expected(const expected &rhs) = default;
1439:Cpp/expected.hpp ****   constexpr expected(expected &&rhs) = default;
1440:Cpp/expected.hpp ****   expected &operator=(const expected &rhs) = default;
1441:Cpp/expected.hpp ****   expected &operator=(expected &&rhs) = default;
1442:Cpp/expected.hpp **** 
1443:Cpp/expected.hpp ****   template <class... Args,
1444:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<T, Args &&...>::value> * =
1445:Cpp/expected.hpp ****                 nullptr>
1446:Cpp/expected.hpp ****   constexpr expected(in_place_t, Args &&... args)
1447:Cpp/expected.hpp ****       : impl_base(in_place, std::forward<Args>(args)...),
1448:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1449:Cpp/expected.hpp **** 
1450:Cpp/expected.hpp ****   template <class U, class... Args,
1451:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
1452:Cpp/expected.hpp ****                 T, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
1453:Cpp/expected.hpp ****   constexpr expected(in_place_t, std::initializer_list<U> il, Args &&... args)
1454:Cpp/expected.hpp ****       : impl_base(in_place, il, std::forward<Args>(args)...),
1455:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1456:Cpp/expected.hpp **** 
1457:Cpp/expected.hpp ****   /// \group unexpected_ctor
1458:Cpp/expected.hpp ****   /// \synopsis EXPLICIT constexpr expected(const unexpected<G> &e);
1459:Cpp/expected.hpp ****   template <class G = E,
1460:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, const G &>::value> * =
1461:Cpp/expected.hpp ****                 nullptr,
1462:Cpp/expected.hpp ****             detail::enable_if_t<!std::is_convertible<const G &, E>::value> * =
1463:Cpp/expected.hpp ****                 nullptr>
1464:Cpp/expected.hpp ****   explicit constexpr expected(const unexpected<G> &e)
1465:Cpp/expected.hpp ****       : impl_base(unexpect, e.value()),
1466:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1467:Cpp/expected.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 195


1468:Cpp/expected.hpp ****   /// \exclude
1469:Cpp/expected.hpp ****   template <
1470:Cpp/expected.hpp ****       class G = E,
1471:Cpp/expected.hpp ****       detail::enable_if_t<std::is_constructible<E, const G &>::value> * =
1472:Cpp/expected.hpp ****           nullptr,
1473:Cpp/expected.hpp ****       detail::enable_if_t<std::is_convertible<const G &, E>::value> * = nullptr>
1474:Cpp/expected.hpp ****   constexpr expected(unexpected<G> const &e)
1475:Cpp/expected.hpp ****       : impl_base(unexpect, e.value()),
1476:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1477:Cpp/expected.hpp **** 
1478:Cpp/expected.hpp ****   /// \group unexpected_ctor
1479:Cpp/expected.hpp ****   /// \synopsis EXPLICIT constexpr expected(unexpected<G> &&e);
1480:Cpp/expected.hpp ****   template <
1481:Cpp/expected.hpp ****       class G = E,
1482:Cpp/expected.hpp ****       detail::enable_if_t<std::is_constructible<E, G &&>::value> * = nullptr,
1483:Cpp/expected.hpp ****       detail::enable_if_t<!std::is_convertible<G &&, E>::value> * = nullptr>
1484:Cpp/expected.hpp ****   explicit constexpr expected(unexpected<G> &&e) noexcept(
1485:Cpp/expected.hpp ****       std::is_nothrow_constructible<E, G &&>::value)
1486:Cpp/expected.hpp ****       : impl_base(unexpect, std::move(e.value())),
1487:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1488:Cpp/expected.hpp **** 
1489:Cpp/expected.hpp ****   /// \exclude
1490:Cpp/expected.hpp ****   template <
1491:Cpp/expected.hpp ****       class G = E,
1492:Cpp/expected.hpp ****       detail::enable_if_t<std::is_constructible<E, G &&>::value> * = nullptr,
1493:Cpp/expected.hpp ****       detail::enable_if_t<std::is_convertible<G &&, E>::value> * = nullptr>
1494:Cpp/expected.hpp ****   constexpr expected(unexpected<G> &&e) noexcept(
 6961              		.loc 7 1494 13
 6962              		.cfi_startproc
 6963              		@ args = 0, pretend = 0, frame = 8
 6964              		@ frame_needed = 1, uses_anonymous_args = 0
 6965 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6966              	.LCFI464:
 6967              		.cfi_def_cfa_offset 20
 6968              		.cfi_offset 4, -20
 6969              		.cfi_offset 5, -16
 6970              		.cfi_offset 6, -12
 6971              		.cfi_offset 7, -8
 6972              		.cfi_offset 14, -4
 6973 0002 83B0     		sub	sp, sp, #12
 6974              	.LCFI465:
 6975              		.cfi_def_cfa_offset 32
 6976 0004 00AF     		add	r7, sp, #0
 6977              	.LCFI466:
 6978              		.cfi_def_cfa_register 7
 6979 0006 7860     		str	r0, [r7, #4]
 6980 0008 3960     		str	r1, [r7]
 6981              	.LBB43:
1495:Cpp/expected.hpp ****       std::is_nothrow_constructible<E, G &&>::value)
1496:Cpp/expected.hpp ****       : impl_base(unexpect, std::move(e.value())),
1497:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
 6982              		.loc 7 1497 52
 6983 000a 7C68     		ldr	r4, [r7, #4]
1496:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
 6984              		.loc 7 1496 38
 6985 000c 3868     		ldr	r0, [r7]
 6986 000e FFF7FEFF 		bl	_ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5valueEv
ARM GAS  /tmp/ccU23Djm.s 			page 196


 6987 0012 0346     		mov	r3, r0
 6988 0014 1846     		mov	r0, r3
 6989 0016 FFF7FEFF 		bl	_ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_refer
 6990 001a 0346     		mov	r3, r0
 6991              		.loc 7 1497 52
 6992 001c 1A46     		mov	r2, r3
 6993 001e 3146     		mov	r1, r6
 6994 0020 2046     		mov	r0, r4
 6995 0022 FFF7FEFF 		bl	_ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1
 6996 0026 2946     		mov	r1, r5
 6997 0028 7868     		ldr	r0, [r7, #4]
 6998 002a FFF7FEFF 		bl	_ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj
 6999              	.LBE43:
 7000              		.loc 7 1497 55
 7001 002e 7B68     		ldr	r3, [r7, #4]
 7002 0030 1846     		mov	r0, r3
 7003 0032 0C37     		adds	r7, r7, #12
 7004              	.LCFI467:
 7005              		.cfi_def_cfa_offset 20
 7006 0034 BD46     		mov	sp, r7
 7007              	.LCFI468:
 7008              		.cfi_def_cfa_register 13
 7009              		@ sp needed
 7010 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 7011              		.cfi_endproc
 7012              	.LFE4494:
 7014              		.weak	_ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1IS8_LPv
 7015              		.thumb_set _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1IS
 7016              		.section	.text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4
 7017              		.align	1
 7018              		.weak	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj10
 7019              		.syntax unified
 7020              		.thumb
 7021              		.thumb_func
 7022              		.fpu fpv4-sp-d16
 7024              	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5er
 7025              	.LFB4497:
 530:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_val(), m_has_val(false) {}
 7026              		.loc 7 530 34
 7027              		.cfi_startproc
 7028              		@ args = 0, pretend = 0, frame = 8
 7029              		@ frame_needed = 1, uses_anonymous_args = 0
 7030              		@ link register save eliminated.
 7031 0000 80B4     		push	{r7}
 7032              	.LCFI469:
 7033              		.cfi_def_cfa_offset 4
 7034              		.cfi_offset 7, -4
 7035 0002 83B0     		sub	sp, sp, #12
 7036              	.LCFI470:
 7037              		.cfi_def_cfa_offset 16
 7038 0004 00AF     		add	r7, sp, #0
 7039              	.LCFI471:
 7040              		.cfi_def_cfa_register 7
 7041 0006 7860     		str	r0, [r7, #4]
 7042              	.LBB44:
 530:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_val(), m_has_val(false) {}
 7043              		.loc 7 530 74
ARM GAS  /tmp/ccU23Djm.s 			page 197


 7044 0008 7B68     		ldr	r3, [r7, #4]
 7045 000a 0122     		movs	r2, #1
 7046 000c 1A71     		strb	r2, [r3, #4]
 7047              	.LBE44:
 530:Cpp/expected.hpp ****   constexpr expected_storage_base(no_init_t) : m_val(), m_has_val(false) {}
 7048              		.loc 7 530 77
 7049 000e 7B68     		ldr	r3, [r7, #4]
 7050 0010 1846     		mov	r0, r3
 7051 0012 0C37     		adds	r7, r7, #12
 7052              	.LCFI472:
 7053              		.cfi_def_cfa_offset 4
 7054 0014 BD46     		mov	sp, r7
 7055              	.LCFI473:
 7056              		.cfi_def_cfa_register 13
 7057              		@ sp needed
 7058 0016 5DF8047B 		ldr	r7, [sp], #4
 7059              	.LCFI474:
 7060              		.cfi_restore 7
 7061              		.cfi_def_cfa_offset 0
 7062 001a 7047     		bx	lr
 7063              		.cfi_endproc
 7064              	.LFE4497:
 7066              		.weak	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj10
 7067              		.thumb_set _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Task
 7068              		.section	.text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local
 7069              		.align	1
 7070              		.weak	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS
 7071              		.syntax unified
 7072              		.thumb
 7073              		.thumb_func
 7074              		.fpu fpv4-sp-d16
 7076              	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj102
 7077              	.LFB4505:
 596:Cpp/expected.hpp **** 
 7078              		.loc 7 596 38
 7079              		.cfi_startproc
 7080              		@ args = 0, pretend = 0, frame = 16
 7081              		@ frame_needed = 1, uses_anonymous_args = 0
 7082 0000 90B5     		push	{r4, r7, lr}
 7083              	.LCFI475:
 7084              		.cfi_def_cfa_offset 12
 7085              		.cfi_offset 4, -12
 7086              		.cfi_offset 7, -8
 7087              		.cfi_offset 14, -4
 7088 0002 85B0     		sub	sp, sp, #20
 7089              	.LCFI476:
 7090              		.cfi_def_cfa_offset 32
 7091 0004 00AF     		add	r7, sp, #0
 7092              	.LCFI477:
 7093              		.cfi_def_cfa_register 7
 7094 0006 F860     		str	r0, [r7, #12]
 7095 0008 3972     		strb	r1, [r7, #8]
 7096 000a 7A60     		str	r2, [r7, #4]
 7097              	.LBB45:
 596:Cpp/expected.hpp **** 
 7098              		.loc 7 596 38
 7099 000c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccU23Djm.s 			page 198


 7100 000e 7A68     		ldr	r2, [r7, #4]
 7101 0010 2146     		mov	r1, r4
 7102 0012 1846     		mov	r0, r3
 7103 0014 FFF7FEFF 		bl	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7104              	.LBE45:
 7105 0018 FB68     		ldr	r3, [r7, #12]
 7106 001a 1846     		mov	r0, r3
 7107 001c 1437     		adds	r7, r7, #20
 7108              	.LCFI478:
 7109              		.cfi_def_cfa_offset 12
 7110 001e BD46     		mov	sp, r7
 7111              	.LCFI479:
 7112              		.cfi_def_cfa_register 13
 7113              		@ sp needed
 7114 0020 90BD     		pop	{r4, r7, pc}
 7115              		.cfi_endproc
 7116              	.LFE4505:
 7118              		.weak	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS
 7119              		.thumb_set _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vec
 7120              		.section	.text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vecto
 7121              		.align	1
 7122              		.weak	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7123              		.syntax unified
 7124              		.thumb
 7125              		.thumb_func
 7126              		.fpu fpv4-sp-d16
 7128              	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5er
 7129              	.LFB4507:
 825:Cpp/expected.hpp **** };
 7130              		.loc 7 825 41
 7131              		.cfi_startproc
 7132              		@ args = 0, pretend = 0, frame = 16
 7133              		@ frame_needed = 1, uses_anonymous_args = 0
 7134 0000 90B5     		push	{r4, r7, lr}
 7135              	.LCFI480:
 7136              		.cfi_def_cfa_offset 12
 7137              		.cfi_offset 4, -12
 7138              		.cfi_offset 7, -8
 7139              		.cfi_offset 14, -4
 7140 0002 85B0     		sub	sp, sp, #20
 7141              	.LCFI481:
 7142              		.cfi_def_cfa_offset 32
 7143 0004 00AF     		add	r7, sp, #0
 7144              	.LCFI482:
 7145              		.cfi_def_cfa_register 7
 7146 0006 F860     		str	r0, [r7, #12]
 7147 0008 3972     		strb	r1, [r7, #8]
 7148 000a 7A60     		str	r2, [r7, #4]
 7149              	.LBB46:
 825:Cpp/expected.hpp **** };
 7150              		.loc 7 825 41
 7151 000c FB68     		ldr	r3, [r7, #12]
 7152 000e 7A68     		ldr	r2, [r7, #4]
 7153 0010 2146     		mov	r1, r4
 7154 0012 1846     		mov	r0, r3
 7155 0014 FFF7FEFF 		bl	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_L
 7156              	.LBE46:
ARM GAS  /tmp/ccU23Djm.s 			page 199


 7157 0018 FB68     		ldr	r3, [r7, #12]
 7158 001a 1846     		mov	r0, r3
 7159 001c 1437     		adds	r7, r7, #20
 7160              	.LCFI483:
 7161              		.cfi_def_cfa_offset 12
 7162 001e BD46     		mov	sp, r7
 7163              	.LCFI484:
 7164              		.cfi_def_cfa_register 13
 7165              		@ sp needed
 7166 0020 90BD     		pop	{r4, r7, pc}
 7167              		.cfi_endproc
 7168              	.LFE4507:
 7170              		.weak	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7171              		.thumb_set _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5
 7172              		.section	.text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vecto
 7173              		.align	1
 7174              		.weak	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7175              		.syntax unified
 7176              		.thumb
 7177              		.thumb_func
 7178              		.fpu fpv4-sp-d16
 7180              	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5er
 7181              	.LFB4509:
 858:Cpp/expected.hpp **** };
 7182              		.loc 7 858 35
 7183              		.cfi_startproc
 7184              		@ args = 0, pretend = 0, frame = 16
 7185              		@ frame_needed = 1, uses_anonymous_args = 0
 7186 0000 90B5     		push	{r4, r7, lr}
 7187              	.LCFI485:
 7188              		.cfi_def_cfa_offset 12
 7189              		.cfi_offset 4, -12
 7190              		.cfi_offset 7, -8
 7191              		.cfi_offset 14, -4
 7192 0002 85B0     		sub	sp, sp, #20
 7193              	.LCFI486:
 7194              		.cfi_def_cfa_offset 32
 7195 0004 00AF     		add	r7, sp, #0
 7196              	.LCFI487:
 7197              		.cfi_def_cfa_register 7
 7198 0006 F860     		str	r0, [r7, #12]
 7199 0008 3972     		strb	r1, [r7, #8]
 7200 000a 7A60     		str	r2, [r7, #4]
 7201              	.LBB47:
 858:Cpp/expected.hpp **** };
 7202              		.loc 7 858 35
 7203 000c FB68     		ldr	r3, [r7, #12]
 7204 000e 7A68     		ldr	r2, [r7, #4]
 7205 0010 2146     		mov	r1, r4
 7206 0012 1846     		mov	r0, r3
 7207 0014 FFF7FEFF 		bl	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024E
 7208              	.LBE47:
 7209 0018 FB68     		ldr	r3, [r7, #12]
 7210 001a 1846     		mov	r0, r3
 7211 001c 1437     		adds	r7, r7, #20
 7212              	.LCFI488:
 7213              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccU23Djm.s 			page 200


 7214 001e BD46     		mov	sp, r7
 7215              	.LCFI489:
 7216              		.cfi_def_cfa_register 13
 7217              		@ sp needed
 7218 0020 90BD     		pop	{r4, r7, pc}
 7219              		.cfi_endproc
 7220              	.LFE4509:
 7222              		.weak	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7223              		.thumb_set _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5
 7224              		.section	.text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12loca
 7225              		.align	1
 7226              		.weak	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7227              		.syntax unified
 7228              		.thumb
 7229              		.thumb_func
 7230              		.fpu fpv4-sp-d16
 7232              	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7233              	.LFB4511:
 893:Cpp/expected.hpp **** };
 7234              		.loc 7 893 35
 7235              		.cfi_startproc
 7236              		@ args = 0, pretend = 0, frame = 16
 7237              		@ frame_needed = 1, uses_anonymous_args = 0
 7238 0000 90B5     		push	{r4, r7, lr}
 7239              	.LCFI490:
 7240              		.cfi_def_cfa_offset 12
 7241              		.cfi_offset 4, -12
 7242              		.cfi_offset 7, -8
 7243              		.cfi_offset 14, -4
 7244 0002 85B0     		sub	sp, sp, #20
 7245              	.LCFI491:
 7246              		.cfi_def_cfa_offset 32
 7247 0004 00AF     		add	r7, sp, #0
 7248              	.LCFI492:
 7249              		.cfi_def_cfa_register 7
 7250 0006 F860     		str	r0, [r7, #12]
 7251 0008 3972     		strb	r1, [r7, #8]
 7252 000a 7A60     		str	r2, [r7, #4]
 7253              	.LBB48:
 893:Cpp/expected.hpp **** };
 7254              		.loc 7 893 35
 7255 000c FB68     		ldr	r3, [r7, #12]
 7256 000e 7A68     		ldr	r2, [r7, #4]
 7257 0010 2146     		mov	r1, r4
 7258 0012 1846     		mov	r0, r3
 7259 0014 FFF7FEFF 		bl	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024E
 7260              	.LBE48:
 7261 0018 FB68     		ldr	r3, [r7, #12]
 7262 001a 1846     		mov	r0, r3
 7263 001c 1437     		adds	r7, r7, #20
 7264              	.LCFI493:
 7265              		.cfi_def_cfa_offset 12
 7266 001e BD46     		mov	sp, r7
 7267              	.LCFI494:
 7268              		.cfi_def_cfa_register 13
 7269              		@ sp needed
 7270 0020 90BD     		pop	{r4, r7, pc}
ARM GAS  /tmp/ccU23Djm.s 			page 201


 7271              		.cfi_endproc
 7272              	.LFE4511:
 7274              		.weak	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7275              		.thumb_set _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_ve
 7276              		.section	.text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12loca
 7277              		.align	1
 7278              		.weak	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7279              		.syntax unified
 7280              		.thumb
 7281              		.thumb_func
 7282              		.fpu fpv4-sp-d16
 7284              	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7285              	.LFB4513:
 927:Cpp/expected.hpp **** };
 7286              		.loc 7 927 42
 7287              		.cfi_startproc
 7288              		@ args = 0, pretend = 0, frame = 16
 7289              		@ frame_needed = 1, uses_anonymous_args = 0
 7290 0000 90B5     		push	{r4, r7, lr}
 7291              	.LCFI495:
 7292              		.cfi_def_cfa_offset 12
 7293              		.cfi_offset 4, -12
 7294              		.cfi_offset 7, -8
 7295              		.cfi_offset 14, -4
 7296 0002 85B0     		sub	sp, sp, #20
 7297              	.LCFI496:
 7298              		.cfi_def_cfa_offset 32
 7299 0004 00AF     		add	r7, sp, #0
 7300              	.LCFI497:
 7301              		.cfi_def_cfa_register 7
 7302 0006 F860     		str	r0, [r7, #12]
 7303 0008 3972     		strb	r1, [r7, #8]
 7304 000a 7A60     		str	r2, [r7, #4]
 7305              	.LBB49:
 927:Cpp/expected.hpp **** };
 7306              		.loc 7 927 42
 7307 000c FB68     		ldr	r3, [r7, #12]
 7308 000e 7A68     		ldr	r2, [r7, #4]
 7309 0010 2146     		mov	r1, r4
 7310 0012 1846     		mov	r0, r3
 7311 0014 FFF7FEFF 		bl	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_
 7312              	.LBE49:
 7313 0018 FB68     		ldr	r3, [r7, #12]
 7314 001a 1846     		mov	r0, r3
 7315 001c 1437     		adds	r7, r7, #20
 7316              	.LCFI498:
 7317              		.cfi_def_cfa_offset 12
 7318 001e BD46     		mov	sp, r7
 7319              	.LCFI499:
 7320              		.cfi_def_cfa_register 13
 7321              		@ sp needed
 7322 0020 90BD     		pop	{r4, r7, pc}
 7323              		.cfi_endproc
 7324              	.LFE4513:
 7326              		.weak	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7327              		.thumb_set _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_ve
 7328              		.section	.text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5erro
ARM GAS  /tmp/ccU23Djm.s 			page 202


 7329              		.align	1
 7330              		.weak	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS9_
 7331              		.syntax unified
 7332              		.thumb
 7333              		.thumb_func
 7334              		.fpu fpv4-sp-d16
 7336              	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS9_LPv0ELS
 7337              	.LFB4515:
1494:Cpp/expected.hpp ****       std::is_nothrow_constructible<E, G &&>::value)
 7338              		.loc 7 1494 13
 7339              		.cfi_startproc
 7340              		@ args = 0, pretend = 0, frame = 8
 7341              		@ frame_needed = 1, uses_anonymous_args = 0
 7342 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7343              	.LCFI500:
 7344              		.cfi_def_cfa_offset 20
 7345              		.cfi_offset 4, -20
 7346              		.cfi_offset 5, -16
 7347              		.cfi_offset 6, -12
 7348              		.cfi_offset 7, -8
 7349              		.cfi_offset 14, -4
 7350 0002 83B0     		sub	sp, sp, #12
 7351              	.LCFI501:
 7352              		.cfi_def_cfa_offset 32
 7353 0004 00AF     		add	r7, sp, #0
 7354              	.LCFI502:
 7355              		.cfi_def_cfa_register 7
 7356 0006 7860     		str	r0, [r7, #4]
 7357 0008 3960     		str	r1, [r7]
 7358              	.LBB50:
 7359              		.loc 7 1497 52
 7360 000a 7C68     		ldr	r4, [r7, #4]
1496:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
 7361              		.loc 7 1496 38
 7362 000c 3868     		ldr	r0, [r7]
 7363 000e FFF7FEFF 		bl	_ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5valueEv
 7364 0012 0346     		mov	r3, r0
 7365 0014 1846     		mov	r0, r3
 7366 0016 FFF7FEFF 		bl	_ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_refer
 7367 001a 0346     		mov	r3, r0
 7368              		.loc 7 1497 52
 7369 001c 1A46     		mov	r2, r3
 7370 001e 3146     		mov	r1, r6
 7371 0020 2046     		mov	r0, r4
 7372 0022 FFF7FEFF 		bl	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_
 7373 0026 2946     		mov	r1, r5
 7374 0028 7868     		ldr	r0, [r7, #4]
 7375 002a FFF7FEFF 		bl	_ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5
 7376              	.LBE50:
 7377              		.loc 7 1497 55
 7378 002e 7B68     		ldr	r3, [r7, #4]
 7379 0030 1846     		mov	r0, r3
 7380 0032 0C37     		adds	r7, r7, #12
 7381              	.LCFI503:
 7382              		.cfi_def_cfa_offset 20
 7383 0034 BD46     		mov	sp, r7
 7384              	.LCFI504:
ARM GAS  /tmp/ccU23Djm.s 			page 203


 7385              		.cfi_def_cfa_register 13
 7386              		@ sp needed
 7387 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 7388              		.cfi_endproc
 7389              	.LFE4515:
 7391              		.weak	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IS9_
 7392              		.thumb_set _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC
 7393              		.section	.text._ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE,"axG",
 7394              		.align	1
 7395              		.weak	_ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE
 7396              		.syntax unified
 7397              		.thumb
 7398              		.thumb_func
 7399              		.fpu fpv4-sp-d16
 7401              	_ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE:
 7402              	.LFB4517:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7403              		.loc 13 74 5
 7404              		.cfi_startproc
 7405              		@ args = 0, pretend = 0, frame = 8
 7406              		@ frame_needed = 1, uses_anonymous_args = 0
 7407              		@ link register save eliminated.
 7408 0000 80B4     		push	{r7}
 7409              	.LCFI505:
 7410              		.cfi_def_cfa_offset 4
 7411              		.cfi_offset 7, -4
 7412 0002 83B0     		sub	sp, sp, #12
 7413              	.LCFI506:
 7414              		.cfi_def_cfa_offset 16
 7415 0004 00AF     		add	r7, sp, #0
 7416              	.LCFI507:
 7417              		.cfi_def_cfa_register 7
 7418 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 7419              		.loc 13 75 36
 7420 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 7421              		.loc 13 75 39
 7422 000a 1846     		mov	r0, r3
 7423 000c 0C37     		adds	r7, r7, #12
 7424              	.LCFI508:
 7425              		.cfi_def_cfa_offset 4
 7426 000e BD46     		mov	sp, r7
 7427              	.LCFI509:
 7428              		.cfi_def_cfa_register 13
 7429              		@ sp needed
 7430 0010 5DF8047B 		ldr	r7, [sp], #4
 7431              	.LCFI510:
 7432              		.cfi_restore 7
 7433              		.cfi_def_cfa_offset 0
 7434 0014 7047     		bx	lr
 7435              		.cfi_endproc
 7436              	.LFE4517:
 7438              		.section	.text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local
 7439              		.align	1
 7440              		.weak	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS
 7441              		.syntax unified
ARM GAS  /tmp/ccU23Djm.s 			page 204


 7442              		.thumb
 7443              		.thumb_func
 7444              		.fpu fpv4-sp-d16
 7446              	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj102
 7447              	.LFB4525:
 596:Cpp/expected.hpp **** 
 7448              		.loc 7 596 38
 7449              		.cfi_startproc
 7450              		@ args = 0, pretend = 0, frame = 16
 7451              		@ frame_needed = 1, uses_anonymous_args = 0
 7452 0000 90B5     		push	{r4, r7, lr}
 7453              	.LCFI511:
 7454              		.cfi_def_cfa_offset 12
 7455              		.cfi_offset 4, -12
 7456              		.cfi_offset 7, -8
 7457              		.cfi_offset 14, -4
 7458 0002 85B0     		sub	sp, sp, #20
 7459              	.LCFI512:
 7460              		.cfi_def_cfa_offset 32
 7461 0004 00AF     		add	r7, sp, #0
 7462              	.LCFI513:
 7463              		.cfi_def_cfa_register 7
 7464 0006 F860     		str	r0, [r7, #12]
 7465 0008 3972     		strb	r1, [r7, #8]
 7466 000a 7A60     		str	r2, [r7, #4]
 7467              	.LBB51:
 596:Cpp/expected.hpp **** 
 7468              		.loc 7 596 38
 7469 000c FB68     		ldr	r3, [r7, #12]
 7470 000e 7A68     		ldr	r2, [r7, #4]
 7471 0010 2146     		mov	r1, r4
 7472 0012 1846     		mov	r0, r3
 7473 0014 FFF7FEFF 		bl	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7474              	.LBE51:
 7475 0018 FB68     		ldr	r3, [r7, #12]
 7476 001a 1846     		mov	r0, r3
 7477 001c 1437     		adds	r7, r7, #20
 7478              	.LCFI514:
 7479              		.cfi_def_cfa_offset 12
 7480 001e BD46     		mov	sp, r7
 7481              	.LCFI515:
 7482              		.cfi_def_cfa_register 13
 7483              		@ sp needed
 7484 0020 90BD     		pop	{r4, r7, pc}
 7485              		.cfi_endproc
 7486              	.LFE4525:
 7488              		.weak	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS
 7489              		.thumb_set _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vec
 7490              		.section	.text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vecto
 7491              		.align	1
 7492              		.weak	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7493              		.syntax unified
 7494              		.thumb
 7495              		.thumb_func
 7496              		.fpu fpv4-sp-d16
 7498              	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5er
 7499              	.LFB4527:
ARM GAS  /tmp/ccU23Djm.s 			page 205


 825:Cpp/expected.hpp **** };
 7500              		.loc 7 825 41
 7501              		.cfi_startproc
 7502              		@ args = 0, pretend = 0, frame = 16
 7503              		@ frame_needed = 1, uses_anonymous_args = 0
 7504 0000 90B5     		push	{r4, r7, lr}
 7505              	.LCFI516:
 7506              		.cfi_def_cfa_offset 12
 7507              		.cfi_offset 4, -12
 7508              		.cfi_offset 7, -8
 7509              		.cfi_offset 14, -4
 7510 0002 85B0     		sub	sp, sp, #20
 7511              	.LCFI517:
 7512              		.cfi_def_cfa_offset 32
 7513 0004 00AF     		add	r7, sp, #0
 7514              	.LCFI518:
 7515              		.cfi_def_cfa_register 7
 7516 0006 F860     		str	r0, [r7, #12]
 7517 0008 3972     		strb	r1, [r7, #8]
 7518 000a 7A60     		str	r2, [r7, #4]
 7519              	.LBB52:
 825:Cpp/expected.hpp **** };
 7520              		.loc 7 825 41
 7521 000c FB68     		ldr	r3, [r7, #12]
 7522 000e 7A68     		ldr	r2, [r7, #4]
 7523 0010 2146     		mov	r1, r4
 7524 0012 1846     		mov	r0, r3
 7525 0014 FFF7FEFF 		bl	_ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_L
 7526              	.LBE52:
 7527 0018 FB68     		ldr	r3, [r7, #12]
 7528 001a 1846     		mov	r0, r3
 7529 001c 1437     		adds	r7, r7, #20
 7530              	.LCFI519:
 7531              		.cfi_def_cfa_offset 12
 7532 001e BD46     		mov	sp, r7
 7533              	.LCFI520:
 7534              		.cfi_def_cfa_register 13
 7535              		@ sp needed
 7536 0020 90BD     		pop	{r4, r7, pc}
 7537              		.cfi_endproc
 7538              	.LFE4527:
 7540              		.weak	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7541              		.thumb_set _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5
 7542              		.section	.text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vecto
 7543              		.align	1
 7544              		.weak	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7545              		.syntax unified
 7546              		.thumb
 7547              		.thumb_func
 7548              		.fpu fpv4-sp-d16
 7550              	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5er
 7551              	.LFB4529:
 858:Cpp/expected.hpp **** };
 7552              		.loc 7 858 35
 7553              		.cfi_startproc
 7554              		@ args = 0, pretend = 0, frame = 16
 7555              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 206


 7556 0000 90B5     		push	{r4, r7, lr}
 7557              	.LCFI521:
 7558              		.cfi_def_cfa_offset 12
 7559              		.cfi_offset 4, -12
 7560              		.cfi_offset 7, -8
 7561              		.cfi_offset 14, -4
 7562 0002 85B0     		sub	sp, sp, #20
 7563              	.LCFI522:
 7564              		.cfi_def_cfa_offset 32
 7565 0004 00AF     		add	r7, sp, #0
 7566              	.LCFI523:
 7567              		.cfi_def_cfa_register 7
 7568 0006 F860     		str	r0, [r7, #12]
 7569 0008 3972     		strb	r1, [r7, #8]
 7570 000a 7A60     		str	r2, [r7, #4]
 7571              	.LBB53:
 858:Cpp/expected.hpp **** };
 7572              		.loc 7 858 35
 7573 000c FB68     		ldr	r3, [r7, #12]
 7574 000e 7A68     		ldr	r2, [r7, #4]
 7575 0010 2146     		mov	r1, r4
 7576 0012 1846     		mov	r0, r3
 7577 0014 FFF7FEFF 		bl	_ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024E
 7578              	.LBE53:
 7579 0018 FB68     		ldr	r3, [r7, #12]
 7580 001a 1846     		mov	r0, r3
 7581 001c 1437     		adds	r7, r7, #20
 7582              	.LCFI524:
 7583              		.cfi_def_cfa_offset 12
 7584 001e BD46     		mov	sp, r7
 7585              	.LCFI525:
 7586              		.cfi_def_cfa_register 13
 7587              		@ sp needed
 7588 0020 90BD     		pop	{r4, r7, pc}
 7589              		.cfi_endproc
 7590              	.LFE4529:
 7592              		.weak	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7593              		.thumb_set _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5
 7594              		.section	.text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12loca
 7595              		.align	1
 7596              		.weak	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7597              		.syntax unified
 7598              		.thumb
 7599              		.thumb_func
 7600              		.fpu fpv4-sp-d16
 7602              	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7603              	.LFB4531:
 893:Cpp/expected.hpp **** };
 7604              		.loc 7 893 35
 7605              		.cfi_startproc
 7606              		@ args = 0, pretend = 0, frame = 16
 7607              		@ frame_needed = 1, uses_anonymous_args = 0
 7608 0000 90B5     		push	{r4, r7, lr}
 7609              	.LCFI526:
 7610              		.cfi_def_cfa_offset 12
 7611              		.cfi_offset 4, -12
 7612              		.cfi_offset 7, -8
ARM GAS  /tmp/ccU23Djm.s 			page 207


 7613              		.cfi_offset 14, -4
 7614 0002 85B0     		sub	sp, sp, #20
 7615              	.LCFI527:
 7616              		.cfi_def_cfa_offset 32
 7617 0004 00AF     		add	r7, sp, #0
 7618              	.LCFI528:
 7619              		.cfi_def_cfa_register 7
 7620 0006 F860     		str	r0, [r7, #12]
 7621 0008 3972     		strb	r1, [r7, #8]
 7622 000a 7A60     		str	r2, [r7, #4]
 7623              	.LBB54:
 893:Cpp/expected.hpp **** };
 7624              		.loc 7 893 35
 7625 000c FB68     		ldr	r3, [r7, #12]
 7626 000e 7A68     		ldr	r2, [r7, #4]
 7627 0010 2146     		mov	r1, r4
 7628 0012 1846     		mov	r0, r3
 7629 0014 FFF7FEFF 		bl	_ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024E
 7630              	.LBE54:
 7631 0018 FB68     		ldr	r3, [r7, #12]
 7632 001a 1846     		mov	r0, r3
 7633 001c 1437     		adds	r7, r7, #20
 7634              	.LCFI529:
 7635              		.cfi_def_cfa_offset 12
 7636 001e BD46     		mov	sp, r7
 7637              	.LCFI530:
 7638              		.cfi_def_cfa_register 13
 7639              		@ sp needed
 7640 0020 90BD     		pop	{r4, r7, pc}
 7641              		.cfi_endproc
 7642              	.LFE4531:
 7644              		.weak	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7645              		.thumb_set _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_ve
 7646              		.section	.text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12loca
 7647              		.align	1
 7648              		.weak	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7649              		.syntax unified
 7650              		.thumb
 7651              		.thumb_func
 7652              		.fpu fpv4-sp-d16
 7654              	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj10
 7655              	.LFB4533:
 927:Cpp/expected.hpp **** };
 7656              		.loc 7 927 42
 7657              		.cfi_startproc
 7658              		@ args = 0, pretend = 0, frame = 16
 7659              		@ frame_needed = 1, uses_anonymous_args = 0
 7660 0000 90B5     		push	{r4, r7, lr}
 7661              	.LCFI531:
 7662              		.cfi_def_cfa_offset 12
 7663              		.cfi_offset 4, -12
 7664              		.cfi_offset 7, -8
 7665              		.cfi_offset 14, -4
 7666 0002 85B0     		sub	sp, sp, #20
 7667              	.LCFI532:
 7668              		.cfi_def_cfa_offset 32
 7669 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccU23Djm.s 			page 208


 7670              	.LCFI533:
 7671              		.cfi_def_cfa_register 7
 7672 0006 F860     		str	r0, [r7, #12]
 7673 0008 3972     		strb	r1, [r7, #8]
 7674 000a 7A60     		str	r2, [r7, #4]
 7675              	.LBB55:
 927:Cpp/expected.hpp **** };
 7676              		.loc 7 927 42
 7677 000c FB68     		ldr	r3, [r7, #12]
 7678 000e 7A68     		ldr	r2, [r7, #4]
 7679 0010 2146     		mov	r1, r4
 7680 0012 1846     		mov	r0, r3
 7681 0014 FFF7FEFF 		bl	_ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_
 7682              	.LBE55:
 7683 0018 FB68     		ldr	r3, [r7, #12]
 7684 001a 1846     		mov	r0, r3
 7685 001c 1437     		adds	r7, r7, #20
 7686              	.LCFI534:
 7687              		.cfi_def_cfa_offset 12
 7688 001e BD46     		mov	sp, r7
 7689              	.LCFI535:
 7690              		.cfi_def_cfa_register 13
 7691              		@ sp needed
 7692 0020 90BD     		pop	{r4, r7, pc}
 7693              		.cfi_endproc
 7694              	.LFE4533:
 7696              		.weak	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorI
 7697              		.thumb_set _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_ve
 7698              		.section	.text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5erro
 7699              		.align	1
 7700              		.weak	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IJS5
 7701              		.syntax unified
 7702              		.thumb
 7703              		.thumb_func
 7704              		.fpu fpv4-sp-d16
 7706              	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IJS5_ELPv0E
 7707              	.LFB4535:
1446:Cpp/expected.hpp ****       : impl_base(in_place, std::forward<Args>(args)...),
 7708              		.loc 7 1446 13
 7709              		.cfi_startproc
 7710              		@ args = 0, pretend = 0, frame = 16
 7711              		@ frame_needed = 1, uses_anonymous_args = 0
 7712 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7713              	.LCFI536:
 7714              		.cfi_def_cfa_offset 20
 7715              		.cfi_offset 4, -20
 7716              		.cfi_offset 5, -16
 7717              		.cfi_offset 6, -12
 7718              		.cfi_offset 7, -8
 7719              		.cfi_offset 14, -4
 7720 0002 85B0     		sub	sp, sp, #20
 7721              	.LCFI537:
 7722              		.cfi_def_cfa_offset 40
 7723 0004 00AF     		add	r7, sp, #0
 7724              	.LCFI538:
 7725              		.cfi_def_cfa_register 7
 7726 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccU23Djm.s 			page 209


 7727 0008 3972     		strb	r1, [r7, #8]
 7728 000a 7A60     		str	r2, [r7, #4]
 7729              	.LBB56:
1448:Cpp/expected.hpp **** 
 7730              		.loc 7 1448 52
 7731 000c FC68     		ldr	r4, [r7, #12]
 7732 000e 7868     		ldr	r0, [r7, #4]
 7733 0010 FFF7FEFF 		bl	_ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE
 7734 0014 0346     		mov	r3, r0
 7735 0016 1A46     		mov	r2, r3
 7736 0018 3146     		mov	r1, r6
 7737 001a 2046     		mov	r0, r4
 7738 001c FFF7FEFF 		bl	_ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_
 7739 0020 2946     		mov	r1, r5
 7740 0022 F868     		ldr	r0, [r7, #12]
 7741 0024 FFF7FEFF 		bl	_ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5
 7742              	.LBE56:
1448:Cpp/expected.hpp **** 
 7743              		.loc 7 1448 55
 7744 0028 FB68     		ldr	r3, [r7, #12]
 7745 002a 1846     		mov	r0, r3
 7746 002c 1437     		adds	r7, r7, #20
 7747              	.LCFI539:
 7748              		.cfi_def_cfa_offset 20
 7749 002e BD46     		mov	sp, r7
 7750              	.LCFI540:
 7751              		.cfi_def_cfa_register 13
 7752              		@ sp needed
 7753 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 7754              		.cfi_endproc
 7755              	.LFE4535:
 7757              		.weak	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IJS5
 7758              		.thumb_set _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC
 7759              		.section	.text._ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE,"axG"
 7760              		.align	1
 7761              		.weak	_ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE
 7762              		.syntax unified
 7763              		.thumb
 7764              		.thumb_func
 7765              		.fpu fpv4-sp-d16
 7767              	_ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE:
 7768              	.LFB4537:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7769              		.loc 13 74 5
 7770              		.cfi_startproc
 7771              		@ args = 0, pretend = 0, frame = 8
 7772              		@ frame_needed = 1, uses_anonymous_args = 0
 7773              		@ link register save eliminated.
 7774 0000 80B4     		push	{r7}
 7775              	.LCFI541:
 7776              		.cfi_def_cfa_offset 4
 7777              		.cfi_offset 7, -4
 7778 0002 83B0     		sub	sp, sp, #12
 7779              	.LCFI542:
 7780              		.cfi_def_cfa_offset 16
 7781 0004 00AF     		add	r7, sp, #0
 7782              	.LCFI543:
ARM GAS  /tmp/ccU23Djm.s 			page 210


 7783              		.cfi_def_cfa_register 7
 7784 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 7785              		.loc 13 75 36
 7786 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 7787              		.loc 13 75 39
 7788 000a 1846     		mov	r0, r3
 7789 000c 0C37     		adds	r7, r7, #12
 7790              	.LCFI544:
 7791              		.cfi_def_cfa_offset 4
 7792 000e BD46     		mov	sp, r7
 7793              	.LCFI545:
 7794              		.cfi_def_cfa_register 13
 7795              		@ sp needed
 7796 0010 5DF8047B 		ldr	r7, [sp], #4
 7797              	.LCFI546:
 7798              		.cfi_restore 7
 7799              		.cfi_def_cfa_offset 0
 7800 0014 7047     		bx	lr
 7801              		.cfi_endproc
 7802              	.LFE4537:
 7804              		.section	.text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5erro
 7805              		.align	1
 7806              		.weak	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS5_
 7807              		.syntax unified
 7808              		.thumb
 7809              		.thumb_func
 7810              		.fpu fpv4-sp-d16
 7812              	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS5_LPv0ELS
 7813              	.LFB4538:
1498:Cpp/expected.hpp **** 
1499:Cpp/expected.hpp ****   template <class... Args,
1500:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<E, Args &&...>::value> * =
1501:Cpp/expected.hpp ****                 nullptr>
1502:Cpp/expected.hpp ****   constexpr explicit expected(unexpect_t, Args &&... args)
1503:Cpp/expected.hpp ****       : impl_base(unexpect, std::forward<Args>(args)...),
1504:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1505:Cpp/expected.hpp **** 
1506:Cpp/expected.hpp ****   /// \exclude
1507:Cpp/expected.hpp ****   template <class U, class... Args,
1508:Cpp/expected.hpp ****             detail::enable_if_t<std::is_constructible<
1509:Cpp/expected.hpp ****                 E, std::initializer_list<U> &, Args &&...>::value> * = nullptr>
1510:Cpp/expected.hpp ****   constexpr explicit expected(unexpect_t, std::initializer_list<U> il,
1511:Cpp/expected.hpp ****                               Args &&... args)
1512:Cpp/expected.hpp ****       : impl_base(unexpect, il, std::forward<Args>(args)...),
1513:Cpp/expected.hpp ****         ctor_base(detail::default_constructor_tag{}) {}
1514:Cpp/expected.hpp **** 
1515:Cpp/expected.hpp ****   template <class U, class G,
1516:Cpp/expected.hpp ****             detail::enable_if_t<!(std::is_convertible<U const &, T>::value &&
1517:Cpp/expected.hpp ****                                   std::is_convertible<G const &, E>::value)> * =
1518:Cpp/expected.hpp ****                 nullptr,
1519:Cpp/expected.hpp ****             detail::expected_enable_from_other<T, E, U, G, const U &, const G &>
1520:Cpp/expected.hpp ****                 * = nullptr>
1521:Cpp/expected.hpp ****   explicit TL_EXPECTED_11_CONSTEXPR expected(const expected<U, G> &rhs)
1522:Cpp/expected.hpp ****       : ctor_base(detail::default_constructor_tag{}) {
1523:Cpp/expected.hpp ****     if (rhs.has_value()) {
ARM GAS  /tmp/ccU23Djm.s 			page 211


1524:Cpp/expected.hpp ****       this->construct(*rhs);
1525:Cpp/expected.hpp ****     } else {
1526:Cpp/expected.hpp ****       this->construct_error(rhs.error());        
1527:Cpp/expected.hpp ****     }
1528:Cpp/expected.hpp ****   }
1529:Cpp/expected.hpp **** 
1530:Cpp/expected.hpp ****   /// \exclude
1531:Cpp/expected.hpp ****   template <class U, class G,
1532:Cpp/expected.hpp ****             detail::enable_if_t<(std::is_convertible<U const &, T>::value &&
1533:Cpp/expected.hpp ****                                  std::is_convertible<G const &, E>::value)> * =
1534:Cpp/expected.hpp ****                 nullptr,
1535:Cpp/expected.hpp ****             detail::expected_enable_from_other<T, E, U, G, const U &, const G &>
1536:Cpp/expected.hpp ****                 * = nullptr>
1537:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR expected(const expected<U, G> &rhs)
1538:Cpp/expected.hpp ****       : ctor_base(detail::default_constructor_tag{}) {
1539:Cpp/expected.hpp ****     if (rhs.has_value()) {
1540:Cpp/expected.hpp ****       this->construct(*rhs);
1541:Cpp/expected.hpp ****     } else {
1542:Cpp/expected.hpp ****       this->construct_error(rhs.error());        
1543:Cpp/expected.hpp ****     }      
1544:Cpp/expected.hpp ****   }
1545:Cpp/expected.hpp **** 
1546:Cpp/expected.hpp ****   template <
1547:Cpp/expected.hpp ****       class U, class G,
1548:Cpp/expected.hpp ****       detail::enable_if_t<!(std::is_convertible<U &&, T>::value &&
1549:Cpp/expected.hpp ****                             std::is_convertible<G &&, E>::value)> * = nullptr,
1550:Cpp/expected.hpp ****       detail::expected_enable_from_other<T, E, U, G, U &&, G &&> * = nullptr>
1551:Cpp/expected.hpp ****   explicit TL_EXPECTED_11_CONSTEXPR expected(expected<U, G> &&rhs)
1552:Cpp/expected.hpp ****       : ctor_base(detail::default_constructor_tag{}) {
1553:Cpp/expected.hpp ****     if (rhs.has_value()) {
1554:Cpp/expected.hpp ****       this->construct(std::move(*rhs));
1555:Cpp/expected.hpp ****     } else {
1556:Cpp/expected.hpp ****       this->construct_error(std::move(rhs.error()));        
1557:Cpp/expected.hpp ****     }            
1558:Cpp/expected.hpp ****   }
1559:Cpp/expected.hpp **** 
1560:Cpp/expected.hpp ****   /// \exclude
1561:Cpp/expected.hpp ****   template <
1562:Cpp/expected.hpp ****       class U, class G,
1563:Cpp/expected.hpp ****       detail::enable_if_t<(std::is_convertible<U &&, T>::value &&
1564:Cpp/expected.hpp ****                            std::is_convertible<G &&, E>::value)> * = nullptr,
1565:Cpp/expected.hpp ****       detail::expected_enable_from_other<T, E, U, G, U &&, G &&> * = nullptr>
1566:Cpp/expected.hpp ****   TL_EXPECTED_11_CONSTEXPR expected(expected<U, G> &&rhs)
1567:Cpp/expected.hpp ****       : ctor_base(detail::default_constructor_tag{}) {
1568:Cpp/expected.hpp ****     if (rhs.has_value()) {
1569:Cpp/expected.hpp ****       this->construct(std::move(*rhs));
1570:Cpp/expected.hpp ****     } else {
1571:Cpp/expected.hpp ****       this->construct_error(std::move(rhs.error()));        
1572:Cpp/expected.hpp ****     }                  
1573:Cpp/expected.hpp ****   }
1574:Cpp/expected.hpp **** 
1575:Cpp/expected.hpp ****   template <
1576:Cpp/expected.hpp ****       class U = T,
1577:Cpp/expected.hpp ****       detail::enable_if_t<!std::is_convertible<U &&, T>::value> * = nullptr,
1578:Cpp/expected.hpp ****       detail::expected_enable_forward_value<T, E, U> * = nullptr>
1579:Cpp/expected.hpp ****   explicit TL_EXPECTED_MSVC2015_CONSTEXPR expected(U &&v)
1580:Cpp/expected.hpp ****       : expected(in_place, std::forward<U>(v)) {}
ARM GAS  /tmp/ccU23Djm.s 			page 212


1581:Cpp/expected.hpp **** 
1582:Cpp/expected.hpp ****   /// \exclude
1583:Cpp/expected.hpp ****   template <
1584:Cpp/expected.hpp ****       class U = T,
1585:Cpp/expected.hpp ****       detail::enable_if_t<std::is_convertible<U &&, T>::value> * = nullptr,
1586:Cpp/expected.hpp ****       detail::expected_enable_forward_value<T, E, U> * = nullptr>
1587:Cpp/expected.hpp ****   TL_EXPECTED_MSVC2015_CONSTEXPR expected(U &&v)
 7814              		.loc 7 1587 34
 7815              		.cfi_startproc
 7816              		@ args = 0, pretend = 0, frame = 8
 7817              		@ frame_needed = 1, uses_anonymous_args = 0
 7818 0000 90B5     		push	{r4, r7, lr}
 7819              	.LCFI547:
 7820              		.cfi_def_cfa_offset 12
 7821              		.cfi_offset 4, -12
 7822              		.cfi_offset 7, -8
 7823              		.cfi_offset 14, -4
 7824 0002 83B0     		sub	sp, sp, #12
 7825              	.LCFI548:
 7826              		.cfi_def_cfa_offset 24
 7827 0004 00AF     		add	r7, sp, #0
 7828              	.LCFI549:
 7829              		.cfi_def_cfa_register 7
 7830 0006 7860     		str	r0, [r7, #4]
 7831 0008 3960     		str	r1, [r7]
 7832              	.LBB57:
1588:Cpp/expected.hpp ****       : expected(in_place, std::forward<U>(v)) {}
 7833              		.loc 7 1588 46
 7834 000a 3868     		ldr	r0, [r7]
 7835 000c FFF7FEFF 		bl	_ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE
 7836 0010 0346     		mov	r3, r0
 7837 0012 1A46     		mov	r2, r3
 7838 0014 2146     		mov	r1, r4
 7839 0016 7868     		ldr	r0, [r7, #4]
 7840 0018 FFF7FEFF 		bl	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IJS5_EL
 7841              	.LBE57:
 7842              		.loc 7 1588 49
 7843 001c 7B68     		ldr	r3, [r7, #4]
 7844 001e 1846     		mov	r0, r3
 7845 0020 0C37     		adds	r7, r7, #12
 7846              	.LCFI550:
 7847              		.cfi_def_cfa_offset 12
 7848 0022 BD46     		mov	sp, r7
 7849              	.LCFI551:
 7850              		.cfi_def_cfa_register 13
 7851              		@ sp needed
 7852 0024 90BD     		pop	{r4, r7, pc}
 7853              		.cfi_endproc
 7854              	.LFE4538:
 7856              		.weak	_ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IS5_
 7857              		.thumb_set _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC
 7858              		.section	.text._ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_,"axG",%progbits
 7859              		.align	1
 7860              		.weak	_ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_
 7861              		.syntax unified
 7862              		.thumb
 7863              		.thumb_func
ARM GAS  /tmp/ccU23Djm.s 			page 213


 7864              		.fpu fpv4-sp-d16
 7866              	_ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:
 7867              	.LFB4540:
 189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	      _Compare __comp)
 7868              		.loc 14 189 5
 7869              		.cfi_startproc
 7870              		@ args = 0, pretend = 0, frame = 184
 7871              		@ frame_needed = 1, uses_anonymous_args = 0
 7872 0000 90B5     		push	{r4, r7, lr}
 7873              	.LCFI552:
 7874              		.cfi_def_cfa_offset 12
 7875              		.cfi_offset 4, -12
 7876              		.cfi_offset 7, -8
 7877              		.cfi_offset 14, -4
 7878 0002 B1B0     		sub	sp, sp, #196
 7879              	.LCFI553:
 7880              		.cfi_def_cfa_offset 208
 7881 0004 02AF     		add	r7, sp, #8
 7882              	.LCFI554:
 7883              		.cfi_def_cfa 7, 200
 7884 0006 F860     		str	r0, [r7, #12]
 7885 0008 B960     		str	r1, [r7, #8]
 7886 000a 3A71     		strb	r2, [r7, #4]
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 7887              		.loc 14 205 8
 7888 000c 3B1D     		adds	r3, r7, #4
 7889 000e 1846     		mov	r0, r3
 7890 0010 FFF7FEFF 		bl	_ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 7891              		.loc 14 205 2
 7892 0014 07F16403 		add	r3, r7, #100
 7893 0018 2146     		mov	r1, r4
 7894 001a 1846     		mov	r0, r3
 7895 001c FFF7FEFF 		bl	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1ES7_
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 7896              		.loc 14 206 28
 7897 0020 BB68     		ldr	r3, [r7, #8]
 7898 0022 503B     		subs	r3, r3, #80
 7899 0024 1846     		mov	r0, r3
 7900 0026 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 7901 002a 0246     		mov	r2, r0
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 7902              		.loc 14 206 18
 7903 002c 07F11003 		add	r3, r7, #16
 7904 0030 1146     		mov	r1, r2
 7905 0032 1846     		mov	r0, r3
 7906 0034 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
 7907              		.loc 14 207 55
 7908 0038 BA68     		ldr	r2, [r7, #8]
 7909 003a FB68     		ldr	r3, [r7, #12]
 7910 003c D31A     		subs	r3, r2, r3
 7911 003e 1B11     		asrs	r3, r3, #4
 7912 0040 144A     		ldr	r2, .L286
 7913 0042 02FB03F3 		mul	r3, r2, r3
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
 7914              		.loc 14 207 66
ARM GAS  /tmp/ccU23Djm.s 			page 214


 7915 0046 5C1E     		subs	r4, r3, #1
 208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 7916              		.loc 14 208 28
 7917 0048 07F11003 		add	r3, r7, #16
 7918 004c 1846     		mov	r0, r3
 7919 004e FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 7920 0052 0246     		mov	r2, r0
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
 7921              		.loc 14 207 23
 7922 0054 07F16803 		add	r3, r7, #104
 7923 0058 1146     		mov	r1, r2
 7924 005a 1846     		mov	r0, r3
 7925 005c FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 7926 0060 07F16802 		add	r2, r7, #104
 7927 0064 07F16403 		add	r3, r7, #100
 7928 0068 0093     		str	r3, [sp]
 7929 006a 1346     		mov	r3, r2
 7930 006c 0022     		movs	r2, #0
 7931 006e 2146     		mov	r1, r4
 7932 0070 F868     		ldr	r0, [r7, #12]
 7933 0072 FFF7FEFF 		bl	_ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIS
 7934 0076 07F16803 		add	r3, r7, #104
 7935 007a 1846     		mov	r0, r3
 7936 007c FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 7937              		.loc 14 206 18
 7938 0080 07F11003 		add	r3, r7, #16
 7939 0084 1846     		mov	r0, r3
 7940 0086 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 7941              		.loc 14 209 5
 7942 008a 00BF     		nop
 7943 008c BC37     		adds	r7, r7, #188
 7944              	.LCFI555:
 7945              		.cfi_def_cfa_offset 12
 7946 008e BD46     		mov	sp, r7
 7947              	.LCFI556:
 7948              		.cfi_def_cfa_register 13
 7949              		@ sp needed
 7950 0090 90BD     		pop	{r4, r7, pc}
 7951              	.L287:
 7952 0092 00BF     		.align	2
 7953              	.L286:
 7954 0094 CDCCCCCC 		.word	-858993459
 7955              		.cfi_endproc
 7956              	.LFE4540:
 7958              		.section	.text._ZNKSt5arrayIS_IhLj4EELj256EEixEj,"axG",%progbits,_ZNKSt5arrayIS_IhLj4EELj256EEixEj
 7959              		.align	1
 7960              		.weak	_ZNKSt5arrayIS_IhLj4EELj256EEixEj
 7961              		.syntax unified
 7962              		.thumb
 7963              		.thumb_func
 7964              		.fpu fpv4-sp-d16
 7966              	_ZNKSt5arrayIS_IhLj4EELj256EEixEj:
 7967              	.LFB4545:
 187:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 188:/usr/arm-none-eabi/include/c++/9.3.0/array ****       constexpr const_reference
ARM GAS  /tmp/ccU23Djm.s 			page 215


 189:/usr/arm-none-eabi/include/c++/9.3.0/array ****       operator[](size_type __n) const noexcept
 7968              		.loc 8 189 7
 7969              		.cfi_startproc
 7970              		@ args = 0, pretend = 0, frame = 8
 7971              		@ frame_needed = 1, uses_anonymous_args = 0
 7972 0000 80B5     		push	{r7, lr}
 7973              	.LCFI557:
 7974              		.cfi_def_cfa_offset 8
 7975              		.cfi_offset 7, -8
 7976              		.cfi_offset 14, -4
 7977 0002 82B0     		sub	sp, sp, #8
 7978              	.LCFI558:
 7979              		.cfi_def_cfa_offset 16
 7980 0004 00AF     		add	r7, sp, #0
 7981              	.LCFI559:
 7982              		.cfi_def_cfa_register 7
 7983 0006 7860     		str	r0, [r7, #4]
 7984 0008 3960     		str	r1, [r7]
 190:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 7985              		.loc 8 190 33
 7986 000a 7B68     		ldr	r3, [r7, #4]
 7987              		.loc 8 190 32
 7988 000c 3968     		ldr	r1, [r7]
 7989 000e 1846     		mov	r0, r3
 7990 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j
 7991 0014 0346     		mov	r3, r0
 7992              		.loc 8 190 49
 7993 0016 1846     		mov	r0, r3
 7994 0018 0837     		adds	r7, r7, #8
 7995              	.LCFI560:
 7996              		.cfi_def_cfa_offset 8
 7997 001a BD46     		mov	sp, r7
 7998              	.LCFI561:
 7999              		.cfi_def_cfa_register 13
 8000              		@ sp needed
 8001 001c 80BD     		pop	{r7, pc}
 8002              		.cfi_endproc
 8003              	.LFE4545:
 8005              		.section	.text._ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_,"axG",%progbits,_ZSt5beginISt5arra
 8006              		.align	1
 8007              		.weak	_ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_
 8008              		.syntax unified
 8009              		.thumb
 8010              		.thumb_func
 8011              		.fpu fpv4-sp-d16
 8013              	_ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_:
 8014              	.LFB4546:
 8015              		.file 15 "/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // <range_access.h> -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // Copyright (C) 2010-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // any later version.
ARM GAS  /tmp/ccU23Djm.s 			page 216


  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** /** @file bits/range_access.h
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****  *  Do not attempt to use it directly. @headername{iterator}
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****  */
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** #ifndef _GLIBCXX_RANGE_ACCESS_H
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** #define _GLIBCXX_RANGE_ACCESS_H 1
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** #pragma GCC system_header
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** #if __cplusplus >= 201103L
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** #include <initializer_list>
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** namespace std _GLIBCXX_VISIBILITY(default)
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** {
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   /**
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @brief  Return an iterator pointing to the first element of
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *          the container.
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @param  __cont  Container.
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    */
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   template<typename _Container>
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     inline _GLIBCXX17_CONSTEXPR auto
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     begin(_Container& __cont) -> decltype(__cont.begin())
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     { return __cont.begin(); }
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   /**
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @brief  Return an iterator pointing to the first element of
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *          the const container.
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @param  __cont  Container.
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    */
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   template<typename _Container>
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     inline _GLIBCXX17_CONSTEXPR auto
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     begin(const _Container& __cont) -> decltype(__cont.begin())
 8016              		.loc 15 58 5
 8017              		.cfi_startproc
 8018              		@ args = 0, pretend = 0, frame = 8
 8019              		@ frame_needed = 1, uses_anonymous_args = 0
 8020 0000 80B5     		push	{r7, lr}
 8021              	.LCFI562:
 8022              		.cfi_def_cfa_offset 8
 8023              		.cfi_offset 7, -8
ARM GAS  /tmp/ccU23Djm.s 			page 217


 8024              		.cfi_offset 14, -4
 8025 0002 82B0     		sub	sp, sp, #8
 8026              	.LCFI563:
 8027              		.cfi_def_cfa_offset 16
 8028 0004 00AF     		add	r7, sp, #0
 8029              	.LCFI564:
 8030              		.cfi_def_cfa_register 7
 8031 0006 7860     		str	r0, [r7, #4]
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     { return __cont.begin(); }
 8032              		.loc 15 59 27
 8033 0008 7868     		ldr	r0, [r7, #4]
 8034 000a FFF7FEFF 		bl	_ZNKSt5arrayIhLj4EE5beginEv
 8035 000e 0346     		mov	r3, r0
 8036              		.loc 15 59 30
 8037 0010 1846     		mov	r0, r3
 8038 0012 0837     		adds	r7, r7, #8
 8039              	.LCFI565:
 8040              		.cfi_def_cfa_offset 8
 8041 0014 BD46     		mov	sp, r7
 8042              	.LCFI566:
 8043              		.cfi_def_cfa_register 13
 8044              		@ sp needed
 8045 0016 80BD     		pop	{r7, pc}
 8046              		.cfi_endproc
 8047              	.LFE4546:
 8049              		.section	.text._ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_,"axG",%progbits,_ZSt3endISt5arrayIhLj4
 8050              		.align	1
 8051              		.weak	_ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_
 8052              		.syntax unified
 8053              		.thumb
 8054              		.thumb_func
 8055              		.fpu fpv4-sp-d16
 8057              	_ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_:
 8058              	.LFB4547:
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   /**
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @brief  Return an iterator pointing to one past the last element of
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *          the container.
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @param  __cont  Container.
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    */
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   template<typename _Container>
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     inline _GLIBCXX17_CONSTEXPR auto
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     end(_Container& __cont) -> decltype(__cont.end())
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     { return __cont.end(); }
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   /**
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @brief  Return an iterator pointing to one past the last element of
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *          the const container.
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    *  @param  __cont  Container.
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****    */
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****   template<typename _Container>
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     inline _GLIBCXX17_CONSTEXPR auto
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     end(const _Container& __cont) -> decltype(__cont.end())
 8059              		.loc 15 78 5
 8060              		.cfi_startproc
 8061              		@ args = 0, pretend = 0, frame = 8
 8062              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 218


 8063 0000 80B5     		push	{r7, lr}
 8064              	.LCFI567:
 8065              		.cfi_def_cfa_offset 8
 8066              		.cfi_offset 7, -8
 8067              		.cfi_offset 14, -4
 8068 0002 82B0     		sub	sp, sp, #8
 8069              	.LCFI568:
 8070              		.cfi_def_cfa_offset 16
 8071 0004 00AF     		add	r7, sp, #0
 8072              	.LCFI569:
 8073              		.cfi_def_cfa_register 7
 8074 0006 7860     		str	r0, [r7, #4]
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     { return __cont.end(); }
 8075              		.loc 15 79 25
 8076 0008 7868     		ldr	r0, [r7, #4]
 8077 000a FFF7FEFF 		bl	_ZNKSt5arrayIhLj4EE3endEv
 8078 000e 0346     		mov	r3, r0
 8079              		.loc 15 79 28
 8080 0010 1846     		mov	r0, r3
 8081 0012 0837     		adds	r7, r7, #8
 8082              	.LCFI570:
 8083              		.cfi_def_cfa_offset 8
 8084 0014 BD46     		mov	sp, r7
 8085              	.LCFI571:
 8086              		.cfi_def_cfa_register 13
 8087              		@ sp needed
 8088 0016 80BD     		pop	{r7, pc}
 8089              		.cfi_endproc
 8090              	.LFE4547:
 8092              		.section	.text._ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE,"axG",%progbits,_ZSt7forwardI
 8093              		.align	1
 8094              		.weak	_ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE
 8095              		.syntax unified
 8096              		.thumb
 8097              		.thumb_func
 8098              		.fpu fpv4-sp-d16
 8100              	_ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE:
 8101              	.LFB4548:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8102              		.loc 13 74 5
 8103              		.cfi_startproc
 8104              		@ args = 0, pretend = 0, frame = 8
 8105              		@ frame_needed = 1, uses_anonymous_args = 0
 8106              		@ link register save eliminated.
 8107 0000 80B4     		push	{r7}
 8108              	.LCFI572:
 8109              		.cfi_def_cfa_offset 4
 8110              		.cfi_offset 7, -4
 8111 0002 83B0     		sub	sp, sp, #12
 8112              	.LCFI573:
 8113              		.cfi_def_cfa_offset 16
 8114 0004 00AF     		add	r7, sp, #0
 8115              	.LCFI574:
 8116              		.cfi_def_cfa_register 7
 8117 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 8118              		.loc 13 75 36
ARM GAS  /tmp/ccU23Djm.s 			page 219


 8119 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 8120              		.loc 13 75 39
 8121 000a 1846     		mov	r0, r3
 8122 000c 0C37     		adds	r7, r7, #12
 8123              	.LCFI575:
 8124              		.cfi_def_cfa_offset 4
 8125 000e BD46     		mov	sp, r7
 8126              	.LCFI576:
 8127              		.cfi_def_cfa_register 13
 8128              		@ sp needed
 8129 0010 5DF8047B 		ldr	r7, [sp], #4
 8130              	.LCFI577:
 8131              		.cfi_restore 7
 8132              		.cfi_def_cfa_offset 0
 8133 0014 7047     		bx	lr
 8134              		.cfi_endproc
 8135              	.LFE4548:
 8137              		.section	.text._ZSt4copyIPKhPhET0_T_S4_S3_,"axG",%progbits,_ZSt4copyIPKhPhET0_T_S4_S3_,comdat
 8138              		.align	1
 8139              		.weak	_ZSt4copyIPKhPhET0_T_S4_S3_
 8140              		.syntax unified
 8141              		.thumb
 8142              		.thumb_func
 8143              		.fpu fpv4-sp-d16
 8145              	_ZSt4copyIPKhPhET0_T_S4_S3_:
 8146              	.LFB4549:
 8147              		.file 16 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** /*
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *
ARM GAS  /tmp/ccU23Djm.s 			page 220


  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  */
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  */
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** {
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus < 201103L
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _BoolType>
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __iter_swap
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
ARM GAS  /tmp/ccU23Djm.s 			page 221


  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static void
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    _ValueType1;
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  *__a = *__b;
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  *__b = __tmp;
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<>
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __iter_swap<true>
 101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static void
 104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   Nothing.
 117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  iterators themselves.
 120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline void
 123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus < 201103L
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	_ValueType1;
 134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	_ValueType2;
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ValueType2>)
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ValueType1>)
 141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	_ReferenceType1;
ARM GAS  /tmp/ccU23Djm.s 			page 222


 144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	_ReferenceType2;
 146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #else
 151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       swap(*__a, *__b);
 152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  The ranges must not overlap.
 166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _ForwardIterator2
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return __first2;
 182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  preprocessor macro.
 194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Tp>
 196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline const _Tp&
 198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
ARM GAS  /tmp/ccU23Djm.s 			page 223


 201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       if (__b < __a)
 204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	return __b;
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return __a;
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  preprocessor macro.
 218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Tp>
 220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline const _Tp&
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       if (__a < __b)
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	return __b;
 229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return __a;
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline const _Tp&
 246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       if (__comp(__b, __a))
 250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	return __b;
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return __a;
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
ARM GAS  /tmp/ccU23Djm.s 			page 224


 258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline const _Tp&
 268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       if (__comp(__a, __b))
 272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	return __b;
 273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return __a;
 274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Iterator>
 279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _Iterator
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     { return __it; }
 283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _From, typename _To>
 288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _From
 289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Iterator>
 294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _Iterator
 295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     { return __res; }
 297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // a for loop with an explicit count.
 303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move
 306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _OI
 309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    *__result = *__first;
 313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
ARM GAS  /tmp/ccU23Djm.s 			page 225


 315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Category>
 319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _OI
 323:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 324:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 325:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 326:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 327:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 328:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 329:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 330:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 331:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 332:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<>
 333:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 334:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 335:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 336:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _OI
 337:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 338:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 339:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 340:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 341:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    {
 342:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	      *__result = *__first;
 343:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	      ++__first;
 344:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	      ++__result;
 345:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    }
 346:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 347:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 348:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 349:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 350:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 351:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<>
 352:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 353:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 354:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 355:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _OI
 356:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 357:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 358:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 359:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 360:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    {
 361:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 362:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	      ++__first;
 363:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	      ++__result;
 364:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    }
 365:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 366:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 367:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 368:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 369:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 370:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove>
 371:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
ARM GAS  /tmp/ccU23Djm.s 			page 226


 372:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 373:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _Tp>
 374:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _Tp*
 375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 376:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 377:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 378:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 379:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 380:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 381:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 382:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 383:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 384:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 385:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  if (_Num)
 386:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 387:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result + _Num;
 388:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 389:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 390:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 391:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 392:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _OI
 393:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 394:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 395:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 396:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 397:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 398:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 399:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __is_pointer<_II>::__value
 400:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __is_pointer<_OI>::__value
 401:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 402:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 403:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 404:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 405:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 406:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 407:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 408:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 409:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _CharT>
 410:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct char_traits;
 411:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 412:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 413:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     class istreambuf_iterator;
 414:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 415:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 416:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     class ostreambuf_iterator;
 417:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 418:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 419:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 420:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 421:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 422:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 423:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 424:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 425:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 426:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 427:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 428:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
ARM GAS  /tmp/ccU23Djm.s 			page 227


 429:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 430:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 431:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 432:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				    _CharT*>::__type
 433:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 434:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 435:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 436:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 437:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _OI
 438:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 439:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 440:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 441:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 442:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 					    std::__niter_base(__last),
 443:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 					    std::__niter_base(__result)));
 444:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 445:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 446:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 447:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 448:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 449:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 450:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 451:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 452:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   result + (first - last)
 453:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 454:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 455:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 456:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 457:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 458:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 459:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 460:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 461:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  within [first,last).
 462:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 463:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 464:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _OI
 465:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 8148              		.loc 16 465 5
 8149              		.cfi_startproc
 8150              		@ args = 0, pretend = 0, frame = 16
 8151              		@ frame_needed = 1, uses_anonymous_args = 0
 8152 0000 90B5     		push	{r4, r7, lr}
 8153              	.LCFI578:
 8154              		.cfi_def_cfa_offset 12
 8155              		.cfi_offset 4, -12
 8156              		.cfi_offset 7, -8
 8157              		.cfi_offset 14, -4
 8158 0002 85B0     		sub	sp, sp, #20
 8159              	.LCFI579:
 8160              		.cfi_def_cfa_offset 32
 8161 0004 00AF     		add	r7, sp, #0
 8162              	.LCFI580:
 8163              		.cfi_def_cfa_register 7
 8164 0006 F860     		str	r0, [r7, #12]
 8165 0008 B960     		str	r1, [r7, #8]
 8166 000a 7A60     		str	r2, [r7, #4]
 466:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
ARM GAS  /tmp/ccU23Djm.s 			page 228


 467:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 468:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 469:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 470:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 471:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 472:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 473:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__copy_move_a2<__is_move_iterator<_II>::__value>
 474:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8167              		.loc 16 474 7
 8168 000c F868     		ldr	r0, [r7, #12]
 8169 000e FFF7FEFF 		bl	_ZSt12__miter_baseIPKhET_S2_
 8170 0012 0446     		mov	r4, r0
 8171 0014 B868     		ldr	r0, [r7, #8]
 8172 0016 FFF7FEFF 		bl	_ZSt12__miter_baseIPKhET_S2_
 8173 001a 0346     		mov	r3, r0
 8174 001c 7A68     		ldr	r2, [r7, #4]
 8175 001e 1946     		mov	r1, r3
 8176 0020 2046     		mov	r0, r4
 8177 0022 FFF7FEFF 		bl	_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_
 8178 0026 0346     		mov	r3, r0
 475:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 8179              		.loc 16 475 5
 8180 0028 1846     		mov	r0, r3
 8181 002a 1437     		adds	r7, r7, #20
 8182              	.LCFI581:
 8183              		.cfi_def_cfa_offset 12
 8184 002c BD46     		mov	sp, r7
 8185              	.LCFI582:
 8186              		.cfi_def_cfa_register 13
 8187              		@ sp needed
 8188 002e 90BD     		pop	{r4, r7, pc}
 8189              		.cfi_endproc
 8190              	.LFE4549:
 8192              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev,"axG",%progbits,_ZN
 8193              		.align	1
 8194              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev
 8195              		.syntax unified
 8196              		.thumb
 8197              		.thumb_func
 8198              		.fpu fpv4-sp-d16
 8200              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev:
 8201              	.LFB4551:
  34:Cpp/local_vector.hpp ****     {
 8202              		.loc 5 34 5
 8203              		.cfi_startproc
 8204              		@ args = 0, pretend = 0, frame = 8
 8205              		@ frame_needed = 1, uses_anonymous_args = 0
 8206 0000 80B5     		push	{r7, lr}
 8207              	.LCFI583:
 8208              		.cfi_def_cfa_offset 8
 8209              		.cfi_offset 7, -8
 8210              		.cfi_offset 14, -4
 8211 0002 82B0     		sub	sp, sp, #8
 8212              	.LCFI584:
 8213              		.cfi_def_cfa_offset 16
 8214 0004 00AF     		add	r7, sp, #0
 8215              	.LCFI585:
ARM GAS  /tmp/ccU23Djm.s 			page 229


 8216              		.cfi_def_cfa_register 7
 8217 0006 7860     		str	r0, [r7, #4]
 8218              	.LBB58:
  37:Cpp/local_vector.hpp ****     }
 8219              		.loc 5 37 7
 8220 0008 7868     		ldr	r0, [r7, #4]
 8221 000a FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv
 8222              	.LBE58:
  38:Cpp/local_vector.hpp **** 
 8223              		.loc 5 38 5
 8224 000e 7B68     		ldr	r3, [r7, #4]
 8225 0010 1846     		mov	r0, r3
 8226 0012 0837     		adds	r7, r7, #8
 8227              	.LCFI586:
 8228              		.cfi_def_cfa_offset 8
 8229 0014 BD46     		mov	sp, r7
 8230              	.LCFI587:
 8231              		.cfi_def_cfa_register 13
 8232              		@ sp needed
 8233 0016 80BD     		pop	{r7, pc}
 8234              		.cfi_endproc
 8235              	.LFE4551:
 8237              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED1Ev
 8238              		.thumb_set _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED1Ev,_ZN4otto4util12local_ve
 8239              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef,"axG",%progbits,
 8240              		.align	1
 8241              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef
 8242              		.syntax unified
 8243              		.thumb
 8244              		.thumb_func
 8245              		.fpu fpv4-sp-d16
 8247              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef:
 8248              	.LFB4554:
 136:Cpp/ws2812b.hpp ****     {
 8249              		.loc 9 136 5
 8250              		.cfi_startproc
 8251              		@ args = 0, pretend = 0, frame = 8
 8252              		@ frame_needed = 1, uses_anonymous_args = 0
 8253 0000 80B5     		push	{r7, lr}
 8254              	.LCFI588:
 8255              		.cfi_def_cfa_offset 8
 8256              		.cfi_offset 7, -8
 8257              		.cfi_offset 14, -4
 8258 0002 82B0     		sub	sp, sp, #8
 8259              	.LCFI589:
 8260              		.cfi_def_cfa_offset 16
 8261 0004 00AF     		add	r7, sp, #0
 8262              	.LCFI590:
 8263              		.cfi_def_cfa_register 7
 8264 0006 7860     		str	r0, [r7, #4]
 8265 0008 3960     		str	r1, [r7]
 8266              	.LBB59:
 136:Cpp/ws2812b.hpp ****     {
 8267              		.loc 9 136 55
 8268 000a 7B68     		ldr	r3, [r7, #4]
 8269 000c 3A68     		ldr	r2, [r7]
 8270 000e 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccU23Djm.s 			page 230


 8271 0010 7B68     		ldr	r3, [r7, #4]
 8272 0012 0533     		adds	r3, r3, #5
 8273 0014 4FF42272 		mov	r2, #648
 8274 0018 0021     		movs	r1, #0
 8275 001a 1846     		mov	r0, r3
 8276 001c FFF7FEFF 		bl	memset
 8277 0020 7B68     		ldr	r3, [r7, #4]
 8278 0022 03F28D23 		addw	r3, r3, #653
 8279 0026 0022     		movs	r2, #0
 8280 0028 1A80     		strh	r2, [r3]	@ unaligned
 138:Cpp/ws2812b.hpp ****     }
 8281              		.loc 9 138 7
 8282 002a 7868     		ldr	r0, [r7, #4]
 8283 002c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
 8284              	.LBE59:
 139:Cpp/ws2812b.hpp **** 
 8285              		.loc 9 139 5
 8286 0030 7B68     		ldr	r3, [r7, #4]
 8287 0032 1846     		mov	r0, r3
 8288 0034 0837     		adds	r7, r7, #8
 8289              	.LCFI591:
 8290              		.cfi_def_cfa_offset 8
 8291 0036 BD46     		mov	sp, r7
 8292              	.LCFI592:
 8293              		.cfi_def_cfa_register 13
 8294              		@ sp needed
 8295 0038 80BD     		pop	{r7, pc}
 8296              		.cfi_endproc
 8297              	.LFE4554:
 8299              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC1ER19__SPI_HandleTypeDef
 8300              		.thumb_set _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC1ER19__SPI_HandleTypeDef,_ZN4otto3mcu7ws2812b
 8301              		.section	.text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_,"axG",%progbits,_ZN4otto3m
 8302              		.align	1
 8303              		.weak	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_
 8304              		.syntax unified
 8305              		.thumb
 8306              		.thumb_func
 8307              		.fpu fpv4-sp-d16
 8309              	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_:
 8310              	.LFB4557:
 8311              		.file 17 "Cpp/keys.hpp"
   1:Cpp/keys.hpp  **** #pragma once
   2:Cpp/keys.hpp  **** 
   3:Cpp/keys.hpp  **** #include <array>
   4:Cpp/keys.hpp  **** 
   5:Cpp/keys.hpp  **** #include "otto.h"
   6:Cpp/keys.hpp  **** #include "gpio.hpp"
   7:Cpp/keys.hpp  **** 
   8:Cpp/keys.hpp  **** namespace otto::mcu::keys {
   9:Cpp/keys.hpp  ****   template<typename Data_, int Rows, int Cols>
  10:Cpp/keys.hpp  ****   struct KeyMatrix {
  11:Cpp/keys.hpp  ****     static constexpr int row_count = Rows;
  12:Cpp/keys.hpp  ****     static constexpr int col_count = Cols;
  13:Cpp/keys.hpp  ****     using CellData = Data_;
  14:Cpp/keys.hpp  ****     struct Cell {
  15:Cpp/keys.hpp  ****       Cell(CellData data = {}) : data(data){};
 8312              		.loc 17 15 7
ARM GAS  /tmp/ccU23Djm.s 			page 231


 8313              		.cfi_startproc
 8314              		@ args = 0, pretend = 0, frame = 8
 8315              		@ frame_needed = 1, uses_anonymous_args = 0
 8316              		@ link register save eliminated.
 8317 0000 80B4     		push	{r7}
 8318              	.LCFI593:
 8319              		.cfi_def_cfa_offset 4
 8320              		.cfi_offset 7, -4
 8321 0002 83B0     		sub	sp, sp, #12
 8322              	.LCFI594:
 8323              		.cfi_def_cfa_offset 16
 8324 0004 00AF     		add	r7, sp, #0
 8325              	.LCFI595:
 8326              		.cfi_def_cfa_register 7
 8327 0006 7860     		str	r0, [r7, #4]
 8328 0008 3960     		str	r1, [r7]
 8329              	.LBB60:
 8330              		.loc 17 15 43
 8331 000a 7B68     		ldr	r3, [r7, #4]
 8332 000c 3A68     		ldr	r2, [r7]
 8333 000e 1A60     		str	r2, [r3]
 8334 0010 7B68     		ldr	r3, [r7, #4]
 8335 0012 0022     		movs	r2, #0
 8336 0014 1A71     		strb	r2, [r3, #4]
 8337              	.LBE60:
 8338              		.loc 17 15 45
 8339 0016 7B68     		ldr	r3, [r7, #4]
 8340 0018 1846     		mov	r0, r3
 8341 001a 0C37     		adds	r7, r7, #12
 8342              	.LCFI596:
 8343              		.cfi_def_cfa_offset 4
 8344 001c BD46     		mov	sp, r7
 8345              	.LCFI597:
 8346              		.cfi_def_cfa_register 13
 8347              		@ sp needed
 8348 001e 5DF8047B 		ldr	r7, [sp], #4
 8349              	.LCFI598:
 8350              		.cfi_restore 7
 8351              		.cfi_def_cfa_offset 0
 8352 0022 7047     		bx	lr
 8353              		.cfi_endproc
 8354              	.LFE4557:
 8356              		.weak	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 8357              		.thumb_set _ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_,_ZN4otto3mcu4keys9KeyMatrixI7K
 8358              		.global	__aeabi_f2d
 8359              		.global	__aeabi_dadd
 8360              		.global	__aeabi_d2f
 8361              		.global	__aeabi_dsub
 8362              		.section	.text._ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE,"axG",%pr
 8363              		.align	1
 8364              		.weak	_ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE
 8365              		.syntax unified
 8366              		.thumb
 8367              		.thumb_func
 8368              		.fpu fpv4-sp-d16
 8370              	_ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:
 8371              	.LFB4559:
ARM GAS  /tmp/ccU23Djm.s 			page 232


 168:Cpp/ws2812b.hpp **** 
 169:Cpp/ws2812b.hpp ****     iterator begin()
 170:Cpp/ws2812b.hpp ****     {
 171:Cpp/ws2812b.hpp ****       return {spi_buf_.begin(), &needs_update_};
 172:Cpp/ws2812b.hpp ****     }
 173:Cpp/ws2812b.hpp **** 
 174:Cpp/ws2812b.hpp ****     iterator end()
 175:Cpp/ws2812b.hpp ****     {
 176:Cpp/ws2812b.hpp ****       return {spi_buf_.end(), &needs_update_};
 177:Cpp/ws2812b.hpp ****     }
 178:Cpp/ws2812b.hpp **** 
 179:Cpp/ws2812b.hpp ****     Ws2812bRef operator[](int idx)
 180:Cpp/ws2812b.hpp ****     {
 181:Cpp/ws2812b.hpp ****       return {spi_buf_.data() + idx * 12, needs_update_};
 182:Cpp/ws2812b.hpp ****     }
 183:Cpp/ws2812b.hpp **** 
 184:Cpp/ws2812b.hpp ****   private:
 185:Cpp/ws2812b.hpp ****     void transmit()
 186:Cpp/ws2812b.hpp ****     {
 187:Cpp/ws2812b.hpp ****       auto res = HAL_SPI_Transmit_DMA(&hspi_, spi_buf_.data(), spi_buf_.size() + zeros_.size());
 188:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 189:Cpp/ws2812b.hpp ****         ;
 190:Cpp/ws2812b.hpp ****       if (res != HAL_OK) {
 191:Cpp/ws2812b.hpp ****         printf("ERROR");
 192:Cpp/ws2812b.hpp ****       }
 193:Cpp/ws2812b.hpp ****     }
 194:Cpp/ws2812b.hpp **** 
 195:Cpp/ws2812b.hpp ****     SPI_HandleTypeDef& hspi_;
 196:Cpp/ws2812b.hpp ****     bool needs_update_;
 197:Cpp/ws2812b.hpp ****     std::array<std::uint8_t, size()* 3 * 4> spi_buf_ = {0};
 198:Cpp/ws2812b.hpp ****     std::array<std::uint8_t, 2> zeros_ = {0};
 199:Cpp/ws2812b.hpp ****   };
 200:Cpp/ws2812b.hpp **** 
 201:Cpp/ws2812b.hpp **** 
 202:Cpp/ws2812b.hpp ****   constexpr std::array colors = {
 203:Cpp/ws2812b.hpp ****     RGBColor{0x80, 0x80, 0x80}, RGBColor{0x80, 0x80, 0x00}, RGBColor{0x80, 0x00, 0x00}, RGBColor{0x
 204:Cpp/ws2812b.hpp ****     RGBColor{0x00, 0x00, 0x80}, RGBColor{0x00, 0x80, 0x80}, RGBColor{0x00, 0x80, 0x00},
 205:Cpp/ws2812b.hpp ****   };
 206:Cpp/ws2812b.hpp **** 
 207:Cpp/ws2812b.hpp ****   template<int N>
 208:Cpp/ws2812b.hpp ****   void led_cascade_colors(Ws2812bArray<N>& leds)
 209:Cpp/ws2812b.hpp ****   {
 210:Cpp/ws2812b.hpp ****     main_loop.schedule_cond_repeat([&leds, c = 0U, l = 0] () mutable {
 211:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 212:Cpp/ws2812b.hpp ****       l++;
 213:Cpp/ws2812b.hpp ****       if (l == leds.size()) {
 214:Cpp/ws2812b.hpp ****         c++;
 215:Cpp/ws2812b.hpp ****         l = 0;
 216:Cpp/ws2812b.hpp ****       }
 217:Cpp/ws2812b.hpp ****       return c == colors.size() ? 0 : 50;
 218:Cpp/ws2812b.hpp ****     });
 219:Cpp/ws2812b.hpp ****   }
 220:Cpp/ws2812b.hpp **** 
 221:Cpp/ws2812b.hpp ****   template<int N>
 222:Cpp/ws2812b.hpp ****   void led_pulse_colors(Ws2812bArray<N>& leds)
 8372              		.loc 9 222 8
 8373              		.cfi_startproc
ARM GAS  /tmp/ccU23Djm.s 			page 233


 8374              		@ args = 0, pretend = 0, frame = 64
 8375              		@ frame_needed = 1, uses_anonymous_args = 0
 8376 0000 80B5     		push	{r7, lr}
 8377              	.LCFI599:
 8378              		.cfi_def_cfa_offset 8
 8379              		.cfi_offset 7, -8
 8380              		.cfi_offset 14, -4
 8381 0002 90B0     		sub	sp, sp, #64
 8382              	.LCFI600:
 8383              		.cfi_def_cfa_offset 72
 8384 0004 00AF     		add	r7, sp, #0
 8385              	.LCFI601:
 8386              		.cfi_def_cfa_register 7
 8387 0006 7860     		str	r0, [r7, #4]
 8388              	.LBB61:
 223:Cpp/ws2812b.hpp ****   {
 224:Cpp/ws2812b.hpp ****     for (auto color : colors) {
 8389              		.loc 9 224 5
 8390 0008 5F4B     		ldr	r3, .L322+8
 8391 000a BB62     		str	r3, [r7, #40]
 8392 000c 5E4B     		ldr	r3, .L322+8
 8393 000e FB63     		str	r3, [r7, #60]
 8394 0010 5E4B     		ldr	r3, .L322+12
 8395 0012 7B62     		str	r3, [r7, #36]
 8396              	.L316:
 8397              		.loc 9 224 5 is_stmt 0 discriminator 1
 8398 0014 FA6B     		ldr	r2, [r7, #60]
 8399 0016 7B6A     		ldr	r3, [r7, #36]
 8400 0018 9A42     		cmp	r2, r3
 8401 001a 00F0AB80 		beq	.L321
 8402              	.LBB62:
 8403              		.loc 9 224 15 is_stmt 1 discriminator 2
 8404 001e FA6B     		ldr	r2, [r7, #60]
 8405 0020 07F11003 		add	r3, r7, #16
 8406 0024 1188     		ldrh	r1, [r2]	@ unaligned
 8407 0026 9278     		ldrb	r2, [r2, #2]
 8408 0028 1980     		strh	r1, [r3]	@ unaligned
 8409 002a 9A70     		strb	r2, [r3, #2]
 8410              	.LBB63:
 225:Cpp/ws2812b.hpp ****       for (float f = 0; f <= 1; f += 0.01) {
 8411              		.loc 9 225 18 discriminator 2
 8412 002c 4FF00003 		mov	r3, #0
 8413 0030 BB63     		str	r3, [r7, #56]	@ float
 8414              	.L310:
 8415              		.loc 9 225 27 discriminator 1
 8416 0032 D7ED0E7A 		vldr.32	s15, [r7, #56]
 8417 0036 B7EE007A 		vmov.f32	s14, #1.0e+0
 8418 003a F4EEC77A 		vcmpe.f32	s15, s14
 8419 003e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8420 0042 44D8     		bhi	.L319
 8421              	.LBB64:
 226:Cpp/ws2812b.hpp ****         auto fcolor = color * f;
 8422              		.loc 9 226 29
 8423 0044 07F11003 		add	r3, r7, #16
 8424 0048 97ED0E0A 		vldr.32	s0, [r7, #56]
 8425 004c 1846     		mov	r0, r3
 8426 004e FFF7FEFF 		bl	_ZNK4otto3mcu7ws2812b8RGBColormlEf
ARM GAS  /tmp/ccU23Djm.s 			page 234


 8427 0052 0346     		mov	r3, r0
 8428 0054 1A46     		mov	r2, r3
 8429 0056 3A73     		strb	r2, [r7, #12]
 8430 0058 C3F30722 		ubfx	r2, r3, #8, #8
 8431 005c 7A73     		strb	r2, [r7, #13]
 8432 005e C3F30743 		ubfx	r3, r3, #16, #8
 8433 0062 BB73     		strb	r3, [r7, #14]
 8434              	.LBB65:
 227:Cpp/ws2812b.hpp ****         for (int i = 0; i < leds.size(); i++) {
 8435              		.loc 9 227 18
 8436 0064 0023     		movs	r3, #0
 8437 0066 7B63     		str	r3, [r7, #52]
 8438              	.L309:
 8439              		.loc 9 227 27 discriminator 3
 8440 0068 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv
 8441 006c 0246     		mov	r2, r0
 8442 006e 7B6B     		ldr	r3, [r7, #52]
 8443 0070 9342     		cmp	r3, r2
 8444 0072 B4BF     		ite	lt
 8445 0074 0123     		movlt	r3, #1
 8446 0076 0023     		movge	r3, #0
 8447 0078 DBB2     		uxtb	r3, r3
 8448 007a 002B     		cmp	r3, #0
 8449 007c 10D0     		beq	.L308
 228:Cpp/ws2812b.hpp ****           leds[i] = fcolor;
 8450              		.loc 9 228 15 discriminator 2
 8451 007e 07F11403 		add	r3, r7, #20
 8452 0082 7A6B     		ldr	r2, [r7, #52]
 8453 0084 7968     		ldr	r1, [r7, #4]
 8454 0086 1846     		mov	r0, r3
 8455 0088 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 8456              		.loc 9 228 19 discriminator 2
 8457 008c 07F11403 		add	r3, r7, #20
 8458 0090 F968     		ldr	r1, [r7, #12]
 8459 0092 1846     		mov	r0, r3
 8460 0094 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 227:Cpp/ws2812b.hpp ****         for (int i = 0; i < leds.size(); i++) {
 8461              		.loc 9 227 9 discriminator 2
 8462 0098 7B6B     		ldr	r3, [r7, #52]
 8463 009a 0133     		adds	r3, r3, #1
 8464 009c 7B63     		str	r3, [r7, #52]
 8465 009e E3E7     		b	.L309
 8466              	.L308:
 8467              	.LBE65:
 229:Cpp/ws2812b.hpp ****         }
 230:Cpp/ws2812b.hpp ****         leds.maybe_update();
 8468              		.loc 9 230 9 discriminator 2
 8469 00a0 7868     		ldr	r0, [r7, #4]
 8470 00a2 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv
 231:Cpp/ws2812b.hpp ****         HAL_Delay(10);
 8471              		.loc 9 231 18 discriminator 2
 8472 00a6 0A20     		movs	r0, #10
 8473 00a8 FFF7FEFF 		bl	HAL_Delay
 8474              	.LBE64:
 225:Cpp/ws2812b.hpp ****         auto fcolor = color * f;
 8475              		.loc 9 225 35 discriminator 2
 8476 00ac B86B     		ldr	r0, [r7, #56]	@ float
ARM GAS  /tmp/ccU23Djm.s 			page 235


 8477 00ae FFF7FEFF 		bl	__aeabi_f2d
 8478              	.LVL3:
 8479 00b2 33A3     		adr	r3, .L322
 8480 00b4 D3E90023 		ldrd	r2, [r3]
 8481 00b8 FFF7FEFF 		bl	__aeabi_dadd
 8482              	.LVL4:
 8483 00bc 0246     		mov	r2, r0
 8484 00be 0B46     		mov	r3, r1
 225:Cpp/ws2812b.hpp ****         auto fcolor = color * f;
 8485              		.loc 9 225 7 discriminator 2
 8486 00c0 1046     		mov	r0, r2
 8487 00c2 1946     		mov	r1, r3
 8488 00c4 FFF7FEFF 		bl	__aeabi_d2f
 8489              	.LVL5:
 8490 00c8 0346     		mov	r3, r0	@ float
 8491 00ca BB63     		str	r3, [r7, #56]	@ float
 8492 00cc B1E7     		b	.L310
 8493              	.L319:
 8494              	.LBE63:
 8495              	.LBB66:
 232:Cpp/ws2812b.hpp ****       }
 233:Cpp/ws2812b.hpp ****       for (float f = 1; f >= 0; f -= 0.01) {
 8496              		.loc 9 233 18
 8497 00ce 4FF07E53 		mov	r3, #1065353216
 8498 00d2 3B63     		str	r3, [r7, #48]	@ float
 8499              	.L315:
 8500              		.loc 9 233 27 discriminator 1
 8501 00d4 D7ED0C7A 		vldr.32	s15, [r7, #48]
 8502 00d8 F5EEC07A 		vcmpe.f32	s15, #0
 8503 00dc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8504 00e0 44DB     		blt	.L320
 8505              	.LBB67:
 234:Cpp/ws2812b.hpp ****         auto fcolor = color * f;
 8506              		.loc 9 234 29
 8507 00e2 07F11003 		add	r3, r7, #16
 8508 00e6 97ED0C0A 		vldr.32	s0, [r7, #48]
 8509 00ea 1846     		mov	r0, r3
 8510 00ec FFF7FEFF 		bl	_ZNK4otto3mcu7ws2812b8RGBColormlEf
 8511 00f0 0346     		mov	r3, r0
 8512 00f2 1A46     		mov	r2, r3
 8513 00f4 3A72     		strb	r2, [r7, #8]
 8514 00f6 C3F30722 		ubfx	r2, r3, #8, #8
 8515 00fa 7A72     		strb	r2, [r7, #9]
 8516 00fc C3F30743 		ubfx	r3, r3, #16, #8
 8517 0100 BB72     		strb	r3, [r7, #10]
 8518              	.LBB68:
 235:Cpp/ws2812b.hpp ****         for (int i = 0; i < leds.size(); i++) {
 8519              		.loc 9 235 18
 8520 0102 0023     		movs	r3, #0
 8521 0104 FB62     		str	r3, [r7, #44]
 8522              	.L314:
 8523              		.loc 9 235 27 discriminator 3
 8524 0106 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv
 8525 010a 0246     		mov	r2, r0
 8526 010c FB6A     		ldr	r3, [r7, #44]
 8527 010e 9342     		cmp	r3, r2
 8528 0110 B4BF     		ite	lt
ARM GAS  /tmp/ccU23Djm.s 			page 236


 8529 0112 0123     		movlt	r3, #1
 8530 0114 0023     		movge	r3, #0
 8531 0116 DBB2     		uxtb	r3, r3
 8532 0118 002B     		cmp	r3, #0
 8533 011a 10D0     		beq	.L313
 236:Cpp/ws2812b.hpp ****           leds[i] = fcolor;
 8534              		.loc 9 236 15 discriminator 2
 8535 011c 07F11C03 		add	r3, r7, #28
 8536 0120 FA6A     		ldr	r2, [r7, #44]
 8537 0122 7968     		ldr	r1, [r7, #4]
 8538 0124 1846     		mov	r0, r3
 8539 0126 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 8540              		.loc 9 236 19 discriminator 2
 8541 012a 07F11C03 		add	r3, r7, #28
 8542 012e B968     		ldr	r1, [r7, #8]
 8543 0130 1846     		mov	r0, r3
 8544 0132 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 235:Cpp/ws2812b.hpp ****         for (int i = 0; i < leds.size(); i++) {
 8545              		.loc 9 235 9 discriminator 2
 8546 0136 FB6A     		ldr	r3, [r7, #44]
 8547 0138 0133     		adds	r3, r3, #1
 8548 013a FB62     		str	r3, [r7, #44]
 8549 013c E3E7     		b	.L314
 8550              	.L313:
 8551              	.LBE68:
 237:Cpp/ws2812b.hpp ****         }
 238:Cpp/ws2812b.hpp ****         leds.maybe_update();
 8552              		.loc 9 238 9 discriminator 2
 8553 013e 7868     		ldr	r0, [r7, #4]
 8554 0140 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv
 239:Cpp/ws2812b.hpp ****         HAL_Delay(10);
 8555              		.loc 9 239 18 discriminator 2
 8556 0144 0A20     		movs	r0, #10
 8557 0146 FFF7FEFF 		bl	HAL_Delay
 8558              	.LBE67:
 233:Cpp/ws2812b.hpp ****         auto fcolor = color * f;
 8559              		.loc 9 233 35 discriminator 2
 8560 014a 386B     		ldr	r0, [r7, #48]	@ float
 8561 014c FFF7FEFF 		bl	__aeabi_f2d
 8562              	.LVL6:
 8563 0150 0BA3     		adr	r3, .L322
 8564 0152 D3E90023 		ldrd	r2, [r3]
 8565 0156 FFF7FEFF 		bl	__aeabi_dsub
 8566              	.LVL7:
 8567 015a 0246     		mov	r2, r0
 8568 015c 0B46     		mov	r3, r1
 233:Cpp/ws2812b.hpp ****         auto fcolor = color * f;
 8569              		.loc 9 233 7 discriminator 2
 8570 015e 1046     		mov	r0, r2
 8571 0160 1946     		mov	r1, r3
 8572 0162 FFF7FEFF 		bl	__aeabi_d2f
 8573              	.LVL8:
 8574 0166 0346     		mov	r3, r0	@ float
 8575 0168 3B63     		str	r3, [r7, #48]	@ float
 8576 016a B3E7     		b	.L315
 8577              	.L320:
 8578              	.LBE66:
ARM GAS  /tmp/ccU23Djm.s 			page 237


 8579              	.LBE62:
 224:Cpp/ws2812b.hpp ****       for (float f = 0; f <= 1; f += 0.01) {
 8580              		.loc 9 224 5 discriminator 3
 8581 016c FB6B     		ldr	r3, [r7, #60]
 8582 016e 0333     		adds	r3, r3, #3
 8583 0170 FB63     		str	r3, [r7, #60]
 8584 0172 4FE7     		b	.L316
 8585              	.L321:
 8586              	.LBE61:
 240:Cpp/ws2812b.hpp ****       }
 241:Cpp/ws2812b.hpp ****     }
 242:Cpp/ws2812b.hpp ****   }
 8587              		.loc 9 242 3
 8588 0174 00BF     		nop
 8589 0176 4037     		adds	r7, r7, #64
 8590              	.LCFI602:
 8591              		.cfi_def_cfa_offset 8
 8592 0178 BD46     		mov	sp, r7
 8593              	.LCFI603:
 8594              		.cfi_def_cfa_register 13
 8595              		@ sp needed
 8596 017a 80BD     		pop	{r7, pc}
 8597              	.L323:
 8598 017c AFF30080 		.align	3
 8599              	.L322:
 8600 0180 7B14AE47 		.word	1202590843
 8601 0184 E17A843F 		.word	1065646817
 8602 0188 00000000 		.word	_ZN4otto3mcu7ws2812bL6colorsE
 8603 018c 15000000 		.word	_ZN4otto3mcu7ws2812bL6colorsE+21
 8604              		.cfi_endproc
 8605              	.LFE4559:
 8607              		.section	.text._ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_
 8608              		.align	1
 8609              		.weak	_ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv
 8610              		.syntax unified
 8611              		.thumb
 8612              		.thumb_func
 8613              		.fpu fpv4-sp-d16
 8615              	_ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv:
 8616              	.LFB4565:
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8617              		.loc 9 210 36
 8618              		.cfi_startproc
 8619              		@ args = 0, pretend = 0, frame = 24
 8620              		@ frame_needed = 1, uses_anonymous_args = 0
 8621 0000 80B5     		push	{r7, lr}
 8622              	.LCFI604:
 8623              		.cfi_def_cfa_offset 8
 8624              		.cfi_offset 7, -8
 8625              		.cfi_offset 14, -4
 8626 0002 86B0     		sub	sp, sp, #24
 8627              	.LCFI605:
 8628              		.cfi_def_cfa_offset 32
 8629 0004 00AF     		add	r7, sp, #0
 8630              	.LCFI606:
 8631              		.cfi_def_cfa_register 7
 8632 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 238


 8633              	.LBB69:
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8634              		.loc 9 210 36
 8635 0008 7B68     		ldr	r3, [r7, #4]
 8636 000a 5B68     		ldr	r3, [r3, #4]
 211:Cpp/ws2812b.hpp ****       l++;
 8637              		.loc 9 211 27
 8638 000c 1946     		mov	r1, r3
 8639 000e 2448     		ldr	r0, .L329
 8640 0010 FFF7FEFF 		bl	_ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj
 8641 0014 0346     		mov	r3, r0
 211:Cpp/ws2812b.hpp ****       l++;
 8642              		.loc 9 211 15
 8643 0016 B6EE000A 		vmov.f32	s0, #5.0e-1
 8644 001a 1846     		mov	r0, r3
 8645 001c FFF7FEFF 		bl	_ZNK4otto3mcu7ws2812b8RGBColormlEf
 8646 0020 0346     		mov	r3, r0
 8647 0022 1A46     		mov	r2, r3
 8648 0024 3A73     		strb	r2, [r7, #12]
 8649 0026 C3F30722 		ubfx	r2, r3, #8, #8
 8650 002a 7A73     		strb	r2, [r7, #13]
 8651 002c C3F30743 		ubfx	r3, r3, #16, #8
 8652 0030 BB73     		strb	r3, [r7, #14]
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8653              		.loc 9 210 36
 8654 0032 7B68     		ldr	r3, [r7, #4]
 8655 0034 1968     		ldr	r1, [r3]
 8656 0036 7B68     		ldr	r3, [r7, #4]
 8657 0038 9A68     		ldr	r2, [r3, #8]
 211:Cpp/ws2812b.hpp ****       l++;
 8658              		.loc 9 211 11
 8659 003a 07F11003 		add	r3, r7, #16
 8660 003e 1846     		mov	r0, r3
 8661 0040 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 211:Cpp/ws2812b.hpp ****       l++;
 8662              		.loc 9 211 15
 8663 0044 07F11003 		add	r3, r7, #16
 8664 0048 F968     		ldr	r1, [r7, #12]
 8665 004a 1846     		mov	r0, r3
 8666 004c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8667              		.loc 9 210 36
 8668 0050 7B68     		ldr	r3, [r7, #4]
 8669 0052 9B68     		ldr	r3, [r3, #8]
 212:Cpp/ws2812b.hpp ****       if (l == leds.size()) {
 8670              		.loc 9 212 7
 8671 0054 5A1C     		adds	r2, r3, #1
 8672 0056 7B68     		ldr	r3, [r7, #4]
 8673 0058 9A60     		str	r2, [r3, #8]
 213:Cpp/ws2812b.hpp ****         c++;
 8674              		.loc 9 213 13
 8675 005a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv
 8676 005e 0246     		mov	r2, r0
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8677              		.loc 9 210 36
 8678 0060 7B68     		ldr	r3, [r7, #4]
 8679 0062 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccU23Djm.s 			page 239


 213:Cpp/ws2812b.hpp ****         c++;
 8680              		.loc 9 213 13
 8681 0064 9A42     		cmp	r2, r3
 8682 0066 0CBF     		ite	eq
 8683 0068 0123     		moveq	r3, #1
 8684 006a 0023     		movne	r3, #0
 8685 006c DBB2     		uxtb	r3, r3
 213:Cpp/ws2812b.hpp ****         c++;
 8686              		.loc 9 213 7
 8687 006e 002B     		cmp	r3, #0
 8688 0070 07D0     		beq	.L325
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8689              		.loc 9 210 36
 8690 0072 7B68     		ldr	r3, [r7, #4]
 8691 0074 5B68     		ldr	r3, [r3, #4]
 214:Cpp/ws2812b.hpp ****         l = 0;
 8692              		.loc 9 214 9
 8693 0076 5A1C     		adds	r2, r3, #1
 8694 0078 7B68     		ldr	r3, [r7, #4]
 8695 007a 5A60     		str	r2, [r3, #4]
 215:Cpp/ws2812b.hpp ****       }
 8696              		.loc 9 215 9
 8697 007c 7B68     		ldr	r3, [r7, #4]
 8698 007e 0022     		movs	r2, #0
 8699 0080 9A60     		str	r2, [r3, #8]
 8700              	.L325:
 217:Cpp/ws2812b.hpp ****     });
 8701              		.loc 9 217 30
 8702 0082 0748     		ldr	r0, .L329
 8703 0084 FFF7FEFF 		bl	_ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv
 8704 0088 0246     		mov	r2, r0
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8705              		.loc 9 210 36
 8706 008a 7B68     		ldr	r3, [r7, #4]
 8707 008c 5B68     		ldr	r3, [r3, #4]
 217:Cpp/ws2812b.hpp ****     });
 8708              		.loc 9 217 39
 8709 008e 9A42     		cmp	r2, r3
 8710 0090 01D1     		bne	.L326
 217:Cpp/ws2812b.hpp ****     });
 8711              		.loc 9 217 39 is_stmt 0 discriminator 1
 8712 0092 0023     		movs	r3, #0
 8713 0094 00E0     		b	.L328
 8714              	.L326:
 217:Cpp/ws2812b.hpp ****     });
 8715              		.loc 9 217 39 discriminator 2
 8716 0096 3223     		movs	r3, #50
 8717              	.L328:
 8718              	.LBE69:
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8719              		.loc 9 210 36 is_stmt 1 discriminator 5
 8720 0098 1846     		mov	r0, r3
 8721 009a 1837     		adds	r7, r7, #24
 8722              	.LCFI607:
 8723              		.cfi_def_cfa_offset 8
 8724 009c BD46     		mov	sp, r7
 8725              	.LCFI608:
ARM GAS  /tmp/ccU23Djm.s 			page 240


 8726              		.cfi_def_cfa_register 13
 8727              		@ sp needed
 8728 009e 80BD     		pop	{r7, pc}
 8729              	.L330:
 8730              		.align	2
 8731              	.L329:
 8732 00a0 00000000 		.word	_ZN4otto3mcu7ws2812bL6colorsE
 8733              		.cfi_endproc
 8734              	.LFE4565:
 8736              		.section	.text._ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv,"axG",%progbits,_ZNKSt5arrayI
 8737              		.align	1
 8738              		.weak	_ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv
 8739              		.syntax unified
 8740              		.thumb
 8741              		.thumb_func
 8742              		.fpu fpv4-sp-d16
 8744              	_ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv:
 8745              	.LFB4566:
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 8746              		.loc 8 175 7
 8747              		.cfi_startproc
 8748              		@ args = 0, pretend = 0, frame = 8
 8749              		@ frame_needed = 1, uses_anonymous_args = 0
 8750              		@ link register save eliminated.
 8751 0000 80B4     		push	{r7}
 8752              	.LCFI609:
 8753              		.cfi_def_cfa_offset 4
 8754              		.cfi_offset 7, -4
 8755 0002 83B0     		sub	sp, sp, #12
 8756              	.LCFI610:
 8757              		.cfi_def_cfa_offset 16
 8758 0004 00AF     		add	r7, sp, #0
 8759              	.LCFI611:
 8760              		.cfi_def_cfa_register 7
 8761 0006 7860     		str	r0, [r7, #4]
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 8762              		.loc 8 175 38
 8763 0008 0723     		movs	r3, #7
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 8764              		.loc 8 175 43
 8765 000a 1846     		mov	r0, r3
 8766 000c 0C37     		adds	r7, r7, #12
 8767              	.LCFI612:
 8768              		.cfi_def_cfa_offset 4
 8769 000e BD46     		mov	sp, r7
 8770              	.LCFI613:
 8771              		.cfi_def_cfa_register 13
 8772              		@ sp needed
 8773 0010 5DF8047B 		ldr	r7, [sp], #4
 8774              	.LCFI614:
 8775              		.cfi_restore 7
 8776              		.cfi_def_cfa_offset 0
 8777 0014 7047     		bx	lr
 8778              		.cfi_endproc
 8779              	.LFE4566:
 8781              		.section	.text._ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE,"axG",%
 8782              		.align	1
ARM GAS  /tmp/ccU23Djm.s 			page 241


 8783              		.weak	_ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE
 8784              		.syntax unified
 8785              		.thumb
 8786              		.thumb_func
 8787              		.fpu fpv4-sp-d16
 8789              	_ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:
 8790              	.LFB4564:
 208:Cpp/ws2812b.hpp ****   {
 8791              		.loc 9 208 8
 8792              		.cfi_startproc
 8793              		@ args = 0, pretend = 0, frame = 64
 8794              		@ frame_needed = 1, uses_anonymous_args = 0
 8795 0000 80B5     		push	{r7, lr}
 8796              	.LCFI615:
 8797              		.cfi_def_cfa_offset 8
 8798              		.cfi_offset 7, -8
 8799              		.cfi_offset 14, -4
 8800 0002 90B0     		sub	sp, sp, #64
 8801              	.LCFI616:
 8802              		.cfi_def_cfa_offset 72
 8803 0004 00AF     		add	r7, sp, #0
 8804              	.LCFI617:
 8805              		.cfi_def_cfa_register 7
 8806 0006 7860     		str	r0, [r7, #4]
 210:Cpp/ws2812b.hpp ****       leds[l] = colors[c] * 0.5;
 8807              		.loc 9 210 5
 8808 0008 7B68     		ldr	r3, [r7, #4]
 8809 000a 7B63     		str	r3, [r7, #52]
 8810 000c 0023     		movs	r3, #0
 8811 000e BB63     		str	r3, [r7, #56]
 8812 0010 0023     		movs	r3, #0
 8813 0012 FB63     		str	r3, [r7, #60]
 8814 0014 07F13402 		add	r2, r7, #52
 8815 0018 07F10803 		add	r3, r7, #8
 8816 001c 1146     		mov	r1, r2
 8817 001e 1846     		mov	r0, r3
 8818 0020 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1IZN4otto3mcu7ws2812b18led_cascade_color
 8819 0024 07F10803 		add	r3, r7, #8
 8820 0028 0022     		movs	r2, #0
 8821 002a 1946     		mov	r1, r3
 8822 002c 0548     		ldr	r0, .L334
 8823 002e FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2E
 8824 0032 07F10803 		add	r3, r7, #8
 8825 0036 1846     		mov	r0, r3
 8826 0038 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EED1Ev
 219:Cpp/ws2812b.hpp **** 
 8827              		.loc 9 219 3
 8828 003c 00BF     		nop
 8829 003e 4037     		adds	r7, r7, #64
 8830              	.LCFI618:
 8831              		.cfi_def_cfa_offset 8
 8832 0040 BD46     		mov	sp, r7
 8833              	.LCFI619:
 8834              		.cfi_def_cfa_register 13
 8835              		@ sp needed
 8836 0042 80BD     		pop	{r7, pc}
 8837              	.L335:
ARM GAS  /tmp/ccU23Djm.s 			page 242


 8838              		.align	2
 8839              	.L334:
 8840 0044 00000000 		.word	_ZN4otto3mcu9main_loopE
 8841              		.cfi_endproc
 8842              	.LFE4564:
 8844              		.section	.text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv,"axG",%progbits,_ZN4otto3mcu4k
 8845              		.align	1
 8846              		.weak	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv
 8847              		.syntax unified
 8848              		.thumb
 8849              		.thumb_func
 8850              		.fpu fpv4-sp-d16
 8852              	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv:
 8853              	.LFB4567:
  16:Cpp/keys.hpp  ****       CellData data;
  17:Cpp/keys.hpp  ****       bool is_down = false;
  18:Cpp/keys.hpp  ****     };
  19:Cpp/keys.hpp  ****     using Row = std::array<Cell, col_count>;
  20:Cpp/keys.hpp  ****     using Table = std::array<Row, row_count>;
  21:Cpp/keys.hpp  **** 
  22:Cpp/keys.hpp  ****     Table table;
  23:Cpp/keys.hpp  ****     std::array<GpioPin, row_count> row_pins;
  24:Cpp/keys.hpp  ****     std::array<GpioPin, col_count> col_pins;
  25:Cpp/keys.hpp  **** 
  26:Cpp/keys.hpp  ****     void init()
  27:Cpp/keys.hpp  ****     {
  28:Cpp/keys.hpp  ****       for (auto& pin : col_pins) {
  29:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::output_pp);
  30:Cpp/keys.hpp  ****       }
  31:Cpp/keys.hpp  ****       for (auto& pin : row_pins) {
  32:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::input, GpioPin::Pull::down);
  33:Cpp/keys.hpp  ****       }
  34:Cpp/keys.hpp  ****     }
  35:Cpp/keys.hpp  **** 
  36:Cpp/keys.hpp  ****     /// Update the table
  37:Cpp/keys.hpp  ****     void scan()
 8854              		.loc 17 37 10
 8855              		.cfi_startproc
 8856              		@ args = 0, pretend = 0, frame = 24
 8857              		@ frame_needed = 1, uses_anonymous_args = 0
 8858 0000 80B5     		push	{r7, lr}
 8859              	.LCFI620:
 8860              		.cfi_def_cfa_offset 8
 8861              		.cfi_offset 7, -8
 8862              		.cfi_offset 14, -4
 8863 0002 86B0     		sub	sp, sp, #24
 8864              	.LCFI621:
 8865              		.cfi_def_cfa_offset 32
 8866 0004 00AF     		add	r7, sp, #0
 8867              	.LCFI622:
 8868              		.cfi_def_cfa_register 7
 8869 0006 7860     		str	r0, [r7, #4]
 8870              	.LBB70:
  38:Cpp/keys.hpp  ****     {
  39:Cpp/keys.hpp  ****       for (int c = 0; c < col_count; c++) {
 8871              		.loc 17 39 16
 8872 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccU23Djm.s 			page 243


 8873 000a 7B61     		str	r3, [r7, #20]
 8874              	.L340:
 8875              		.loc 17 39 25 discriminator 1
 8876 000c 7B69     		ldr	r3, [r7, #20]
 8877 000e 072B     		cmp	r3, #7
 8878 0010 46DC     		bgt	.L341
 8879              	.LBB71:
  40:Cpp/keys.hpp  ****         col_pins[c].write(true);
 8880              		.loc 17 40 17
 8881 0012 7B68     		ldr	r3, [r7, #4]
 8882 0014 03F51873 		add	r3, r3, #608
 8883 0018 7A69     		ldr	r2, [r7, #20]
 8884 001a 1146     		mov	r1, r2
 8885 001c 1846     		mov	r0, r3
 8886 001e FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj
 8887 0022 0346     		mov	r3, r0
 8888              		.loc 17 40 9
 8889 0024 0121     		movs	r1, #1
 8890 0026 1846     		mov	r0, r3
 8891 0028 FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin5writeEb
 8892              	.LBB72:
  41:Cpp/keys.hpp  ****         for (int r = 0; r < row_count; r++) {
 8893              		.loc 17 41 18
 8894 002c 0023     		movs	r3, #0
 8895 002e 3B61     		str	r3, [r7, #16]
 8896              	.L339:
 8897              		.loc 17 41 27 discriminator 3
 8898 0030 3B69     		ldr	r3, [r7, #16]
 8899 0032 072B     		cmp	r3, #7
 8900 0034 23DC     		bgt	.L338
 8901              	.LBB73:
  42:Cpp/keys.hpp  ****           bool cur = row_pins[r].read();
 8902              		.loc 17 42 30 discriminator 2
 8903 0036 7B68     		ldr	r3, [r7, #4]
 8904 0038 03F50073 		add	r3, r3, #512
 8905 003c 3A69     		ldr	r2, [r7, #16]
 8906 003e 1146     		mov	r1, r2
 8907 0040 1846     		mov	r0, r3
 8908 0042 FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj
 8909 0046 0346     		mov	r3, r0
 8910              		.loc 17 42 16 discriminator 2
 8911 0048 1846     		mov	r0, r3
 8912 004a FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin4readEv
 8913 004e 0346     		mov	r3, r0
 8914 0050 FB73     		strb	r3, [r7, #15]
  43:Cpp/keys.hpp  ****           bool& prev = table[r][c].is_down;
 8915              		.loc 17 43 29 discriminator 2
 8916 0052 7B68     		ldr	r3, [r7, #4]
 8917 0054 3A69     		ldr	r2, [r7, #16]
 8918 0056 1146     		mov	r1, r2
 8919 0058 1846     		mov	r0, r3
 8920 005a FFF7FEFF 		bl	_ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj
 8921 005e 0246     		mov	r2, r0
 8922              		.loc 17 43 32 discriminator 2
 8923 0060 7B69     		ldr	r3, [r7, #20]
 8924 0062 1946     		mov	r1, r3
 8925 0064 1046     		mov	r0, r2
ARM GAS  /tmp/ccU23Djm.s 			page 244


 8926 0066 FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj
 8927 006a 0346     		mov	r3, r0
 8928              		.loc 17 43 17 discriminator 2
 8929 006c 0433     		adds	r3, r3, #4
 8930 006e BB60     		str	r3, [r7, #8]
  44:Cpp/keys.hpp  ****           prev = cur;
 8931              		.loc 17 44 11 discriminator 2
 8932 0070 BB68     		ldr	r3, [r7, #8]
 8933 0072 FA7B     		ldrb	r2, [r7, #15]
 8934 0074 1A70     		strb	r2, [r3]
 8935              	.LBE73:
  41:Cpp/keys.hpp  ****           bool cur = row_pins[r].read();
 8936              		.loc 17 41 9 discriminator 2
 8937 0076 3B69     		ldr	r3, [r7, #16]
 8938 0078 0133     		adds	r3, r3, #1
 8939 007a 3B61     		str	r3, [r7, #16]
 8940 007c D8E7     		b	.L339
 8941              	.L338:
 8942              	.LBE72:
  45:Cpp/keys.hpp  ****         }
  46:Cpp/keys.hpp  ****         col_pins[c].write(false);
 8943              		.loc 17 46 17 discriminator 2
 8944 007e 7B68     		ldr	r3, [r7, #4]
 8945 0080 03F51873 		add	r3, r3, #608
 8946 0084 7A69     		ldr	r2, [r7, #20]
 8947 0086 1146     		mov	r1, r2
 8948 0088 1846     		mov	r0, r3
 8949 008a FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj
 8950 008e 0346     		mov	r3, r0
 8951              		.loc 17 46 9 discriminator 2
 8952 0090 0021     		movs	r1, #0
 8953 0092 1846     		mov	r0, r3
 8954 0094 FFF7FEFF 		bl	_ZNK4otto3mcu7GpioPin5writeEb
 8955              	.LBE71:
  39:Cpp/keys.hpp  ****         col_pins[c].write(true);
 8956              		.loc 17 39 7 discriminator 2
 8957 0098 7B69     		ldr	r3, [r7, #20]
 8958 009a 0133     		adds	r3, r3, #1
 8959 009c 7B61     		str	r3, [r7, #20]
 8960 009e B5E7     		b	.L340
 8961              	.L341:
 8962              	.LBE70:
  47:Cpp/keys.hpp  ****       }
  48:Cpp/keys.hpp  ****     }
 8963              		.loc 17 48 5
 8964 00a0 00BF     		nop
 8965 00a2 1837     		adds	r7, r7, #24
 8966              	.LCFI623:
 8967              		.cfi_def_cfa_offset 8
 8968 00a4 BD46     		mov	sp, r7
 8969              	.LCFI624:
 8970              		.cfi_def_cfa_register 13
 8971              		@ sp needed
 8972 00a6 80BD     		pop	{r7, pc}
 8973              		.cfi_endproc
 8974              	.LFE4567:
 8976              		.section	.text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv,"axG",%
ARM GAS  /tmp/ccU23Djm.s 			page 245


 8977              		.align	1
 8978              		.weak	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv
 8979              		.syntax unified
 8980              		.thumb
 8981              		.thumb_func
 8982              		.fpu fpv4-sp-d16
 8984              	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv:
 8985              	.LFB4568:
 130:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data()); }
 8986              		.loc 8 130 7
 8987              		.cfi_startproc
 8988              		@ args = 0, pretend = 0, frame = 8
 8989              		@ frame_needed = 1, uses_anonymous_args = 0
 8990 0000 80B5     		push	{r7, lr}
 8991              	.LCFI625:
 8992              		.cfi_def_cfa_offset 8
 8993              		.cfi_offset 7, -8
 8994              		.cfi_offset 14, -4
 8995 0002 82B0     		sub	sp, sp, #8
 8996              	.LCFI626:
 8997              		.cfi_def_cfa_offset 16
 8998 0004 00AF     		add	r7, sp, #0
 8999              	.LCFI627:
 9000              		.cfi_def_cfa_register 7
 9001 0006 7860     		str	r0, [r7, #4]
 131:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 9002              		.loc 8 131 16
 9003 0008 7868     		ldr	r0, [r7, #4]
 9004 000a FFF7FEFF 		bl	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv
 9005 000e 0346     		mov	r3, r0
 131:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 9006              		.loc 8 131 40
 9007 0010 1846     		mov	r0, r3
 9008 0012 0837     		adds	r7, r7, #8
 9009              	.LCFI628:
 9010              		.cfi_def_cfa_offset 8
 9011 0014 BD46     		mov	sp, r7
 9012              	.LCFI629:
 9013              		.cfi_def_cfa_register 13
 9014              		@ sp needed
 9015 0016 80BD     		pop	{r7, pc}
 9016              		.cfi_endproc
 9017              	.LFE4568:
 9019              		.section	.text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv,"axG",%pr
 9020              		.align	1
 9021              		.weak	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv
 9022              		.syntax unified
 9023              		.thumb
 9024              		.thumb_func
 9025              		.fpu fpv4-sp-d16
 9027              	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv:
 9028              	.LFB4569:
 138:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data() + _Nm); }
 9029              		.loc 8 138 7
 9030              		.cfi_startproc
 9031              		@ args = 0, pretend = 0, frame = 8
 9032              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 246


 9033 0000 80B5     		push	{r7, lr}
 9034              	.LCFI630:
 9035              		.cfi_def_cfa_offset 8
 9036              		.cfi_offset 7, -8
 9037              		.cfi_offset 14, -4
 9038 0002 82B0     		sub	sp, sp, #8
 9039              	.LCFI631:
 9040              		.cfi_def_cfa_offset 16
 9041 0004 00AF     		add	r7, sp, #0
 9042              	.LCFI632:
 9043              		.cfi_def_cfa_register 7
 9044 0006 7860     		str	r0, [r7, #4]
 139:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 9045              		.loc 8 139 38
 9046 0008 7868     		ldr	r0, [r7, #4]
 9047 000a FFF7FEFF 		bl	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv
 9048 000e 0346     		mov	r3, r0
 139:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 9049              		.loc 8 139 43
 9050 0010 4033     		adds	r3, r3, #64
 139:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 9051              		.loc 8 139 46
 9052 0012 1846     		mov	r0, r3
 9053 0014 0837     		adds	r7, r7, #8
 9054              	.LCFI633:
 9055              		.cfi_def_cfa_offset 8
 9056 0016 BD46     		mov	sp, r7
 9057              	.LCFI634:
 9058              		.cfi_def_cfa_register 13
 9059              		@ sp needed
 9060 0018 80BD     		pop	{r7, pc}
 9061              		.cfi_endproc
 9062              	.LFE4569:
 9064              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi,"axG",%progbits,_ZN4otto3mcu7ws2812b1
 9065              		.align	1
 9066              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
 9067              		.syntax unified
 9068              		.thumb
 9069              		.thumb_func
 9070              		.fpu fpv4-sp-d16
 9072              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi:
 9073              	.LFB4570:
 179:Cpp/ws2812b.hpp ****     {
 9074              		.loc 9 179 16
 9075              		.cfi_startproc
 9076              		@ args = 0, pretend = 0, frame = 16
 9077              		@ frame_needed = 1, uses_anonymous_args = 0
 9078 0000 80B5     		push	{r7, lr}
 9079              	.LCFI635:
 9080              		.cfi_def_cfa_offset 8
 9081              		.cfi_offset 7, -8
 9082              		.cfi_offset 14, -4
 9083 0002 84B0     		sub	sp, sp, #16
 9084              	.LCFI636:
 9085              		.cfi_def_cfa_offset 24
 9086 0004 00AF     		add	r7, sp, #0
 9087              	.LCFI637:
ARM GAS  /tmp/ccU23Djm.s 			page 247


 9088              		.cfi_def_cfa_register 7
 9089 0006 F860     		str	r0, [r7, #12]
 9090 0008 B960     		str	r1, [r7, #8]
 9091 000a 7A60     		str	r2, [r7, #4]
 181:Cpp/ws2812b.hpp ****     }
 9092              		.loc 9 181 31
 9093 000c BB68     		ldr	r3, [r7, #8]
 9094 000e 0533     		adds	r3, r3, #5
 9095 0010 1846     		mov	r0, r3
 9096 0012 FFF7FEFF 		bl	_ZNSt5arrayIhLj648EE4dataEv
 9097 0016 0146     		mov	r1, r0
 181:Cpp/ws2812b.hpp ****     }
 9098              		.loc 9 181 37
 9099 0018 7A68     		ldr	r2, [r7, #4]
 9100 001a 1346     		mov	r3, r2
 9101 001c 5B00     		lsls	r3, r3, #1
 9102 001e 1344     		add	r3, r3, r2
 9103 0020 9B00     		lsls	r3, r3, #2
 181:Cpp/ws2812b.hpp ****     }
 9104              		.loc 9 181 56
 9105 0022 1944     		add	r1, r1, r3
 181:Cpp/ws2812b.hpp ****     }
 9106              		.loc 9 181 43
 9107 0024 BB68     		ldr	r3, [r7, #8]
 9108 0026 0433     		adds	r3, r3, #4
 181:Cpp/ws2812b.hpp ****     }
 9109              		.loc 9 181 56
 9110 0028 1A46     		mov	r2, r3
 9111 002a F868     		ldr	r0, [r7, #12]
 9112 002c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b10Ws2812bRefC1EPhRb
 182:Cpp/ws2812b.hpp **** 
 9113              		.loc 9 182 5
 9114 0030 F868     		ldr	r0, [r7, #12]
 9115 0032 1037     		adds	r7, r7, #16
 9116              	.LCFI638:
 9117              		.cfi_def_cfa_offset 8
 9118 0034 BD46     		mov	sp, r7
 9119              	.LCFI639:
 9120              		.cfi_def_cfa_register 13
 9121              		@ sp needed
 9122 0036 80BD     		pop	{r7, pc}
 9123              		.cfi_endproc
 9124              	.LFE4570:
 9126              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv,"axG",%progbits,_ZN4otto3
 9127              		.align	1
 9128              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv
 9129              		.syntax unified
 9130              		.thumb
 9131              		.thumb_func
 9132              		.fpu fpv4-sp-d16
 9134              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv:
 9135              	.LFB4571:
 154:Cpp/ws2812b.hpp ****     {
 9136              		.loc 9 154 10
 9137              		.cfi_startproc
 9138              		@ args = 0, pretend = 0, frame = 8
 9139              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 248


 9140 0000 80B5     		push	{r7, lr}
 9141              	.LCFI640:
 9142              		.cfi_def_cfa_offset 8
 9143              		.cfi_offset 7, -8
 9144              		.cfi_offset 14, -4
 9145 0002 82B0     		sub	sp, sp, #8
 9146              	.LCFI641:
 9147              		.cfi_def_cfa_offset 16
 9148 0004 00AF     		add	r7, sp, #0
 9149              	.LCFI642:
 9150              		.cfi_def_cfa_register 7
 9151 0006 7860     		str	r0, [r7, #4]
 156:Cpp/ws2812b.hpp ****     }
 9152              		.loc 9 156 11
 9153 0008 7B68     		ldr	r3, [r7, #4]
 9154 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 156:Cpp/ws2812b.hpp ****     }
 9155              		.loc 9 156 7
 9156 000c 002B     		cmp	r3, #0
 9157 000e 02D0     		beq	.L350
 156:Cpp/ws2812b.hpp ****     }
 9158              		.loc 9 156 26 discriminator 1
 9159 0010 7868     		ldr	r0, [r7, #4]
 9160 0012 FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv
 9161              	.L350:
 157:Cpp/ws2812b.hpp ****     void send_update()
 9162              		.loc 9 157 5
 9163 0016 00BF     		nop
 9164 0018 0837     		adds	r7, r7, #8
 9165              	.LCFI643:
 9166              		.cfi_def_cfa_offset 8
 9167 001a BD46     		mov	sp, r7
 9168              	.LCFI644:
 9169              		.cfi_def_cfa_register 13
 9170              		@ sp needed
 9171 001c 80BD     		pop	{r7, pc}
 9172              		.cfi_endproc
 9173              	.LFE4571:
 9175              		.section	.text._ZSt5clampIiERKT_S2_S2_S2_,"axG",%progbits,_ZSt5clampIiERKT_S2_S2_S2_,comdat
 9176              		.align	1
 9177              		.weak	_ZSt5clampIiERKT_S2_S2_S2_
 9178              		.syntax unified
 9179              		.thumb
 9180              		.thumb_func
 9181              		.fpu fpv4-sp-d16
 9183              	_ZSt5clampIiERKT_S2_S2_S2_:
 9184              	.LFB4572:
 9185              		.file 18 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // Algorithm implementation -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // any later version.
ARM GAS  /tmp/ccU23Djm.s 			page 249


  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** /*
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * Copyright (c) 1994
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * Hewlett-Packard Company
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * representations about the suitability of this software for any
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * Copyright (c) 1996
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * representations about the suitability of this software for any
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  */
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** /** @file bits/stl_algo.h
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****  */
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #ifndef _STL_ALGO_H
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #define _STL_ALGO_H 1
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #include <cstdlib>	     // for rand
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #include <bits/algorithmfwd.h>
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #include <bits/stl_heap.h>
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #include <bits/stl_tempbuf.h>  // for _Temporary_buffer
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #include <bits/predefined_ops.h>
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #if __cplusplus >= 201103L
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #include <bits/uniform_int_dist.h>
ARM GAS  /tmp/ccU23Djm.s 			page 250


  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #endif
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** // See concept_check.h for the __glibcxx_*_requires macros.
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** {
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Iterator, typename _Compare>
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _Iterator __c, _Compare __comp)
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__comp(__a, __b))
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__b, __c))
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else if (__comp(__a, __c))
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::iter_swap(__result, __a);
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__comp(__a, __c))
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__comp(__b, __c))
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::iter_swap(__result, __b);
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is an overload used by find algos for the Input Iterator case.
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _InputIterator
 101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_if(_InputIterator __first, _InputIterator __last,
 102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _Predicate __pred, input_iterator_tag)
 103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __last && !__pred(__first))
 105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	++__first;
 106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first;
 107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is an overload used by find algos for the RAI case.
 110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Predicate>
 111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _RandomAccessIterator
 112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _Predicate __pred, random_access_iterator_tag)
 114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::difference_type
 116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	__trip_count = (__last - __first) >> 2;
 117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __trip_count > 0; --__trip_count)
 119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 251


 124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       switch (__last - __first)
 138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	case 3:
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	case 2:
 144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	case 1:
 148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(__first))
 149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
 151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	case 0:
 152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	default:
 153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __last;
 154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Iterator, typename _Predicate>
 158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _Iterator
 159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __find_if(__first, __last, __pred,
 162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		       std::__iterator_category(__first));
 163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// Provided for stable_partition to use.
 166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _InputIterator
 168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_if_not(_InputIterator __first, _InputIterator __last,
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _Predicate __pred)
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__find_if(__first, __last,
 172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__negate(__pred),
 173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    std::__iterator_category(__first));
 174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// Like find_if_not(), but uses and updates a count of the
 177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// remaining range length instead of comparing against an end
 178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// iterator.
 179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate, typename _Distance>
 180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _InputIterator
ARM GAS  /tmp/ccU23Djm.s 			page 252


 181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
 182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __len; --__len,  (void) ++__first)
 184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__pred(__first))
 185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  break;
 186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first;
 187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_difference
 190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_intersection
 191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_symmetric_difference
 192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_union
 193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // for_each
 194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // find
 195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // find_if
 196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // find_first_of
 197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // adjacent_find
 198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // count
 199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // count_if
 200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // search
 201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator1
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _BinaryPredicate  __predicate)
 208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Test for empty ranges
 210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first1 == __last1 || __first2 == __last2)
 211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first1;
 212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Test for a pattern of length 1.
 214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator2 __p1(__first2);
 215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (++__p1 == __last2)
 216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return std::__find_if(__first1, __last1,
 217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // General case.
 220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator2 __p;
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator1 __current = __first1;
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (;;)
 224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first1 =
 226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::__find_if(__first1, __last1,
 227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__first1 == __last1)
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __last1;
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __p = __p1;
 233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __current = __first1;
 234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (++__current == __last1)
 235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __last1;
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (__predicate(__current, __p))
ARM GAS  /tmp/ccU23Djm.s 			page 253


 238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
 239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (++__p == __last2)
 240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		return __first1;
 241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (++__current == __last1)
 242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		return __last1;
 243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
 244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first1;
 245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first1;
 247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // search_n
 250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for forward iterators.
 253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
 257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
 258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   std::forward_iterator_tag)
 260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __unary_pred);
 262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __last)
 263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::difference_type
 265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __n = __count;
 266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _ForwardIterator __i = __first;
 267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__i;
 268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (__i != __last && __n != 1 && __unary_pred(__i))
 269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
 270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__i;
 271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      --__n;
 272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
 273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__n == 1)
 274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__i == __last)
 276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __last;
 277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first = std::__find_if(++__i, __last, __unary_pred);
 278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __last;
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for random access
 284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  iterators.
 285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIter, typename _Integer,
 287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _RandomAccessIter
 289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
 290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   std::random_access_iterator_tag)
 292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_DistanceType;
ARM GAS  /tmp/ccU23Djm.s 			page 254


 295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _DistanceType __tailSize = __last - __first;
 297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _DistanceType __remainder = __count;
 298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__remainder <= __tailSize) // the main loop...
 300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first += __remainder;
 302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __tailSize -= __remainder;
 303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  // __first here is always pointing to one past the last element of
 304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  // next possible match.
 305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _RandomAccessIter __backTrack = __first; 
 306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (__unary_pred(--__backTrack))
 307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
 308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (--__remainder == 0)
 309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		return (__first - __count); // Success
 310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
 311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __remainder = __count + 1 - (__first - __backTrack);
 312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __last; // Failure
 314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
 319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __search_n(_ForwardIterator __first, _ForwardIterator __last,
 320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _Integer __count,
 321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _UnaryPredicate __unary_pred)
 322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 323:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__count <= 0)
 324:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
 325:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 326:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__count == 1)
 327:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return std::__find_if(__first, __last, __unary_pred);
 328:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 329:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__search_n_aux(__first, __last, __count, __unary_pred,
 330:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				 std::__iterator_category(__first));
 331:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 332:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 333:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // find_end for forward iterators.
 334:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 335:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 336:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator1
 337:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 338:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 339:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       forward_iterator_tag, forward_iterator_tag,
 340:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 341:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 342:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first2 == __last2)
 343:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last1;
 344:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 345:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator1 __result = __last1;
 346:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (1)
 347:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 348:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _ForwardIterator1 __new_result
 349:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    = std::__search(__first1, __last1, __first2, __last2, __comp);
 350:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__new_result == __last1)
 351:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __result;
ARM GAS  /tmp/ccU23Djm.s 			page 255


 352:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
 353:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
 354:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __result = __new_result;
 355:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __first1 = __new_result;
 356:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first1;
 357:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
 358:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 359:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 360:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 361:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // find_end for bidirectional iterators (much faster).
 362:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
 363:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 364:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _BidirectionalIterator1
 365:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __find_end(_BidirectionalIterator1 __first1,
 366:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _BidirectionalIterator1 __last1,
 367:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _BidirectionalIterator2 __first2,
 368:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _BidirectionalIterator2 __last2,
 369:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       bidirectional_iterator_tag, bidirectional_iterator_tag,
 370:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 371:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 372:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 373:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 374:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator1>)
 375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 376:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator2>)
 377:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 378:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
 379:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
 380:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 381:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RevIterator1 __rlast1(__first1);
 382:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RevIterator2 __rlast2(__first2);
 383:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
 384:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					      _RevIterator2(__last2), __rlast2,
 385:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					      __comp);
 386:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 387:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__rresult == __rlast1)
 388:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last1;
 389:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
 390:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 391:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _BidirectionalIterator1 __result = __rresult.base();
 392:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::advance(__result, -std::distance(__first2, __last2));
 393:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __result;
 394:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 395:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 396:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 397:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 398:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence.
 399:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 400:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 401:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 402:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 403:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 404:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   The last iterator @c i in the range
 405:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
 406:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p *(__first2+N) for each @c N in the range @p
 407:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
 408:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
ARM GAS  /tmp/ccU23Djm.s 			page 256


 409:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 410:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 411:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the __first
 412:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  element of the sub-sequence, or @p __last1 if the sub-sequence
 413:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  is not found.  The sub-sequence will be the last such
 414:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  subsequence contained in [__first1,__last1).
 415:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 416:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 417:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 418:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 419:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 420:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 421:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 422:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 423:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 424:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator1
 425:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 426:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
 427:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 428:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 429:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 430:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 431:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 432:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 433:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 434:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 435:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 436:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 437:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 438:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 439:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 440:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equal_to_iter());
 441:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 442:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 443:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 444:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence using a predicate.
 445:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 446:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 447:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 448:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 449:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 450:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    The predicate to use.
 451:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return The last iterator @c i in the range @p
 452:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c
 453:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
 454:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
 455:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  exists.
 456:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 457:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 458:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 459:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first2,__last2) using comp as a predicate and returns an
 460:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  iterator to the first element of the sub-sequence, or @p __last1
 461:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  if the sub-sequence is not found.  The sub-sequence will be the
 462:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  last such subsequence contained in [__first,__last1).
 463:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 464:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 465:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
ARM GAS  /tmp/ccU23Djm.s 			page 257


 466:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 467:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 468:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 469:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 470:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 471:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 472:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 473:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator1
 474:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 475:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 476:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _BinaryPredicate __comp)
 477:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 478:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 479:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 480:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 481:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
 482:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 483:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 484:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 485:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 486:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 487:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 488:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 489:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 490:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 491:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 492:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 493:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #if __cplusplus >= 201103L
 494:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 495:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for all the elements
 496:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          of a sequence.
 497:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 498:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 499:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 500:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 501:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 502:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 503:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Returns true if @p __pred is true for each element in the range
 504:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 505:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 506:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 507:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
 508:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 509:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return __last == std::find_if_not(__first, __last, __pred); }
 510:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 511:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 512:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for all the elements
 513:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          of a sequence.
 514:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 515:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 516:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 517:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 518:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 519:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 520:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Returns true if @p __pred is false for each element in the range
 521:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 522:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccU23Djm.s 			page 258


 523:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 524:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
 525:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 526:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 527:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 528:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 529:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for at least an element
 530:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          of a sequence.
 531:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 532:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 533:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 534:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 535:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 536:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 537:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Returns true if an element exists in the range @p
 538:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first,__last) such that @p __pred is true, and false
 539:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  otherwise.
 540:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 541:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 542:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
 543:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 544:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return !std::none_of(__first, __last, __pred); }
 545:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 546:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 547:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Find the first element in a sequence for which a
 548:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          predicate is false.
 549:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 550:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 551:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 552:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 553:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
 554:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
 555:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 556:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 557:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _InputIterator
 558:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     find_if_not(_InputIterator __first, _InputIterator __last,
 559:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		_Predicate __pred)
 560:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 561:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 562:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 563:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 564:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
 565:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 566:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__find_if_not(__first, __last,
 567:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred));
 568:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 569:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 570:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 571:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks whether the sequence is partitioned.
 572:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 573:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 574:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 575:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 576:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
 577:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  i.e. if all elements that satisfy @p __pred appear before those that
 578:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  do not.
 579:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccU23Djm.s 			page 259


 580:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 581:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
 582:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_partitioned(_InputIterator __first, _InputIterator __last,
 583:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _Predicate __pred)
 584:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 585:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first = std::find_if_not(__first, __last, __pred);
 586:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
 587:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return true;
 588:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       ++__first;
 589:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::none_of(__first, __last, __pred);
 590:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 591:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 592:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 593:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Find the partition point of a partitioned range.
 594:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 595:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
 596:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
 597:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 598:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
 599:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           and @p none_of(mid, __last, __pred) are both true.
 600:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 601:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 602:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
 603:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     partition_point(_ForwardIterator __first, _ForwardIterator __last,
 604:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _Predicate __pred)
 605:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 606:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 607:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
 608:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 609:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      typename iterator_traits<_ForwardIterator>::value_type>)
 610:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 611:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // A specific debug-mode test will be necessary...
 612:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 613:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 614:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
 615:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_DistanceType;
 616:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 617:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
 618:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _DistanceType __half;
 619:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __middle;
 620:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 621:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__len > 0)
 622:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 623:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __half = __len >> 1;
 624:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __middle = __first;
 625:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::advance(__middle, __half);
 626:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__pred(*__middle))
 627:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
 628:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __first = __middle;
 629:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first;
 630:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len = __len - __half - 1;
 631:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
 632:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
 633:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __len = __half;
 634:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 635:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first;
 636:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 260


 637:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #endif
 638:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 639:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 640:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Predicate>
 641:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
 642:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __remove_copy_if(_InputIterator __first, _InputIterator __last,
 643:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _OutputIterator __result, _Predicate __pred)
 644:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 645:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 646:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__pred(__first))
 647:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
 648:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *__result = *__first;
 649:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__result;
 650:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
 651:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result;
 652:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 653:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 654:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 655:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements of a given value.
 656:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 657:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 658:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 659:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 660:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __value   The value to be removed.
 661:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 662:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 663:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) not equal
 664:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  to @p __value to the range beginning at @p __result.
 665:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  remove_copy() is stable, so the relative order of elements that
 666:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  are copied is unchanged.
 667:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 668:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
 669:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
 670:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     remove_copy(_InputIterator __first, _InputIterator __last,
 671:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		_OutputIterator __result, const _Tp& __value)
 672:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 673:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 674:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 675:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 676:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 677:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 678:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
 679:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 680:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 681:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 682:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	__gnu_cxx::__ops::__iter_equals_val(__value));
 683:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 684:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 685:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 686:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements for which a predicate is true.
 687:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 688:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 689:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 690:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 691:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 692:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 693:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
ARM GAS  /tmp/ccU23Djm.s 			page 261


 694:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 695:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p __pred returns false to the range beginning at @p __result.
 696:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 697:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  remove_copy_if() is stable, so the relative order of elements that are
 698:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  copied is unchanged.
 699:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 700:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 701:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Predicate>
 702:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
 703:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     remove_copy_if(_InputIterator __first, _InputIterator __last,
 704:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _OutputIterator __result, _Predicate __pred)
 705:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 706:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 707:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 708:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 709:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 710:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 711:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 712:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 713:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 714:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 715:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__pred_iter(__pred));
 716:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 717:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 718:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #if __cplusplus >= 201103L
 719:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 720:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence for which a predicate is true.
 721:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 722:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 723:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 725:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 726:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 727:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 728:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 729:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p __result.
 730:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 731:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  copy_if() is stable, so the relative order of elements that are
 732:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  copied is unchanged.
 733:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 734:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 735:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Predicate>
 736:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
 737:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     copy_if(_InputIterator __first, _InputIterator __last,
 738:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    _OutputIterator __result, _Predicate __pred)
 739:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 740:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 741:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 742:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 743:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 744:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 745:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 746:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 747:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 748:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 749:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__pred(*__first))
 750:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
ARM GAS  /tmp/ccU23Djm.s 			page 262


 751:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *__result = *__first;
 752:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__result;
 753:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
 754:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result;
 755:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 756:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 757:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 758:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
 759:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __copy_n(_InputIterator __first, _Size __n,
 760:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _OutputIterator __result, input_iterator_tag)
 761:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 762:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__n > 0)
 763:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 764:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (true)
 765:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
 766:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *__result = *__first;
 767:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__result;
 768:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (--__n > 0)
 769:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		++__first;
 770:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      else
 771:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		break;
 772:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
 773:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 774:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result;
 775:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 776:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 777:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size,
 778:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _OutputIterator>
 779:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
 780:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __copy_n(_RandomAccessIterator __first, _Size __n,
 781:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _OutputIterator __result, random_access_iterator_tag)
 782:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return std::copy(__first, __first + __n, __result); }
 783:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 784:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 785:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copies the range [first,first+n) into [result,result+n).
 786:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 787:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 788:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __n      The number of elements to copy.
 789:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result An output iterator.
 790:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  result+n.
 791:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 792:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This inline function will boil down to a call to @c memmove whenever
 793:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 794:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  loop count will be known (and therefore a candidate for compiler
 795:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  optimizations such as unrolling).
 796:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 797:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 798:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
 799:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
 800:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 801:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 802:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 803:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 804:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 805:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 806:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__copy_n(__first, __n, __result,
 807:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   std::__iterator_category(__first));
ARM GAS  /tmp/ccU23Djm.s 			page 263


 808:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 809:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 810:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 811:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence to separate output sequences
 812:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         depending on the truth value of a predicate.
 813:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 814:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 815:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 816:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __out_true   An output iterator.
 817:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __out_false  An output iterator.
 818:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 819:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   A pair designating the ends of the resulting sequences.
 820:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 821:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 822:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p out_true
 823:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  and each element for which @p __pred returns false to @p __out_false.
 824:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 825:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator1,
 826:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _OutputIterator2, typename _Predicate>
 827:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     pair<_OutputIterator1, _OutputIterator2>
 828:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     partition_copy(_InputIterator __first, _InputIterator __last,
 829:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _OutputIterator1 __out_true, _OutputIterator2 __out_false,
 830:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _Predicate __pred)
 831:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 832:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 833:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 834:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,
 835:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 836:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,
 837:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 838:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 839:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 840:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 841:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       
 842:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 843:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__pred(*__first))
 844:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
 845:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *__out_true = *__first;
 846:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__out_true;
 847:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
 848:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	else
 849:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
 850:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *__out_false = *__first;
 851:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__out_false;
 852:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
 853:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 854:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
 855:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 856:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #endif
 857:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 858:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 859:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
 860:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 861:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		_Predicate __pred)
 862:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 863:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __pred);
 864:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
ARM GAS  /tmp/ccU23Djm.s 			page 264


 865:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
 866:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __result = __first;
 867:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       ++__first;
 868:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 869:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__pred(__first))
 870:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
 871:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *__result = _GLIBCXX_MOVE(*__first);
 872:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__result;
 873:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
 874:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result;
 875:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 876:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 877:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 878:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Remove elements from a sequence.
 879:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 880:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 881:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 882:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __value  The value to be removed.
 883:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 884:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 885:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  All elements equal to @p __value are removed from the range
 886:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first,__last).
 887:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 888:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  remove() is stable, so the relative order of elements that are
 889:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  not removed is unchanged.
 890:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 891:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 892:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 893:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 894:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
 895:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
 896:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     remove(_ForwardIterator __first, _ForwardIterator __last,
 897:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   const _Tp& __value)
 898:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 899:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 900:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 901:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _ForwardIterator>)
 902:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 903:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
 904:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 905:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 906:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 907:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_equals_val(__value));
 908:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 909:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 910:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 911:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Remove elements from a sequence using a predicate.
 912:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 913:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 914:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 915:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 916:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 917:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 918:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  All elements for which @p __pred returns true are removed from the range
 919:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first,__last).
 920:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 921:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  remove_if() is stable, so the relative order of elements that are
ARM GAS  /tmp/ccU23Djm.s 			page 265


 922:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  not removed is unchanged.
 923:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 924:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 925:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 926:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 927:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 928:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
 929:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     remove_if(_ForwardIterator __first, _ForwardIterator __last,
 930:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _Predicate __pred)
 931:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 932:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 933:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 934:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _ForwardIterator>)
 935:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 936:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
 937:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 938:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 939:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 940:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__pred_iter(__pred));
 941:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 942:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 943:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 944:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
 945:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
 946:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _BinaryPredicate __binary_pred)
 947:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 948:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
 949:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last;
 950:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __next = __first;
 951:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (++__next != __last)
 952:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
 953:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__binary_pred(__first, __next))
 954:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
 955:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first = __next;
 956:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
 957:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __last;
 958:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 959:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 960:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 961:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
 962:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unique(_ForwardIterator __first, _ForwardIterator __last,
 963:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
 964:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 965:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Skip the beginning, if already unique.
 966:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first = std::__adjacent_find(__first, __last, __binary_pred);
 967:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
 968:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last;
 969:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
 970:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Do the real copy work.
 971:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __dest = __first;
 972:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       ++__first;
 973:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (++__first != __last)
 974:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__binary_pred(__dest, __first))
 975:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *++__dest = _GLIBCXX_MOVE(*__first);
 976:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return ++__dest;
 977:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 978:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 266


 979:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
 980:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Remove consecutive duplicate values from a sequence.
 981:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 982:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 983:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 984:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 985:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
 986:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 987:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  values that compare equal.
 988:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 989:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  not removed is unchanged.
 990:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 991:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 992:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
 993:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator>
 994:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
 995:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last)
 996:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
 997:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
 998:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 999:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _ForwardIterator>)
1000:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
1001:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     typename iterator_traits<_ForwardIterator>::value_type>)
1002:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1003:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1004:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__unique(__first, __last,
1005:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
1006:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1007:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1008:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1009:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Remove consecutive values from a sequence using a predicate.
1010:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1011:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
1012:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
1013:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
1014:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1015:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1016:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
1017:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  values for which @p __binary_pred returns true.
1018:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
1019:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  not removed is unchanged.
1020:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
1021:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
1022:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1023:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
1024:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
1025:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last,
1026:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   _BinaryPredicate __binary_pred)
1027:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1028:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1029:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1030:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _ForwardIterator>)
1031:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1032:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type,
1033:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1034:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1035:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 267


1036:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__unique(__first, __last,
1037:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
1038:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1039:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1040:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1041:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an uglified
1042:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1043:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *              _BinaryPredicate)
1044:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  overloaded for forward iterators and output iterator as result.
1045:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1046:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator,
1047:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1048:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
1049:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
1050:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1051:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  forward_iterator_tag, output_iterator_tag)
1052:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1053:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1054:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1055:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1056:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type>)
1057:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1058:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1059:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       *__result = *__first;
1060:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (++__next != __last)
1061:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__binary_pred(__first, __next))
1062:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
1063:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __first = __next;
1064:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *++__result = *__first;
1065:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
1066:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return ++__result;
1067:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1068:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1069:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1070:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an uglified
1071:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1072:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *              _BinaryPredicate)
1073:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  overloaded for input iterators and output iterator as result.
1074:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1075:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
1076:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1077:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
1078:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1079:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1080:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  input_iterator_tag, output_iterator_tag)
1081:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1082:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1083:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1084:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type,
1085:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1086:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1087:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::value_type __value = *__first;
1088:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
1089:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	__rebound_pred
1090:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	= __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
1091:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       *__result = __value;
1092:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (++__first != __last)
ARM GAS  /tmp/ccU23Djm.s 			page 268


1093:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__rebound_pred(__first, __value))
1094:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
1095:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __value = *__first;
1096:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    *++__result = __value;
1097:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
1098:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return ++__result;
1099:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an uglified
1103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *              _BinaryPredicate)
1105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  overloaded for input iterators and forward iterator as result.
1106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
1108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
1110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _ForwardIterator __result, _BinaryPredicate __binary_pred,
1112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  input_iterator_tag, forward_iterator_tag)
1113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       *__result = *__first;
1119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (++__first != __last)
1120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__binary_pred(__result, __first))
1121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *++__result = *__first;
1122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return ++__result;
1123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  overloaded for bidirectional iterators.
1129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
1133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (true)
1136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__first == __last || __first == --__last)
1137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return;
1138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	else
1139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
1140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::iter_swap(__first, __last);
1141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__first;
1142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
1143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  overloaded for random access iterators.
1149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccU23Djm.s 			page 269


1150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
1153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      random_access_iterator_tag)
1154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
1156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return;
1157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       --__last;
1158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first < __last)
1159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__last;
1163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Reverse a sequence.
1168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  A bidirectional iterator.
1170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   A bidirectional iterator.
1171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   reverse() returns no value.
1172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Reverses the order of the elements in the range @p [__first,__last),
1174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  so that the first element becomes the last etc.
1175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
1176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  swaps @p *(__first+i) and @p *(__last-(i+1))
1177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline void
1180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
1181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__reverse(__first, __last, std::__iterator_category(__first));
1187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy a sequence, reversing its elements.
1191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   A bidirectional iterator.
1193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    A bidirectional iterator.
1194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies the elements in the range @p [__first,__last) to the
1198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  range @p [__result,__result+(__last-__first)) such that the
1199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  order of the elements is reversed.  For every @c i such that @p
1200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  0<=i<=(__last-__first), @p reverse_copy() performs the
1201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
1202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The ranges @p [__first,__last) and @p
1203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__result,__result+(__last-__first)) must not overlap.
1204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _OutputIterator>
1206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
ARM GAS  /tmp/ccU23Djm.s 			page 270


1207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
1208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		 _OutputIterator __result)
1209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
1212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		typename iterator_traits<_BidirectionalIterator>::value_type>)
1215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __last)
1218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__last;
1220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *__result = *__last;
1221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__result;
1222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result;
1224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is a helper function for the rotate algorithm specialized on RAIs.
1228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  It returns the greatest common divisor of two integer values.
1229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _EuclideanRingElement>
1231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _EuclideanRingElement
1232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
1233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__n != 0)
1235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _EuclideanRingElement __t = __m % __n;
1237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __m = __n;
1238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __n = __t;
1239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __m;
1241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   inline namespace _V2
1244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   {
1245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator>
1248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
1249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __rotate(_ForwardIterator __first,
1250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _ForwardIterator __middle,
1251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _ForwardIterator __last,
1252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     forward_iterator_tag)
1253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __middle)
1255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last;
1256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__last == __middle)
1257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
1258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __first2 = __middle;
1260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       do
1261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
ARM GAS  /tmp/ccU23Djm.s 			page 271


1264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first2;
1265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__first == __middle)
1266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __middle = __first2;
1267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first2 != __last);
1269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __ret = __first;
1271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first2 = __middle;
1273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first2 != __last)
1275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first2;
1279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__first == __middle)
1280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __middle = __first2;
1281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else if (__first2 == __last)
1282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __first2 = __middle;
1283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __ret;
1285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    /// This is a helper function for the rotate algorithm.
1288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _BidirectionalIterator
1290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __rotate(_BidirectionalIterator __first,
1291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _BidirectionalIterator __middle,
1292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _BidirectionalIterator __last,
1293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __middle)
1300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last;
1301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__last == __middle)
1302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
1303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __middle && __middle != __last)
1308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::iter_swap(__first, --__last);
1310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __middle)
1314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __last;
1317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
1319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__reverse(__first,  __middle, bidirectional_iterator_tag());
ARM GAS  /tmp/ccU23Djm.s 			page 272


1321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __first;
1322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1323:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1324:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1325:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1326:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1327:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _RandomAccessIterator
1328:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __rotate(_RandomAccessIterator __first,
1329:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _RandomAccessIterator __middle,
1330:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _RandomAccessIterator __last,
1331:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     random_access_iterator_tag)
1332:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1333:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1334:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1335:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1336:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1337:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __middle)
1338:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last;
1339:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__last == __middle)
1340:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
1341:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1342:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
1343:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Distance;
1344:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1345:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_ValueType;
1346:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1347:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Distance __n = __last   - __first;
1348:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Distance __k = __middle - __first;
1349:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1350:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__k == __n - __k)
1351:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1352:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::swap_ranges(__first, __middle, __middle);
1353:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __middle;
1354:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1355:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1356:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RandomAccessIterator __p = __first;
1357:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RandomAccessIterator __ret = __first + (__last - __middle);
1358:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1359:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (;;)
1360:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1361:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__k < __n - __k)
1362:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
1363:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1364:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{
1365:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*__p);
1366:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
1367:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
1368:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  return __ret;
1369:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		}
1370:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __k;
1371:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1372:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{
1373:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1374:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  ++__p;
1375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  ++__q;
1376:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		}
1377:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __n %= __k;
ARM GAS  /tmp/ccU23Djm.s 			page 273


1378:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__n == 0)
1379:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		return __ret;
1380:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::swap(__n, __k);
1381:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __k = __n - __k;
1382:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
1383:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
1384:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
1385:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __k = __n - __k;
1386:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1387:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{
1388:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
1389:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
1390:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  *__p = _GLIBCXX_MOVE(__t);
1391:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  return __ret;
1392:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		}
1393:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __n;
1394:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __p = __q - __k;
1395:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1396:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{
1397:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  --__p;
1398:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  --__q;
1399:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1400:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		}
1401:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __n %= __k;
1402:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__n == 0)
1403:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		return __ret;
1404:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::swap(__n, __k);
1405:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
1406:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1407:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1408:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1409:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
1410:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    // DR 488. rotate throws away useful information
1411:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1412:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Rotate the elements of a sequence.
1413:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1414:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1415:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1416:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1417:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  first + (last - middle).
1418:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1419:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Rotates the elements of the range @p [__first,__last) by 
1420:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p (__middle - __first) positions so that the element at @p __middle
1421:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  is moved to @p __first, the element at @p __middle+1 is moved to
1422:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p __first+1 and so on for each element in the range
1423:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first,__last).
1424:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1425:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This effectively swaps the ranges @p [__first,__middle) and
1426:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__middle,__last).
1427:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1428:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Performs
1429:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1430:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1431:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1432:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator>
1433:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
1434:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     rotate(_ForwardIterator __first, _ForwardIterator __middle,
ARM GAS  /tmp/ccU23Djm.s 			page 274


1435:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   _ForwardIterator __last)
1436:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1437:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1438:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1439:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _ForwardIterator>)
1440:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1441:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1442:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1443:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__rotate(__first, __middle, __last,
1444:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   std::__iterator_category(__first));
1445:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1446:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1447:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   } // namespace _V2
1448:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1449:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1450:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy a sequence, rotating its elements.
1451:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1452:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1453:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1454:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1455:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1456:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
1457:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1458:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies the elements of the range @p [__first,__last) to the
1459:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  range beginning at @result, rotating the copied elements by 
1460:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p (__middle-__first) positions so that the element at @p __middle
1461:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  is moved to @p __result, the element at @p __middle+1 is moved
1462:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  to @p __result+1 and so on for each element in the range @p
1463:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first,__last).
1464:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1465:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Performs 
1466:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1467:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1468:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1469:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator>
1470:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
1471:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
1472:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		_ForwardIterator __last, _OutputIterator __result)
1473:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1474:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1475:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
1476:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1477:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1478:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1479:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1480:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1481:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::copy(__first, __middle,
1482:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		       std::copy(__middle, __last, __result));
1483:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1484:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1485:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function...
1486:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1487:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
1488:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __partition(_ForwardIterator __first, _ForwardIterator __last,
1489:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		_Predicate __pred, forward_iterator_tag)
1490:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1491:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
ARM GAS  /tmp/ccU23Djm.s 			page 275


1492:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
1493:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1494:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__pred(*__first))
1495:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (++__first == __last)
1496:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __first;
1497:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1498:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1499:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1500:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (++__next != __last)
1501:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__pred(*__next))
1502:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
1503:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::iter_swap(__first, __next);
1504:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__first;
1505:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
1506:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1507:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first;
1508:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1509:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1510:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function...
1511:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Predicate>
1512:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _BidirectionalIterator
1513:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
1514:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		_Predicate __pred, bidirectional_iterator_tag)
1515:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1516:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (true)
1517:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1518:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (true)
1519:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    if (__first == __last)
1520:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return __first;
1521:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    else if (__pred(*__first))
1522:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first;
1523:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    else
1524:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      break;
1525:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__last;
1526:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (true)
1527:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    if (__first == __last)
1528:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return __first;
1529:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    else if (!bool(__pred(*__last)))
1530:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      --__last;
1531:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    else
1532:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      break;
1533:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1534:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1535:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1536:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1537:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1538:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // partition
1539:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1540:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function...
1541:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// Requires __first != __last and !__pred(__first)
1542:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// and __len == distance(__first, __last).
1543:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   ///
1544:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// !__pred(__first) allows us to guarantee that we don't
1545:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// move-assign an element onto itself.
1546:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
1547:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Distance>
1548:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
ARM GAS  /tmp/ccU23Djm.s 			page 276


1549:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __stable_partition_adaptive(_ForwardIterator __first,
1550:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				_ForwardIterator __last,
1551:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				_Predicate __pred, _Distance __len,
1552:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				_Pointer __buffer,
1553:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				_Distance __buffer_size)
1554:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1555:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len == 1)
1556:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
1557:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1558:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len <= __buffer_size)
1559:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1560:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _ForwardIterator __result1 = __first;
1561:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _Pointer __result2 = __buffer;
1562:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1563:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  // The precondition guarantees that !__pred(__first), so
1564:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  // move that element to the buffer before starting the loop.
1565:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  // This ensures that we only call __pred once per element.
1566:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *__result2 = _GLIBCXX_MOVE(*__first);
1567:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__result2;
1568:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1569:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  for (; __first != __last; ++__first)
1570:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    if (__pred(__first))
1571:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      {
1572:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		*__result1 = _GLIBCXX_MOVE(*__first);
1573:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		++__result1;
1574:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      }
1575:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    else
1576:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      {
1577:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		*__result2 = _GLIBCXX_MOVE(*__first);
1578:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		++__result2;
1579:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      }
1580:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1581:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _GLIBCXX_MOVE3(__buffer, __result2, __result1);
1582:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __result1;
1583:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1584:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1585:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __middle = __first;
1586:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::advance(__middle, __len / 2);
1587:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __left_split =
1588:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __middle, __pred,
1589:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					 __len / 2, __buffer,
1590:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					 __buffer_size);
1591:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1592:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Advance past true-predicate values to satisfy this
1593:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // function's preconditions.
1594:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Distance __right_len = __len - __len / 2;
1595:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __right_split =
1596:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__find_if_not_n(__middle, __right_len, __pred);
1597:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1598:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__right_len)
1599:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	__right_split =
1600:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__stable_partition_adaptive(__right_split, __last, __pred,
1601:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					   __right_len,
1602:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					   __buffer, __buffer_size);
1603:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1604:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::rotate(__left_split, __middle, __right_split);
1605:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 277


1606:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1607:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1608:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
1609:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1610:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		       _Predicate __pred)
1611:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1612:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first = std::__find_if_not(__first, __last, __pred);
1613:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1614:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
1615:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __first;
1616:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1617:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1618:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_ValueType;
1619:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
1620:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_DistanceType;
1621:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1622:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Temporary_buffer<_ForwardIterator, _ValueType>
1623:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	__buf(__first, std::distance(__first, __last));
1624:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return
1625:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __last, __pred,
1626:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					 _DistanceType(__buf.requested_size()),
1627:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					 __buf.begin(),
1628:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					 _DistanceType(__buf.size()));
1629:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1630:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1631:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1632:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Move elements for which a predicate is true to the beginning
1633:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         of a sequence, preserving relative ordering.
1634:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1635:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1636:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1637:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A predicate functor.
1638:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator @p middle such that @p __pred(i) is true for each
1639:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  iterator @p i in the range @p [first,middle) and false for each @p i
1640:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  in the range @p [middle,last).
1641:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1642:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Performs the same function as @p partition() with the additional
1643:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  guarantee that the relative ordering of elements in each group is
1644:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  preserved, so any two elements @p x and @p y in the range
1645:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
1646:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  relative ordering after calling @p stable_partition().
1647:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1648:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1649:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
1650:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1651:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _Predicate __pred)
1652:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1653:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1654:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1655:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _ForwardIterator>)
1656:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
1657:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
1658:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1659:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1660:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__stable_partition(__first, __last,
1661:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__pred_iter(__pred));
1662:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 278


1663:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1664:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the sort routines.
1665:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1666:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1667:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __heap_select(_RandomAccessIterator __first,
1668:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _RandomAccessIterator __middle,
1669:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Compare __comp)
1670:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1671:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__make_heap(__first, __middle, __comp);
1672:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
1673:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__comp(__i, __first))
1674:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__pop_heap(__first, __middle, __i, __comp);
1675:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1676:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1677:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // partial_sort
1678:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1679:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1680:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
1681:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _RandomAccessIterator
1682:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __partial_sort_copy(_InputIterator __first, _InputIterator __last,
1683:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			_RandomAccessIterator __result_first,
1684:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			_RandomAccessIterator __result_last,
1685:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			_Compare __comp)
1686:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1687:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1688:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_InputValueType;
1689:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef iterator_traits<_RandomAccessIterator> _RItTraits;
1690:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename _RItTraits::difference_type _DistanceType;
1691:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1692:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__result_first == __result_last)
1693:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __result_last;
1694:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RandomAccessIterator __result_real_last = __result_first;
1695:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __last && __result_real_last != __result_last)
1696:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1697:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *__result_real_last = *__first;
1698:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__result_real_last;
1699:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1700:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1701:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       
1702:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__make_heap(__result_first, __result_real_last, __comp);
1703:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __last)
1704:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1705:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__first, __result_first))
1706:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::__adjust_heap(__result_first, _DistanceType(0),
1707:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			       _DistanceType(__result_real_last
1708:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					     - __result_first),
1709:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			       _InputValueType(*__first), __comp);
1710:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1711:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1712:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__sort_heap(__result_first, __result_real_last, __comp);
1713:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result_real_last;
1714:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1715:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1716:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1717:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence.
1718:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1719:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
ARM GAS  /tmp/ccU23Djm.s 			page 279


1720:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
1721:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1722:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1723:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1725:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1726:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  to the range beginning at @p __result_first, where the number of
1727:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1728:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1729:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1730:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1731:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  *j<*i is false.
1732:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1733:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1734:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator>
1735:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _RandomAccessIterator
1736:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1737:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1738:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last)
1739:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1740:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1741:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1742:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_InputValueType;
1743:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1744:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_OutputValueType;
1745:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #endif
1746:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1747:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1748:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1749:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1750:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _OutputValueType>)
1751:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,
1752:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						     _OutputValueType>)
1753:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)
1754:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1755:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
1756:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1757:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1758:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1759:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				      __result_first, __result_last,
1760:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				      __gnu_cxx::__ops::__iter_less_iter());
1761:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1762:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1763:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1764:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence using a predicate for
1765:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         comparison.
1766:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1767:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An input iterator.
1768:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another input iterator.
1769:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1770:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1771:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
1772:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1773:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
1774:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1775:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  to the range beginning at @p result_first, where the number of
1776:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
ARM GAS  /tmp/ccU23Djm.s 			page 280


1777:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1778:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1779:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1780:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p __comp(*j,*i) is false.
1781:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1782:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1783:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1784:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
1785:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _RandomAccessIterator
1786:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1787:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1788:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last,
1789:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _Compare __comp)
1790:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1791:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1792:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1793:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_InputValueType;
1794:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1795:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_OutputValueType;
1796:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #endif
1797:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1798:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
1799:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1800:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1801:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1802:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1803:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _OutputValueType>)
1804:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1805:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _InputValueType, _OutputValueType>)
1806:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1807:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _OutputValueType, _OutputValueType>)
1808:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1809:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
1810:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1811:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1812:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1813:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				      __result_first, __result_last,
1814:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
1815:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1816:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1817:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1818:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1819:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1820:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unguarded_linear_insert(_RandomAccessIterator __last,
1821:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			      _Compare __comp)
1822:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1823:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::value_type
1824:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	__val = _GLIBCXX_MOVE(*__last);
1825:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
1826:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       --__next;
1827:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__comp(__val, __next))
1828:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1829:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *__last = _GLIBCXX_MOVE(*__next);
1830:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __last = __next;
1831:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__next;
1832:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1833:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       *__last = _GLIBCXX_MOVE(__val);
ARM GAS  /tmp/ccU23Djm.s 			page 281


1834:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1835:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1836:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1837:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1838:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1839:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __insertion_sort(_RandomAccessIterator __first,
1840:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _RandomAccessIterator __last, _Compare __comp)
1841:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1842:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last) return;
1843:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1844:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1845:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1846:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__i, __first))
1847:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
1848:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      typename iterator_traits<_RandomAccessIterator>::value_type
1849:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__val = _GLIBCXX_MOVE(*__i);
1850:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1851:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *__first = _GLIBCXX_MOVE(__val);
1852:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
1853:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
1854:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::__unguarded_linear_insert(__i,
1855:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1856:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1857:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1858:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1859:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1860:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1861:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline void
1862:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unguarded_insertion_sort(_RandomAccessIterator __first,
1863:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			       _RandomAccessIterator __last, _Compare __comp)
1864:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1865:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
1866:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
1867:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1868:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1869:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1870:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
1871:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @doctodo
1872:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This controls some aspect of the sort routines.
1873:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
1874:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   enum { _S_threshold = 16 };
1875:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1876:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1877:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1878:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1879:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __final_insertion_sort(_RandomAccessIterator __first,
1880:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _RandomAccessIterator __last, _Compare __comp)
1881:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1882:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__last - __first > int(_S_threshold))
1883:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1884:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
1885:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
1886:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					  __comp);
1887:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1888:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
1889:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__insertion_sort(__first, __last, __comp);
1890:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 282


1891:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1892:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function...
1893:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1894:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _RandomAccessIterator
1895:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unguarded_partition(_RandomAccessIterator __first,
1896:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			  _RandomAccessIterator __last,
1897:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			  _RandomAccessIterator __pivot, _Compare __comp)
1898:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1899:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (true)
1900:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1901:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (__comp(__first, __pivot))
1902:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__first;
1903:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__last;
1904:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  while (__comp(__pivot, __last))
1905:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    --__last;
1906:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (!(__first < __last))
1907:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
1908:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1909:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
1910:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1911:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1912:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1913:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function...
1914:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1915:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _RandomAccessIterator
1916:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __unguarded_partition_pivot(_RandomAccessIterator __first,
1917:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				_RandomAccessIterator __last, _Compare __comp)
1918:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1919:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RandomAccessIterator __mid = __first + (__last - __first) / 2;
1920:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
1921:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  __comp);
1922:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
1923:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1924:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1925:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1926:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline void
1927:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __partial_sort(_RandomAccessIterator __first,
1928:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _RandomAccessIterator __middle,
1929:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _RandomAccessIterator __last,
1930:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _Compare __comp)
1931:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1932:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__heap_select(__first, __middle, __last, __comp);
1933:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__sort_heap(__first, __middle, __comp);
1934:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1935:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1936:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1937:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1938:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1939:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __introsort_loop(_RandomAccessIterator __first,
1940:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
1941:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _Size __depth_limit, _Compare __comp)
1942:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1943:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__last - __first > int(_S_threshold))
1944:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1945:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1946:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
1947:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__partial_sort(__first, __last, __last, __comp);
ARM GAS  /tmp/ccU23Djm.s 			page 283


1948:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return;
1949:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
1950:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__depth_limit;
1951:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1952:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1953:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
1954:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __last = __cut;
1955:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1956:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1957:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1958:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // sort
1959:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1960:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1961:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline void
1962:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
1963:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   _Compare __comp)
1964:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1965:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first != __last)
1966:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1967:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__introsort_loop(__first, __last,
1968:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				std::__lg(__last - __first) * 2,
1969:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__comp);
1970:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__final_insertion_sort(__first, __last, __comp);
1971:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1972:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1973:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
1974:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1975:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
1976:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
1977:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Size __depth_limit,
1978:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _Compare __comp)
1979:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
1980:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__last - __first > 3)
1981:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
1982:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1983:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
1984:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__heap_select(__first, __nth + 1, __last, __comp);
1985:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      // Place the nth largest element in its final position.
1986:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::iter_swap(__first, __nth);
1987:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return;
1988:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
1989:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__depth_limit;
1990:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1991:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1992:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__cut <= __nth)
1993:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __first = __cut;
1994:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
1995:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __last = __cut;
1996:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
1997:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
1998:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
1999:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2000:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // nth_element
2001:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2002:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // lower_bound moved to stl_algobase.h
2003:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2004:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccU23Djm.s 			page 284


2005:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Finds the first position in which @p __val could be inserted
2006:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         without changing the ordering.
2007:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2008:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2009:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2010:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2011:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2012:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return An iterator pointing to the first element <em>not less
2013:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           than</em> @p __val, or end() if every element is less
2014:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           than @p __val.
2015:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2016:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2017:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2018:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  the function used for the initial sort.
2019:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2020:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2021:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
2022:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     lower_bound(_ForwardIterator __first, _ForwardIterator __last,
2023:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2024:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2025:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2026:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2027:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2028:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2029:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2030:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						__val, __comp);
2031:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2032:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__lower_bound(__first, __last, __val,
2033:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp));
2034:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2035:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2036:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2037:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
2038:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2039:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2040:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2041:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2042:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_DistanceType;
2043:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2044:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2045:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2046:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__len > 0)
2047:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2048:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2049:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2050:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2051:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__val, __middle))
2052:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __len = __half;
2053:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2054:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2055:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __first = __middle;
2056:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first;
2057:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2058:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2059:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2060:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first;
2061:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 285


2062:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2063:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2064:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2065:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         without changing the ordering.
2066:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2067:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2068:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2069:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2070:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2071:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2072:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2073:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2074:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2075:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
2076:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2077:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		const _Tp& __val)
2078:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2079:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2080:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2081:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2082:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2083:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2084:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2085:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2086:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2087:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2088:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2089:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2090:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2091:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         without changing the ordering.
2092:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2093:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2094:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2095:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2096:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2097:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2098:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2099:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  the function used for the initial sort.
2103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
2106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						__val, __comp);
2115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccU23Djm.s 			page 286


2119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp,
2121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _CompareItTp, typename _CompareTpIt>
2122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
2123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __equal_range(_ForwardIterator __first, _ForwardIterator __last,
2124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  const _Tp& __val,
2125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
2126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_DistanceType;
2129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__len > 0)
2133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp_it_val(__middle, __val))
2138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __first = __middle;
2140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first;
2141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else if (__comp_val_it(__val, __middle))
2144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    __len = __half;
2145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _ForwardIterator __left
2148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		= std::__lower_bound(__first, __middle, __val, __comp_it_val);
2149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::advance(__first, __len);
2150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _ForwardIterator __right
2151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
2152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
2153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
2156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is equivalent to
2169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @code
2170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val),
2171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val))
2172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @endcode
2173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  but does not actually call those functions.
2174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
ARM GAS  /tmp/ccU23Djm.s 			page 287


2176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		const _Tp& __val)
2179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_less_val(),
2191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This is equivalent to
2205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @code
2206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val, __comp),
2207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val, __comp))
2208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @endcode
2209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  but does not actually call those functions.
2210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						__val, __comp);
2224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						__val, __comp);
2226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp),
2229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccU23Djm.s 			page 288


2233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return True if @p __val (or its equivalent) is in [@p
2239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  __first,@p __last ].
2240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
2246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  const _Tp& __val)
2248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __i
2257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_val());
2259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __i != __last && !(__val < *__i);
2260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val     The search term.
2268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
2270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  the function used for the initial sort.
2276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
2279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						__val, __comp);
2288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 						__val, __comp);
ARM GAS  /tmp/ccU23Djm.s 			page 289


2290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __i
2292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_val(__comp));
2294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __i != __last && !bool(__comp(__val, *__i));
2295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // merge
2298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _OutputIterator, typename _Compare>
2302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
2304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			  _InputIterator2 __first2, _InputIterator2 __last2,
2305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			  _OutputIterator __result, _Compare __comp)
2306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first2;
2313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first1;
2318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__result;
2320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first1 != __last1)
2322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_GLIBCXX_MOVE3(__first1, __last1, __result);
2323:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2324:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2325:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2326:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2327:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BidirectionalIterator3, typename _Compare>
2328:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2329:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
2330:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   _BidirectionalIterator1 __last1,
2331:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   _BidirectionalIterator2 __first2,
2332:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   _BidirectionalIterator2 __last2,
2333:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   _BidirectionalIterator3 __result,
2334:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   _Compare __comp)
2335:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2336:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first1 == __last1)
2337:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2338:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);
2339:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return;
2340:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2341:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__first2 == __last2)
2342:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return;
2343:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2344:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       --__last1;
2345:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       --__last2;
2346:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (true)
ARM GAS  /tmp/ccU23Djm.s 			page 290


2347:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2348:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__last2, __last1))
2349:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2350:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last1);
2351:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__first1 == __last1)
2352:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{
2353:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);
2354:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  return;
2355:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		}
2356:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      --__last1;
2357:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2358:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2359:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2360:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last2);
2361:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__first2 == __last2)
2362:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		return;
2363:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      --__last2;
2364:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2365:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2366:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2367:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2368:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2369:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2370:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Distance>
2371:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _BidirectionalIterator1
2372:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __rotate_adaptive(_BidirectionalIterator1 __first,
2373:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _BidirectionalIterator1 __middle,
2374:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _BidirectionalIterator1 __last,
2375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _Distance __len1, _Distance __len2,
2376:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _BidirectionalIterator2 __buffer,
2377:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _Distance __buffer_size)
2378:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2379:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _BidirectionalIterator2 __buffer_end;
2380:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len1 > __len2 && __len2 <= __buffer_size)
2381:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2382:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__len2)
2383:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2384:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2385:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);
2386:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);
2387:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2388:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2389:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __first;
2390:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2391:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__len1 <= __buffer_size)
2392:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2393:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__len1)
2394:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2395:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2396:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _GLIBCXX_MOVE3(__middle, __last, __first);
2397:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);
2398:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2399:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2400:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return __last;
2401:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2402:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
2403:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return std::rotate(__first, __middle, __last);
ARM GAS  /tmp/ccU23Djm.s 			page 291


2404:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2405:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2406:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2407:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance, 
2408:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Pointer, typename _Compare>
2409:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2410:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __merge_adaptive(_BidirectionalIterator __first,
2411:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BidirectionalIterator __middle,
2412:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BidirectionalIterator __last,
2413:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _Distance __len1, _Distance __len2,
2414:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _Pointer __buffer, _Distance __buffer_size,
2415:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _Compare __comp)
2416:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2417:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len1 <= __len2 && __len1 <= __buffer_size)
2418:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2419:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2420:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
2421:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __first, __comp);
2422:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2423:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else if (__len2 <= __buffer_size)
2424:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2425:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2426:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__move_merge_adaptive_backward(__first, __middle, __buffer,
2427:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					      __buffer_end, __last, __comp);
2428:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2429:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
2430:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2431:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _BidirectionalIterator __first_cut = __first;
2432:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _BidirectionalIterator __second_cut = __middle;
2433:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _Distance __len11 = 0;
2434:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _Distance __len22 = 0;
2435:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__len1 > __len2)
2436:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2437:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len11 = __len1 / 2;
2438:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::advance(__first_cut, __len11);
2439:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __second_cut
2440:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		= std::__lower_bound(__middle, __last, *__first_cut,
2441:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_comp_val(__comp));
2442:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len22 = std::distance(__middle, __second_cut);
2443:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2444:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2445:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2446:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len22 = __len2 / 2;
2447:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::advance(__second_cut, __len22);
2448:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __first_cut
2449:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		= std::__upper_bound(__first, __middle, *__second_cut,
2450:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__val_comp_iter(__comp));
2451:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      __len11 = std::distance(__first, __first_cut);
2452:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2453:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2454:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _BidirectionalIterator __new_middle
2455:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
2456:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __len1 - __len11, __len22, __buffer,
2457:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __buffer_size);
2458:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
2459:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__len22, __buffer, __buffer_size, __comp);
2460:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__merge_adaptive(__new_middle, __second_cut, __last,
ARM GAS  /tmp/ccU23Djm.s 			page 292


2461:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__len1 - __len11,
2462:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__len2 - __len22, __buffer,
2463:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__buffer_size, __comp);
2464:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2465:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2466:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2467:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2468:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance,
2469:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
2470:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2471:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __merge_without_buffer(_BidirectionalIterator __first,
2472:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _BidirectionalIterator __middle,
2473:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _BidirectionalIterator __last,
2474:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _Distance __len1, _Distance __len2,
2475:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _Compare __comp)
2476:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2477:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len1 == 0 || __len2 == 0)
2478:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return;
2479:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2480:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len1 + __len2 == 2)
2481:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2482:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__middle, __first))
2483:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    std::iter_swap(__first, __middle);
2484:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return;
2485:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2486:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2487:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _BidirectionalIterator __first_cut = __first;
2488:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _BidirectionalIterator __second_cut = __middle;
2489:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Distance __len11 = 0;
2490:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Distance __len22 = 0;
2491:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len1 > __len2)
2492:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2493:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __len11 = __len1 / 2;
2494:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::advance(__first_cut, __len11);
2495:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __second_cut
2496:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    = std::__lower_bound(__middle, __last, *__first_cut,
2497:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__iter_comp_val(__comp));
2498:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __len22 = std::distance(__middle, __second_cut);
2499:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2500:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
2501:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2502:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __len22 = __len2 / 2;
2503:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::advance(__second_cut, __len22);
2504:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first_cut
2505:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    = std::__upper_bound(__first, __middle, *__second_cut,
2506:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__val_comp_iter(__comp));
2507:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __len11 = std::distance(__first, __first_cut);
2508:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2509:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2510:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _BidirectionalIterator __new_middle
2511:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	= std::rotate(__first_cut, __middle, __second_cut);
2512:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __first_cut, __new_middle,
2513:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  __len11, __len22, __comp);
2514:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__merge_without_buffer(__new_middle, __second_cut, __last,
2515:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  __len1 - __len11, __len2 - __len22, __comp);
2516:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2517:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 293


2518:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2519:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2520:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __inplace_merge(_BidirectionalIterator __first,
2521:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _BidirectionalIterator __middle,
2522:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _BidirectionalIterator __last,
2523:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _Compare __comp)
2524:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2525:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::value_type
2526:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _ValueType;
2527:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::difference_type
2528:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _DistanceType;
2529:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2530:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __middle || __middle == __last)
2531:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return;
2532:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2533:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _DistanceType __len1 = std::distance(__first, __middle);
2534:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _DistanceType __len2 = std::distance(__middle, __last);
2535:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2536:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
2537:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _TmpBuf __buf(__first, __len1 + __len2);
2538:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2539:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__buf.begin() == 0)
2540:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__merge_without_buffer
2541:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __comp);
2542:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
2543:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__merge_adaptive
2544:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __buf.begin(),
2545:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   _DistanceType(__buf.size()), __comp);
2546:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2547:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2548:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2549:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2550:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2551:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2552:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2553:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2554:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  Nothing.
2555:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2556:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2557:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__middle,__last), and puts the result in [__first,__last).  The
2558:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  output will be sorted.  The sort is @e stable, that is, for
2559:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  equivalent elements in the two ranges, elements from the first
2560:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  range will always come before elements from the second.
2561:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2562:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2563:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2564:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  distance(__first,__last).
2565:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2566:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2567:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline void
2568:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2569:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2570:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _BidirectionalIterator __last)
2571:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2572:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2573:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2574:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    _BidirectionalIterator>)
ARM GAS  /tmp/ccU23Djm.s 			page 294


2575:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2576:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2577:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted(__first, __middle);
2578:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted(__middle, __last);
2579:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2580:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2581:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2582:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_less_iter());
2583:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2584:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2585:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2586:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2587:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2588:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
2589:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2590:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2591:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2592:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  Nothing.
2593:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2594:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2595:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [middle,last), and puts the result in [__first,__last).  The output will
2596:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  be sorted.  The sort is @e stable, that is, for equivalent
2597:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  elements in the two ranges, elements from the first range will always
2598:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  come before elements from the second.
2599:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2600:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2601:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2602:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  distance(__first,__last).
2603:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2604:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2605:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  the function used for the initial sort.
2606:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2607:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2608:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline void
2609:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2610:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2611:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _BidirectionalIterator __last,
2612:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		  _Compare __comp)
2613:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2614:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2615:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2616:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2617:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2618:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2619:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2620:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__first, __middle, __comp);
2621:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__middle, __last, __comp);
2622:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2623:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2624:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2625:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__comp));
2626:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2627:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2628:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2629:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the __merge_sort_loop routines.
2630:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
2631:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
ARM GAS  /tmp/ccU23Djm.s 			page 295


2632:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
2633:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __move_merge(_InputIterator __first1, _InputIterator __last1,
2634:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		 _InputIterator __first2, _InputIterator __last2,
2635:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		 _OutputIterator __result, _Compare __comp)
2636:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2637:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2638:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2639:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2640:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2641:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2642:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first2;
2643:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2644:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
2645:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2646:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2647:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      ++__first1;
2648:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2649:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__result;
2650:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2651:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return _GLIBCXX_MOVE3(__first2, __last2,
2652:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    _GLIBCXX_MOVE3(__first1, __last1,
2653:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					   __result));
2654:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2655:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2656:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
2657:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2658:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2659:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __merge_sort_loop(_RandomAccessIterator1 __first,
2660:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _RandomAccessIterator1 __last,
2661:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _RandomAccessIterator2 __result, _Distance __step_size,
2662:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _Compare __comp)
2663:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2664:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _Distance __two_step = 2 * __step_size;
2665:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2666:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__last - __first >= __two_step)
2667:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2668:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __result = std::__move_merge(__first, __first + __step_size,
2669:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				       __first + __step_size,
2670:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				       __first + __two_step,
2671:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				       __result, __comp);
2672:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first += __two_step;
2673:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2674:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __step_size = std::min(_Distance(__last - __first), __step_size);
2675:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2676:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__move_merge(__first, __first + __step_size,
2677:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			__first + __step_size, __last, __result, __comp);
2678:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2679:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2680:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Distance,
2681:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
2682:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2683:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __chunk_insertion_sort(_RandomAccessIterator __first,
2684:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2685:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _Distance __chunk_size, _Compare __comp)
2686:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2687:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__last - __first >= __chunk_size)
2688:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
ARM GAS  /tmp/ccU23Djm.s 			page 296


2689:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + __chunk_size, __comp);
2690:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first += __chunk_size;
2691:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2692:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2693:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2694:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2695:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   enum { _S_chunk_size = 7 };
2696:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2697:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
2698:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2699:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __merge_sort_with_buffer(_RandomAccessIterator __first,
2700:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     _RandomAccessIterator __last,
2701:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     _Pointer __buffer, _Compare __comp)
2702:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2703:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
2704:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	_Distance;
2705:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2706:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _Distance __len = __last - __first;
2707:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _Pointer __buffer_last = __buffer + __len;
2708:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2709:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _Distance __step_size = _S_chunk_size;
2710:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
2711:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2712:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__step_size < __len)
2713:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2714:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__merge_sort_loop(__first, __last, __buffer,
2715:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				 __step_size, __comp);
2716:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __step_size *= 2;
2717:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__merge_sort_loop(__buffer, __buffer_last, __first,
2718:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				 __step_size, __comp);
2719:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __step_size *= 2;
2720:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2721:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2722:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2723:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer,
2724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2725:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2726:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __stable_sort_adaptive(_RandomAccessIterator __first,
2727:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2728:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _Pointer __buffer, _Distance __buffer_size,
2729:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			   _Compare __comp)
2730:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2731:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _Distance __len = (__last - __first + 1) / 2;
2732:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       const _RandomAccessIterator __middle = __first + __len;
2733:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__len > __buffer_size)
2734:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2735:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__first, __middle, __buffer,
2736:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				      __buffer_size, __comp);
2737:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__middle, __last, __buffer,
2738:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				      __buffer_size, __comp);
2739:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2740:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
2741:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2742:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
2743:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
2744:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2745:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__merge_adaptive(__first, __middle, __last,
ARM GAS  /tmp/ccU23Djm.s 			page 297


2746:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    _Distance(__middle - __first),
2747:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    _Distance(__last - __middle),
2748:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    __buffer, __buffer_size,
2749:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			    __comp);
2750:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2751:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2752:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /// This is a helper function for the stable sorting routines.
2753:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
2754:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     void
2755:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __inplace_stable_sort(_RandomAccessIterator __first,
2756:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			  _RandomAccessIterator __last, _Compare __comp)
2757:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2758:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__last - __first < 15)
2759:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2760:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __last, __comp);
2761:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return;
2762:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2763:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _RandomAccessIterator __middle = __first + (__last - __first) / 2;
2764:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__inplace_stable_sort(__first, __middle, __comp);
2765:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__inplace_stable_sort(__middle, __last, __comp);
2766:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __middle, __last,
2767:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  __middle - __first,
2768:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  __last - __middle,
2769:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  __comp);
2770:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2771:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2772:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // stable_sort
2773:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2774:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // Set algorithms: includes, set_union, set_intersection, set_difference,
2775:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_symmetric_difference.  All of these algorithms have the precondition
2776:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // that their input ranges are sorted and the postcondition that their output
2777:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // ranges are sorted.
2778:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2779:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2780:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
2781:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
2782:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __includes(_InputIterator1 __first1, _InputIterator1 __last1,
2783:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _InputIterator2 __first2, _InputIterator2 __last2,
2784:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	       _Compare __comp)
2785:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2786:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2787:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__comp(__first2, __first1))
2788:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return false;
2789:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	else if (__comp(__first1, __first2))
2790:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first1;
2791:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	else
2792:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  {
2793:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__first1;
2794:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    ++__first2;
2795:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  }
2796:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2797:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __first2 == __last2;
2798:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2799:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2800:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2801:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range.
2802:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
ARM GAS  /tmp/ccU23Djm.s 			page 298


2803:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2804:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2805:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2806:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if each element in [__first2,__last2) is contained in order
2807:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  within [__first1,__last1).  False otherwise.
2808:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup set_algorithms
2809:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2810:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2811:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2812:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1).
2813:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  The iterators over each range only move forward, so this is a
2814:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  linear algorithm.  If an element in [__first2,__last2) is not
2815:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  found before the search iterator reaches @p __last2, false is
2816:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  returned.
2817:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2818:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2>
2819:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
2820:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2821:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2)
2822:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2823:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2824:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2825:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2826:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2827:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2828:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2829:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2830:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2831:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2832:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first1, __last1, __first2);
2833:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first2, __last2, __first1);
2834:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first1, __last1);
2835:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first2, __last2);
2836:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2837:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2838:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_iter());
2839:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2840:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2841:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2842:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range
2843:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  using comparison.
2844:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup set_algorithms
2845:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2846:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2847:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2848:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2849:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    Comparison function to use.
2850:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return True if each element in [__first2,__last2) is contained
2851:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  in order within [__first1,__last1) according to comp.  False
2852:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  otherwise.  @ingroup set_algorithms
2853:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2854:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2855:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2856:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1),
2857:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  using comp to decide.  The iterators over each range only move
2858:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  forward, so this is a linear algorithm.  If an element in
2859:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  [__first2,__last2) is not found before the search iterator
ARM GAS  /tmp/ccU23Djm.s 			page 299


2860:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  reaches @p __last2, false is returned.
2861:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2862:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2863:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Compare>
2864:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
2865:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2866:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2,
2867:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	     _Compare __comp)
2868:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2869:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2870:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2871:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2872:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2873:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2874:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2875:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2876:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2877:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2878:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);
2879:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);
2880:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);
2881:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);
2882:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2883:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2884:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
2885:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2886:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2887:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // nth_element
2888:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // merge
2889:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_difference
2890:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_intersection
2891:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_union
2892:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // stable_sort
2893:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // set_symmetric_difference
2894:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // min_element
2895:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // max_element
2896:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2897:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2898:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
2899:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __next_permutation(_BidirectionalIterator __first,
2900:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
2901:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2902:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
2903:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return false;
2904:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
2905:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       ++__i;
2906:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__i == __last)
2907:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return false;
2908:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __i = __last;
2909:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       --__i;
2910:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2911:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for(;;)
2912:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
2913:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
2914:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__i;
2915:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__i, __ii))
2916:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
ARM GAS  /tmp/ccU23Djm.s 			page 300


2917:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
2918:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      while (!__comp(__i, --__j))
2919:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{}
2920:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
2921:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
2922:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2923:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return true;
2924:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2925:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__i == __first)
2926:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
2927:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
2928:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2929:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return false;
2930:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
2931:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
2932:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2933:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2934:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2935:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering.
2936:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2937:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  Start of range.
2938:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   End of range.
2939:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2940:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2941:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
2942:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the next one of this set.
2943:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Returns true if there are more sequences to generate.  If the sequence
2944:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  is the largest of the set, the smallest is generated and false returned.
2945:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2946:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2947:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
2948:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2949:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
2950:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2951:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2952:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2953:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2954:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2955:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2956:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2957:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2958:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2959:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__next_permutation
2960:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
2961:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2962:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2963:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
2964:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering using
2965:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          comparison functor.
2966:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2967:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  Start of range.
2968:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   End of range.
2969:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
2970:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2971:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
2972:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
2973:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
ARM GAS  /tmp/ccU23Djm.s 			page 301


2974:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  sequence into the next one of this set.  Returns true if there are more
2975:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  sequences to generate.  If the sequence is the largest of the set, the
2976:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  smallest is generated and false returned.
2977:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
2978:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2979:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
2980:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2981:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
2982:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
2983:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
2984:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2985:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2986:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2987:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2988:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2989:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2990:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2991:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2992:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__next_permutation
2993:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
2994:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
2995:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
2996:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2997:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
2998:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __prev_permutation(_BidirectionalIterator __first,
2999:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
3000:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3001:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
3002:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return false;
3003:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
3004:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       ++__i;
3005:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__i == __last)
3006:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return false;
3007:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __i = __last;
3008:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       --__i;
3009:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3010:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for(;;)
3011:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3012:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
3013:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  --__i;
3014:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__ii, __i))
3015:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
3016:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
3017:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      while (!__comp(--__j, __i))
3018:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		{}
3019:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
3020:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
3021:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3022:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return true;
3023:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
3024:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__i == __first)
3025:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
3026:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
3027:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3028:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      return false;
3029:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
3030:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
ARM GAS  /tmp/ccU23Djm.s 			page 302


3031:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3032:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3033:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3034:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering.
3035:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3036:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  Start of range.
3037:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   End of range.
3038:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3039:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
3040:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
3041:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the previous one of this
3042:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  set.  Returns true if there are more sequences to generate.  If the
3043:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  sequence is the smallest of the set, the largest is generated and false
3044:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  returned.
3045:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3046:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
3047:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3048:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3049:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
3050:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3051:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3052:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3053:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3054:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3055:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3056:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3057:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3058:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3059:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3060:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_less_iter());
3061:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3062:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3063:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3064:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering using
3065:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          comparison functor.
3066:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3067:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  Start of range.
3068:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   End of range.
3069:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
3070:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3071:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
3072:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
3073:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
3074:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  sequence into the previous one of this set.  Returns true if there are
3075:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  more sequences to generate.  If the sequence is the smallest of the set,
3076:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  the largest is generated and false returned.
3077:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3078:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3079:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3080:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3081:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3082:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3083:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3084:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3085:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3086:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3087:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
ARM GAS  /tmp/ccU23Djm.s 			page 303


3088:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3089:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3090:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3091:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3092:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3093:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
3094:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3095:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3096:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // replace
3097:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // replace_if
3098:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3099:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _OutputIterator
3102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __replace_copy_if(_InputIterator __first, _InputIterator __last,
3103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _OutputIterator __result,
3104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _Predicate __pred, const _Tp& __new_value)
3105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first != __last; ++__first, (void)++__result)
3107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__pred(__first))
3108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *__result = __new_value;
3109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	else
3110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  *__result = *__first;
3111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __result;
3112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each element of one value with another
3116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         value.
3117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __old_value  The value to be replaced.
3121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p result+(last-first).
3123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
3124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies each element in the input range @p [__first,__last) to the
3125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  output range @p [__result,__result+(__last-__first)) replacing elements
3126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  equal to @p __old_value with @p __new_value.
3127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
3129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
3130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     replace_copy(_InputIterator __first, _InputIterator __last,
3131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		 _OutputIterator __result,
3132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		 const _Tp& __old_value, const _Tp& __new_value)
3133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
3140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_equals_val(__old_value),
3144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					      __new_value);
ARM GAS  /tmp/ccU23Djm.s 			page 304


3145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each value for which a predicate
3149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *         returns true with another value.
3150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
3151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred       A predicate.
3155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p __result+(__last-__first).
3157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *
3158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) to the range
3159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p [__result,__result+(__last-__first)) replacing elements for which
3160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @p __pred returns true with @p __new_value.
3161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _OutputIterator
3165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     replace_copy_if(_InputIterator __first, _InputIterator __last,
3166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _OutputIterator __result,
3167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _Predicate __pred, const _Tp& __new_value)
3168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
3174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred),
3179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 					      __new_value);
3180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
3183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     typename iterator_traits<_InputIterator>::difference_type
3184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
3185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
3187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first != __last; ++__first)
3188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__pred(__first))
3189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__n;
3190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __n;
3191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #if __cplusplus >= 201103L
3194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted.
3196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
3198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator>
ARM GAS  /tmp/ccU23Djm.s 			page 305


3202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last)
3204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last) == __last; }
3205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted
3208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          according to a comparison functor.
3209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
3211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last,
3218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      _Compare __comp)
3219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last, __comp) == __last; }
3220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _ForwardIterator
3223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		      _Compare __comp)
3225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last)
3227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return __last;
3228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (++__next; __next != __last; __first = __next, (void)++__next)
3231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (__comp(__next, __first))
3232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  return __next;
3233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __next;
3234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence.
3238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
3240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator>
3245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
3246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
3247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_less_iter());
3257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 306


3259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence using comparison functor.
3261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first   An iterator.
3263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _ForwardIterator
3270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		    _Compare __comp)
3272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_comp_iter(__comp));
3283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  __b) otherwise.
3292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp>
3294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b)
3297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
3300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
3302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		       : pair<const _Tp&, const _Tp&>(__a, __b);
3303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp  A @link comparison_functors comparison functor @endlink.
3311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  __b) otherwise.
3313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
ARM GAS  /tmp/ccU23Djm.s 			page 307


3316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
3318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
3320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			      : pair<const _Tp&, const _Tp&>(__a, __b);
3321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3323:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3324:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3325:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
3326:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3327:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _Compare __comp)
3328:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3329:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3330:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first == __last
3331:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  || ++__next == __last)
3332:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return std::make_pair(__first, __first);
3333:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3334:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator __min{}, __max{};
3335:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__comp(__next, __first))
3336:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3337:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __min = __next;
3338:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __max = __first;
3339:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3340:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
3341:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3342:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __min = __first;
3343:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __max = __next;
3344:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3345:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3346:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __first = __next;
3347:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       ++__first;
3348:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3349:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       while (__first != __last)
3350:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3351:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __next = __first;
3352:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (++__next == __last)
3353:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
3354:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3355:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__min = __first;
3356:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      else if (!__comp(__first, __max))
3357:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__max = __first;
3358:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      break;
3359:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
3360:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3361:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__comp(__next, __first))
3362:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
3363:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__comp(__next, __min))
3364:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__min = __next;
3365:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (!__comp(__first, __max))
3366:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__max = __first;
3367:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
3368:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  else
3369:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    {
3370:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3371:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__min = __first;
3372:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      if (!__comp(__next, __max))
ARM GAS  /tmp/ccU23Djm.s 			page 308


3373:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__max = __next;
3374:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    }
3375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3376:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  __first = __next;
3377:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first;
3378:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3379:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3380:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::make_pair(__min, __max);
3381:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3382:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3383:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3384:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3385:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          elements in a range.
3386:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3387:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  Start of range.
3388:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   End of range.
3389:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3390:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3391:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3392:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3393:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3394:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator>
3395:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3396:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3397:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last)
3398:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3399:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3400:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3401:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3402:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3403:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3404:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3405:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3406:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3407:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_less_iter());
3408:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3409:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3410:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3411:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3412:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          elements in a range.
3413:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3414:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first  Start of range.
3415:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last   End of range.
3416:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __comp   Comparison functor.
3417:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3418:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3419:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3420:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3421:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3422:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3423:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3424:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3425:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3426:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _Compare __comp)
3427:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3428:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3429:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
ARM GAS  /tmp/ccU23Djm.s 			page 309


3430:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3431:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3432:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3433:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3434:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3435:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3436:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3437:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__comp));
3438:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3439:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3440:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   // N2722 + DR 915.
3441:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp>
3442:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3443:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _Tp
3444:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     min(initializer_list<_Tp> __l)
3445:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end()); }
3446:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3447:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3448:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3449:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _Tp
3450:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     min(initializer_list<_Tp> __l, _Compare __comp)
3451:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end(), __comp); }
3452:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3453:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp>
3454:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3455:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _Tp
3456:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     max(initializer_list<_Tp> __l)
3457:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end()); }
3458:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3459:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3460:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3461:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline _Tp
3462:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     max(initializer_list<_Tp> __l, _Compare __comp)
3463:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end(), __comp); }
3464:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3465:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp>
3466:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3467:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3468:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l)
3469:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3470:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3471:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end());
3472:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3473:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3474:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3475:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3476:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3477:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3478:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l, _Compare __comp)
3479:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3480:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3481:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end(), __comp);
3482:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3483:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3484:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3485:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3486:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
ARM GAS  /tmp/ccU23Djm.s 			page 310


3487:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
3488:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3489:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _BinaryPredicate __pred)
3490:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3491:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3492:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // have the same elements in the same order.
3493:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
3494:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3495:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  break;
3496:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3497:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__first1 == __last1)
3498:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	return true;
3499:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3500:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Establish __last2 assuming equal ranges by iterating over the
3501:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // rest of the list.
3502:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       _ForwardIterator2 __last2 = __first2;
3503:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       std::advance(__last2, std::distance(__first1, __last1));
3504:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3505:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3506:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3507:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3508:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3509:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  
3510:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  auto __matches
3511:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    = std::__count_if(__first2, __last2,
3512:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3513:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (0 == __matches ||
3514:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      std::__count_if(__scan, __last1,
3515:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3516:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      != __matches)
3517:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return false;
3518:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3519:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return true;
3520:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3521:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3522:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3523:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3524:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          to the first sequence.
3525:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3526:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3527:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3528:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3529:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3530:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          [__first2, __first2 + (__last1 - __first1)), beginning with 
3531:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          ForwardIterator2 begin, such that equal(__first1, __last1, begin)
3532:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          returns true; otherwise, returns false.
3533:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3534:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3535:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3536:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3537:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _ForwardIterator2 __first2)
3538:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3539:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3540:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3541:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3542:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3543:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator1>::value_type,
ARM GAS  /tmp/ccU23Djm.s 			page 311


3544:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator2>::value_type>)
3545:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3546:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3547:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3548:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_equal_to_iter());
3549:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3550:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3551:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3552:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3553:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          to the first sequence.
3554:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3555:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3556:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3557:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3558:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3559:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in
3560:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          the range [__first2, __first2 + (__last1 - __first1)),
3561:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          beginning with ForwardIterator2 begin, such that
3562:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          equal(__first1, __last1, __begin, __pred) returns true;
3563:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          otherwise, returns false.
3564:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3565:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3566:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3567:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3568:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3569:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _BinaryPredicate __pred)
3570:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3571:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // concept requirements
3572:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3573:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3574:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
3575:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
3576:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
3577:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3578:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3579:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3580:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3581:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3582:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3583:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #if __cplusplus > 201103L
3584:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3585:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3586:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     bool
3587:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3588:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3589:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		     _BinaryPredicate __pred)
3590:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3591:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       using _Cat1
3592:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator1>::iterator_category;
3593:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       using _Cat2
3594:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator2>::iterator_category;
3595:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
3596:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
3597:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
3598:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__ra_iters)
3599:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3600:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
ARM GAS  /tmp/ccU23Djm.s 			page 312


3601:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3602:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__d1 != __d2)
3603:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return false;
3604:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3605:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3606:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3607:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       // have the same elements in the same order.
3608:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (; __first1 != __last1 && __first2 != __last2;
3609:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  ++__first1, (void)++__first2)
3610:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3611:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  break;
3612:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3613:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       if (__ra_iters)
3614:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3615:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__first1 == __last1)
3616:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return true;
3617:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3618:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       else
3619:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3620:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3621:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3622:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__d1 == 0 && __d2 == 0)
3623:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return true;
3624:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__d1 != __d2)
3625:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return false;
3626:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3627:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3628:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3629:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	{
3630:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3631:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3632:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3633:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3634:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  auto __matches = std::__count_if(__first2, __last2,
3635:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3636:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	  if (0 == __matches
3637:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      || std::__count_if(__scan, __last1,
3638:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3639:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	      != __matches)
3640:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	    return false;
3641:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	}
3642:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return true;
3643:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3644:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3645:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3646:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks whether a permutaion of the second sequence is equal
3647:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          to the first sequence.
3648:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3649:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3650:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3651:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3652:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3653:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3654:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3655:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          such that equal(__first1, __last1, begin) returns true;
3656:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          otherwise, returns false.
3657:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccU23Djm.s 			page 313


3658:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3659:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3660:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3661:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2)
3662:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3663:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3664:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3665:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3666:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return
3667:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	std::__is_permutation(__first1, __last1, __first2, __last2,
3668:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__iter_equal_to_iter());
3669:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3670:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3671:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3672:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3673:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          to the first sequence.
3674:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3675:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3676:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3677:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3678:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3679:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3680:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3681:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3682:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          such that equal(__first1, __last1, __begin, __pred) returns true;
3683:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *          otherwise, returns false.
3684:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   */
3685:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3686:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3687:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     inline bool
3688:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3689:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3690:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 		   _BinaryPredicate __pred)
3691:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3692:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3693:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3694:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3695:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2, __last2,
3696:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3697:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
3698:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3699:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #if __cplusplus > 201402L
3700:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3701:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** #define __cpp_lib_clamp 201603
3702:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h **** 
3703:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   /**
3704:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @brief  Returns the value clamped between lo and hi.
3705:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3706:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __val  A value of arbitrary type.
3707:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __lo   A lower limit of arbitrary type.
3708:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @param  __hi   An upper limit of arbitrary type.
3709:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
3710:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****    */
3711:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****   template<typename _Tp>
3712:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     constexpr const _Tp&
3713:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 9186              		.loc 18 3713 5
ARM GAS  /tmp/ccU23Djm.s 			page 314


 9187              		.cfi_startproc
 9188              		@ args = 0, pretend = 0, frame = 16
 9189              		@ frame_needed = 1, uses_anonymous_args = 0
 9190              		@ link register save eliminated.
 9191 0000 80B4     		push	{r7}
 9192              	.LCFI645:
 9193              		.cfi_def_cfa_offset 4
 9194              		.cfi_offset 7, -4
 9195 0002 85B0     		sub	sp, sp, #20
 9196              	.LCFI646:
 9197              		.cfi_def_cfa_offset 24
 9198 0004 00AF     		add	r7, sp, #0
 9199              	.LCFI647:
 9200              		.cfi_def_cfa_register 7
 9201 0006 F860     		str	r0, [r7, #12]
 9202 0008 B960     		str	r1, [r7, #8]
 9203 000a 7A60     		str	r2, [r7, #4]
3714:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     {
3715:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       __glibcxx_assert(!(__hi < __lo));
3716:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****       return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 9204              		.loc 18 3716 21
 9205 000c FB68     		ldr	r3, [r7, #12]
 9206 000e 1A68     		ldr	r2, [r3]
 9207 0010 BB68     		ldr	r3, [r7, #8]
 9208 0012 1B68     		ldr	r3, [r3]
 9209              		.loc 18 3716 29
 9210 0014 9A42     		cmp	r2, r3
 9211 0016 09DB     		blt	.L352
 9212              		.loc 18 3716 44 discriminator 1
 9213 0018 7B68     		ldr	r3, [r7, #4]
 9214 001a 1A68     		ldr	r2, [r3]
 9215 001c FB68     		ldr	r3, [r7, #12]
 9216 001e 1B68     		ldr	r3, [r3]
 9217              		.loc 18 3716 29 discriminator 1
 9218 0020 9A42     		cmp	r2, r3
 9219 0022 01DA     		bge	.L353
 9220              		.loc 18 3716 29 is_stmt 0 discriminator 3
 9221 0024 7B68     		ldr	r3, [r7, #4]
 9222              		.loc 18 3716 62 is_stmt 1 discriminator 3
 9223 0026 02E0     		b	.L356
 9224              	.L353:
 9225              		.loc 18 3716 29 discriminator 4
 9226 0028 FB68     		ldr	r3, [r7, #12]
 9227              		.loc 18 3716 62 discriminator 4
 9228 002a 00E0     		b	.L356
 9229              	.L352:
 9230              		.loc 18 3716 29 discriminator 2
 9231 002c BB68     		ldr	r3, [r7, #8]
 9232              	.L356:
3717:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algo.h ****     }
 9233              		.loc 18 3717 5 discriminator 9
 9234 002e 1846     		mov	r0, r3
 9235 0030 1437     		adds	r7, r7, #20
 9236              	.LCFI648:
 9237              		.cfi_def_cfa_offset 4
 9238 0032 BD46     		mov	sp, r7
 9239              	.LCFI649:
ARM GAS  /tmp/ccU23Djm.s 			page 315


 9240              		.cfi_def_cfa_register 13
 9241              		@ sp needed
 9242 0034 5DF8047B 		ldr	r7, [sp], #4
 9243              	.LCFI650:
 9244              		.cfi_restore 7
 9245              		.cfi_def_cfa_offset 0
 9246 0038 7047     		bx	lr
 9247              		.cfi_endproc
 9248              	.LFE4572:
 9250              		.section	.text._ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_,"axG",%progbits,_ZN4o
 9251              		.align	1
 9252              		.weak	_ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_
 9253              		.syntax unified
 9254              		.thumb
 9255              		.thumb_func
 9256              		.fpu fpv4-sp-d16
 9258              	_ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_:
 9259              	.LFB4574:
 742:Cpp/algorithm.hpp **** 
 743:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::copy_if()
 744:Cpp/algorithm.hpp ****     template<typename Cont, typename OutputIterator, typename UnaryPredicate>
 745:Cpp/algorithm.hpp ****     decltype(auto) copy_if(Cont&& cont, OutputIterator&& first, UnaryPredicate&& p)
 746:Cpp/algorithm.hpp ****     {
 747:Cpp/algorithm.hpp ****       using std::begin;
 748:Cpp/algorithm.hpp ****       using std::end;
 749:Cpp/algorithm.hpp ****       return std::copy_if(begin(cont), end(cont), std::forward<OutputIterator>(first), std::forward
 750:Cpp/algorithm.hpp ****     }
 751:Cpp/algorithm.hpp **** 
 752:Cpp/algorithm.hpp ****     /// Container based wrapper for \ref std::fill()
 753:Cpp/algorithm.hpp ****     template<typename Cont, typename T>
 754:Cpp/algorithm.hpp ****     decltype(auto) fill(Cont&& cont, T&& value)
 9260              		.loc 10 754 20
 9261              		.cfi_startproc
 9262              		@ args = 0, pretend = 0, frame = 8
 9263              		@ frame_needed = 1, uses_anonymous_args = 0
 9264 0000 B0B5     		push	{r4, r5, r7, lr}
 9265              	.LCFI651:
 9266              		.cfi_def_cfa_offset 16
 9267              		.cfi_offset 4, -16
 9268              		.cfi_offset 5, -12
 9269              		.cfi_offset 7, -8
 9270              		.cfi_offset 14, -4
 9271 0002 82B0     		sub	sp, sp, #8
 9272              	.LCFI652:
 9273              		.cfi_def_cfa_offset 24
 9274 0004 00AF     		add	r7, sp, #0
 9275              	.LCFI653:
 9276              		.cfi_def_cfa_register 7
 9277 0006 7860     		str	r0, [r7, #4]
 9278 0008 3960     		str	r1, [r7]
 755:Cpp/algorithm.hpp ****     {
 756:Cpp/algorithm.hpp ****       using std::begin;
 757:Cpp/algorithm.hpp ****       using std::end;
 758:Cpp/algorithm.hpp ****       return std::fill(begin(cont), end(cont), std::forward<T>(value));
 9279              		.loc 10 758 23
 9280 000a 7868     		ldr	r0, [r7, #4]
 9281 000c FFF7FEFF 		bl	_ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_
ARM GAS  /tmp/ccU23Djm.s 			page 316


 9282 0010 0446     		mov	r4, r0
 9283 0012 7868     		ldr	r0, [r7, #4]
 9284 0014 FFF7FEFF 		bl	_ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_
 9285 0018 0546     		mov	r5, r0
 9286 001a 3868     		ldr	r0, [r7]
 9287 001c FFF7FEFF 		bl	_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE
 9288 0020 0346     		mov	r3, r0
 9289 0022 1A46     		mov	r2, r3
 9290 0024 2946     		mov	r1, r5
 9291 0026 2046     		mov	r0, r4
 9292 0028 FFF7FEFF 		bl	_ZSt4fillIPhhEvT_S1_RKT0_
 9293              		.loc 10 758 70
 9294 002c 00BF     		nop
 759:Cpp/algorithm.hpp ****     }
 9295              		.loc 10 759 5
 9296 002e 0837     		adds	r7, r7, #8
 9297              	.LCFI654:
 9298              		.cfi_def_cfa_offset 16
 9299 0030 BD46     		mov	sp, r7
 9300              	.LCFI655:
 9301              		.cfi_def_cfa_register 13
 9302              		@ sp needed
 9303 0032 B0BD     		pop	{r4, r5, r7, pc}
 9304              		.cfi_endproc
 9305              	.LFE4574:
 9307              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv,"axG",%progbits,_ZN4otto3mcu7ws28
 9308              		.align	1
 9309              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
 9310              		.syntax unified
 9311              		.thumb
 9312              		.thumb_func
 9313              		.fpu fpv4-sp-d16
 9315              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv:
 9316              	.LFB4573:
 148:Cpp/ws2812b.hpp ****     {
 9317              		.loc 9 148 10
 9318              		.cfi_startproc
 9319              		@ args = 0, pretend = 0, frame = 8
 9320              		@ frame_needed = 1, uses_anonymous_args = 0
 9321 0000 90B5     		push	{r4, r7, lr}
 9322              	.LCFI656:
 9323              		.cfi_def_cfa_offset 12
 9324              		.cfi_offset 4, -12
 9325              		.cfi_offset 7, -8
 9326              		.cfi_offset 14, -4
 9327 0002 83B0     		sub	sp, sp, #12
 9328              	.LCFI657:
 9329              		.cfi_def_cfa_offset 24
 9330 0004 00AF     		add	r7, sp, #0
 9331              	.LCFI658:
 9332              		.cfi_def_cfa_register 7
 9333 0006 7860     		str	r0, [r7, #4]
 150:Cpp/ws2812b.hpp ****       needs_update_ = true;
 9334              		.loc 9 150 18
 9335 0008 7B68     		ldr	r3, [r7, #4]
 9336 000a 5C1D     		adds	r4, r3, #5
 150:Cpp/ws2812b.hpp ****       needs_update_ = true;
ARM GAS  /tmp/ccU23Djm.s 			page 317


 9337              		.loc 9 150 17
 9338 000c 0021     		movs	r1, #0
 9339 000e 0A48     		ldr	r0, .L360
 9340 0010 FFF7FEFF 		bl	_ZNKSt5arrayIS_IhLj4EELj256EEixEj
 9341 0014 0346     		mov	r3, r0
 9342 0016 0021     		movs	r1, #0
 9343 0018 1846     		mov	r0, r3
 9344 001a FFF7FEFF 		bl	_ZNKSt5arrayIhLj4EEixEj
 9345 001e 0346     		mov	r3, r0
 9346 0020 1946     		mov	r1, r3
 9347 0022 2046     		mov	r0, r4
 9348 0024 FFF7FEFF 		bl	_ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_
 151:Cpp/ws2812b.hpp ****     }
 9349              		.loc 9 151 7
 9350 0028 7B68     		ldr	r3, [r7, #4]
 9351 002a 0122     		movs	r2, #1
 9352 002c 1A71     		strb	r2, [r3, #4]
 152:Cpp/ws2812b.hpp **** 
 9353              		.loc 9 152 5
 9354 002e 00BF     		nop
 9355 0030 0C37     		adds	r7, r7, #12
 9356              	.LCFI659:
 9357              		.cfi_def_cfa_offset 12
 9358 0032 BD46     		mov	sp, r7
 9359              	.LCFI660:
 9360              		.cfi_def_cfa_register 13
 9361              		@ sp needed
 9362 0034 90BD     		pop	{r4, r7, pc}
 9363              	.L361:
 9364 0036 00BF     		.align	2
 9365              	.L360:
 9366 0038 00000000 		.word	_ZN4otto3mcu7ws2812bL15ws2812b_mappingE
 9367              		.cfi_endproc
 9368              	.LFE4573:
 9370              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_,"axG",%progbits,
 9371              		.align	1
 9372              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_
 9373              		.syntax unified
 9374              		.thumb
 9375              		.thumb_func
 9376              		.fpu fpv4-sp-d16
 9378              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_:
 9379              	.LFB4576:
 148:Cpp/fixed_size_function.hpp ****   {
 9380              		.loc 12 148 3
 9381              		.cfi_startproc
 9382              		@ args = 0, pretend = 0, frame = 8
 9383              		@ frame_needed = 1, uses_anonymous_args = 0
 9384 0000 80B5     		push	{r7, lr}
 9385              	.LCFI661:
 9386              		.cfi_def_cfa_offset 8
 9387              		.cfi_offset 7, -8
 9388              		.cfi_offset 14, -4
 9389 0002 82B0     		sub	sp, sp, #8
 9390              	.LCFI662:
 9391              		.cfi_def_cfa_offset 16
 9392 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccU23Djm.s 			page 318


 9393              	.LCFI663:
 9394              		.cfi_def_cfa_register 7
 9395 0006 7860     		str	r0, [r7, #4]
 9396 0008 3960     		str	r1, [r7]
 9397              	.LBB74:
 149:Cpp/fixed_size_function.hpp ****     create(std::forward<Functor>(f));
 9398              		.loc 12 149 3
 9399 000a 7B68     		ldr	r3, [r7, #4]
 9400 000c 1846     		mov	r0, r3
 9401 000e FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
 150:Cpp/fixed_size_function.hpp ****   }
 9402              		.loc 12 150 5
 9403 0012 3868     		ldr	r0, [r7]
 9404 0014 FFF7FEFF 		bl	_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE
 9405 0018 0346     		mov	r3, r0
 9406 001a 1946     		mov	r1, r3
 9407 001c 7868     		ldr	r0, [r7, #4]
 9408 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_
 9409              	.LBE74:
 151:Cpp/fixed_size_function.hpp **** 
 9410              		.loc 12 151 3
 9411 0022 7B68     		ldr	r3, [r7, #4]
 9412 0024 1846     		mov	r0, r3
 9413 0026 0837     		adds	r7, r7, #8
 9414              	.LCFI664:
 9415              		.cfi_def_cfa_offset 8
 9416 0028 BD46     		mov	sp, r7
 9417              	.LCFI665:
 9418              		.cfi_def_cfa_register 13
 9419              		@ sp needed
 9420 002a 80BD     		pop	{r7, pc}
 9421              		.cfi_endproc
 9422              	.LFE4576:
 9424              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IRS0_EEOT_
 9425              		.thumb_set _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IRS0_EEOT_,_ZN19fixed_size_func
 9426              		.section	.text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv,"axG",%progbits,_ZN4otto3mcu4k
 9427              		.align	1
 9428              		.weak	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv
 9429              		.syntax unified
 9430              		.thumb
 9431              		.thumb_func
 9432              		.fpu fpv4-sp-d16
 9434              	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv:
 9435              	.LFB4578:
  26:Cpp/keys.hpp  ****     {
 9436              		.loc 17 26 10
 9437              		.cfi_startproc
 9438              		@ args = 0, pretend = 0, frame = 40
 9439              		@ frame_needed = 1, uses_anonymous_args = 0
 9440 0000 80B5     		push	{r7, lr}
 9441              	.LCFI666:
 9442              		.cfi_def_cfa_offset 8
 9443              		.cfi_offset 7, -8
 9444              		.cfi_offset 14, -4
 9445 0002 8AB0     		sub	sp, sp, #40
 9446              	.LCFI667:
 9447              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccU23Djm.s 			page 319


 9448 0004 00AF     		add	r7, sp, #0
 9449              	.LCFI668:
 9450              		.cfi_def_cfa_register 7
 9451 0006 7860     		str	r0, [r7, #4]
 9452              	.LBB75:
  28:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::output_pp);
 9453              		.loc 17 28 7
 9454 0008 7B68     		ldr	r3, [r7, #4]
 9455 000a 03F51873 		add	r3, r3, #608
 9456 000e FB61     		str	r3, [r7, #28]
 9457 0010 F869     		ldr	r0, [r7, #28]
 9458 0012 FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv
 9459 0016 7862     		str	r0, [r7, #36]
 9460 0018 F869     		ldr	r0, [r7, #28]
 9461 001a FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv
 9462 001e B861     		str	r0, [r7, #24]
 9463              	.L366:
  28:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::output_pp);
 9464              		.loc 17 28 7 is_stmt 0 discriminator 3
 9465 0020 7A6A     		ldr	r2, [r7, #36]
 9466 0022 BB69     		ldr	r3, [r7, #24]
 9467 0024 9A42     		cmp	r2, r3
 9468 0026 0BD0     		beq	.L365
  28:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::output_pp);
 9469              		.loc 17 28 18 is_stmt 1 discriminator 2
 9470 0028 7B6A     		ldr	r3, [r7, #36]
 9471 002a 7B61     		str	r3, [r7, #20]
  29:Cpp/keys.hpp  ****       }
 9472              		.loc 17 29 9 discriminator 2
 9473 002c 0023     		movs	r3, #0
 9474 002e 0022     		movs	r2, #0
 9475 0030 0121     		movs	r1, #1
 9476 0032 7869     		ldr	r0, [r7, #20]
 9477 0034 FFF7FEFF 		bl	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
  28:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::output_pp);
 9478              		.loc 17 28 7 discriminator 2
 9479 0038 7B6A     		ldr	r3, [r7, #36]
 9480 003a 0C33     		adds	r3, r3, #12
 9481 003c 7B62     		str	r3, [r7, #36]
 9482 003e EFE7     		b	.L366
 9483              	.L365:
 9484              	.LBE75:
 9485              	.LBB76:
  31:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::input, GpioPin::Pull::down);
 9486              		.loc 17 31 7
 9487 0040 7B68     		ldr	r3, [r7, #4]
 9488 0042 03F50073 		add	r3, r3, #512
 9489 0046 3B61     		str	r3, [r7, #16]
 9490 0048 3869     		ldr	r0, [r7, #16]
 9491 004a FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv
 9492 004e 3862     		str	r0, [r7, #32]
 9493 0050 3869     		ldr	r0, [r7, #16]
 9494 0052 FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv
 9495 0056 F860     		str	r0, [r7, #12]
 9496              	.L368:
  31:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::input, GpioPin::Pull::down);
 9497              		.loc 17 31 7 is_stmt 0 discriminator 3
ARM GAS  /tmp/ccU23Djm.s 			page 320


 9498 0058 3A6A     		ldr	r2, [r7, #32]
 9499 005a FB68     		ldr	r3, [r7, #12]
 9500 005c 9A42     		cmp	r2, r3
 9501 005e 0BD0     		beq	.L369
  31:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::input, GpioPin::Pull::down);
 9502              		.loc 17 31 18 is_stmt 1 discriminator 2
 9503 0060 3B6A     		ldr	r3, [r7, #32]
 9504 0062 BB60     		str	r3, [r7, #8]
  32:Cpp/keys.hpp  ****       }
 9505              		.loc 17 32 9 discriminator 2
 9506 0064 0023     		movs	r3, #0
 9507 0066 0222     		movs	r2, #2
 9508 0068 0021     		movs	r1, #0
 9509 006a B868     		ldr	r0, [r7, #8]
 9510 006c FFF7FEFF 		bl	_ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
  31:Cpp/keys.hpp  ****         pin.init(GpioPin::Mode::input, GpioPin::Pull::down);
 9511              		.loc 17 31 7 discriminator 2
 9512 0070 3B6A     		ldr	r3, [r7, #32]
 9513 0072 0C33     		adds	r3, r3, #12
 9514 0074 3B62     		str	r3, [r7, #32]
 9515 0076 EFE7     		b	.L368
 9516              	.L369:
 9517              	.LBE76:
  34:Cpp/keys.hpp  **** 
 9518              		.loc 17 34 5
 9519 0078 00BF     		nop
 9520 007a 2837     		adds	r7, r7, #40
 9521              	.LCFI669:
 9522              		.cfi_def_cfa_offset 8
 9523 007c BD46     		mov	sp, r7
 9524              	.LCFI670:
 9525              		.cfi_def_cfa_register 13
 9526              		@ sp needed
 9527 007e 80BD     		pop	{r7, pc}
 9528              		.cfi_endproc
 9529              	.LFE4578:
 9531              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv,"axG",%progbits,_ZN4otto3mcu7ws281
 9532              		.align	1
 9533              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv
 9534              		.syntax unified
 9535              		.thumb
 9536              		.thumb_func
 9537              		.fpu fpv4-sp-d16
 9539              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv:
 9540              	.LFB4579:
 141:Cpp/ws2812b.hpp ****     {
 9541              		.loc 9 141 10
 9542              		.cfi_startproc
 9543              		@ args = 0, pretend = 0, frame = 8
 9544              		@ frame_needed = 1, uses_anonymous_args = 0
 9545 0000 B0B5     		push	{r4, r5, r7, lr}
 9546              	.LCFI671:
 9547              		.cfi_def_cfa_offset 16
 9548              		.cfi_offset 4, -16
 9549              		.cfi_offset 5, -12
 9550              		.cfi_offset 7, -8
 9551              		.cfi_offset 14, -4
ARM GAS  /tmp/ccU23Djm.s 			page 321


 9552 0002 82B0     		sub	sp, sp, #8
 9553              	.LCFI672:
 9554              		.cfi_def_cfa_offset 24
 9555 0004 00AF     		add	r7, sp, #0
 9556              	.LCFI673:
 9557              		.cfi_def_cfa_register 7
 9558 0006 7860     		str	r0, [r7, #4]
 143:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 9559              		.loc 9 143 29
 9560 0008 7B68     		ldr	r3, [r7, #4]
 9561 000a 1C68     		ldr	r4, [r3]
 143:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 9562              		.loc 9 143 27
 9563 000c 7B68     		ldr	r3, [r7, #4]
 9564 000e 03F28D23 		addw	r3, r3, #653
 9565 0012 1846     		mov	r0, r3
 9566 0014 FFF7FEFF 		bl	_ZNSt5arrayIhLj2EE4dataEv
 9567 0018 0546     		mov	r5, r0
 143:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 9568              		.loc 9 143 62
 9569 001a 7B68     		ldr	r3, [r7, #4]
 9570 001c 03F28D23 		addw	r3, r3, #653
 9571 0020 1846     		mov	r0, r3
 9572 0022 FFF7FEFF 		bl	_ZNKSt5arrayIhLj2EE4sizeEv
 9573 0026 0346     		mov	r3, r0
 143:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 9574              		.loc 9 143 27
 9575 0028 9BB2     		uxth	r3, r3
 9576 002a 1A46     		mov	r2, r3
 9577 002c 2946     		mov	r1, r5
 9578 002e 2046     		mov	r0, r4
 9579 0030 FFF7FEFF 		bl	HAL_SPI_Transmit_DMA
 9580              	.L372:
 144:Cpp/ws2812b.hpp ****         ;
 9581              		.loc 9 144 14
 9582 0034 7B68     		ldr	r3, [r7, #4]
 9583 0036 1B68     		ldr	r3, [r3]
 9584 0038 1B68     		ldr	r3, [r3]
 9585 003a 9B68     		ldr	r3, [r3, #8]
 9586 003c 03F08003 		and	r3, r3, #128
 9587 0040 802B     		cmp	r3, #128
 9588 0042 0CBF     		ite	eq
 9589 0044 0123     		moveq	r3, #1
 9590 0046 0023     		movne	r3, #0
 9591 0048 DBB2     		uxtb	r3, r3
 9592 004a 002B     		cmp	r3, #0
 9593 004c 00D0     		beq	.L373
 144:Cpp/ws2812b.hpp ****         ;
 9594              		.loc 9 144 7
 9595 004e F1E7     		b	.L372
 9596              	.L373:
 146:Cpp/ws2812b.hpp **** 
 9597              		.loc 9 146 5
 9598 0050 00BF     		nop
 9599 0052 0837     		adds	r7, r7, #8
 9600              	.LCFI674:
 9601              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccU23Djm.s 			page 322


 9602 0054 BD46     		mov	sp, r7
 9603              	.LCFI675:
 9604              		.cfi_def_cfa_register 13
 9605              		@ sp needed
 9606 0056 B0BD     		pop	{r4, r5, r7, pc}
 9607              		.cfi_endproc
 9608              	.LFE4579:
 9610              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZ14OTTO_main_loopEUlvE_EEO
 9611              		.align	1
 9612              		.syntax unified
 9613              		.thumb
 9614              		.thumb_func
 9615              		.fpu fpv4-sp-d16
 9617              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZ14OTTO_main_loopEUlvE_EEOT_:
 9618              	.LFB4581:
 148:Cpp/fixed_size_function.hpp ****   {
 9619              		.loc 12 148 3
 9620              		.cfi_startproc
 9621              		@ args = 0, pretend = 0, frame = 8
 9622              		@ frame_needed = 1, uses_anonymous_args = 0
 9623 0000 80B5     		push	{r7, lr}
 9624              	.LCFI676:
 9625              		.cfi_def_cfa_offset 8
 9626              		.cfi_offset 7, -8
 9627              		.cfi_offset 14, -4
 9628 0002 82B0     		sub	sp, sp, #8
 9629              	.LCFI677:
 9630              		.cfi_def_cfa_offset 16
 9631 0004 00AF     		add	r7, sp, #0
 9632              	.LCFI678:
 9633              		.cfi_def_cfa_register 7
 9634 0006 7860     		str	r0, [r7, #4]
 9635 0008 3960     		str	r1, [r7]
 9636              	.LBB77:
 149:Cpp/fixed_size_function.hpp ****     create(std::forward<Functor>(f));
 9637              		.loc 12 149 3
 9638 000a 7B68     		ldr	r3, [r7, #4]
 9639 000c 1846     		mov	r0, r3
 9640 000e FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
 150:Cpp/fixed_size_function.hpp ****   }
 9641              		.loc 12 150 5
 9642 0012 3868     		ldr	r0, [r7]
 9643 0014 FFF7FEFF 		bl	_ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE
 9644 0018 0346     		mov	r3, r0
 9645 001a 1946     		mov	r1, r3
 9646 001c 7868     		ldr	r0, [r7, #4]
 9647 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlvE_EEvOT_
 9648              	.LBE77:
 151:Cpp/fixed_size_function.hpp **** 
 9649              		.loc 12 151 3
 9650 0022 7B68     		ldr	r3, [r7, #4]
 9651 0024 1846     		mov	r0, r3
 9652 0026 0837     		adds	r7, r7, #8
 9653              	.LCFI679:
 9654              		.cfi_def_cfa_offset 8
 9655 0028 BD46     		mov	sp, r7
 9656              	.LCFI680:
ARM GAS  /tmp/ccU23Djm.s 			page 323


 9657              		.cfi_def_cfa_register 13
 9658              		@ sp needed
 9659 002a 80BD     		pop	{r7, pc}
 9660              		.cfi_endproc
 9661              	.LFE4581:
 9663              		.thumb_set _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZ14OTTO_main_loopEUlvE_EEOT_,_
 9664              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv,"axG",%progbits,_ZN1
 9665              		.align	1
 9666              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv
 9667              		.syntax unified
 9668              		.thumb
 9669              		.thumb_func
 9670              		.fpu fpv4-sp-d16
 9672              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv:
 9673              	.LFB4675:
 185:Cpp/fixed_size_function.hpp ****   {
 9674              		.loc 12 185 8
 9675              		.cfi_startproc
 9676              		@ args = 0, pretend = 0, frame = 24
 9677              		@ frame_needed = 1, uses_anonymous_args = 0
 9678 0000 90B5     		push	{r4, r7, lr}
 9679              	.LCFI681:
 9680              		.cfi_def_cfa_offset 12
 9681              		.cfi_offset 4, -12
 9682              		.cfi_offset 7, -8
 9683              		.cfi_offset 14, -4
 9684 0002 87B0     		sub	sp, sp, #28
 9685              	.LCFI682:
 9686              		.cfi_def_cfa_offset 40
 9687 0004 00AF     		add	r7, sp, #0
 9688              	.LCFI683:
 9689              		.cfi_def_cfa_register 7
 9690 0006 7860     		str	r0, [r7, #4]
 187:Cpp/fixed_size_function.hpp ****     if (destroy) {
 9691              		.loc 12 187 10
 9692 0008 7B68     		ldr	r3, [r7, #4]
 9693 000a 5B68     		ldr	r3, [r3, #4]
 9694 000c 7B61     		str	r3, [r7, #20]
 188:Cpp/fixed_size_function.hpp ****       vtable_ = vtable();
 9695              		.loc 12 188 5
 9696 000e 7B69     		ldr	r3, [r7, #20]
 9697 0010 002B     		cmp	r3, #0
 9698 0012 17D0     		beq	.L378
 189:Cpp/fixed_size_function.hpp ****       destroy(&storage_);
 9699              		.loc 12 189 7
 9700 0014 0023     		movs	r3, #0
 9701 0016 BB60     		str	r3, [r7, #8]
 9702 0018 0023     		movs	r3, #0
 9703 001a FB60     		str	r3, [r7, #12]
 9704 001c 0023     		movs	r3, #0
 9705 001e 3B61     		str	r3, [r7, #16]
 9706 0020 07F10803 		add	r3, r7, #8
 9707 0024 1846     		mov	r0, r3
 9708 0026 FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
 9709 002a 7B68     		ldr	r3, [r7, #4]
 9710 002c 1C46     		mov	r4, r3
 9711 002e 07F10803 		add	r3, r7, #8
ARM GAS  /tmp/ccU23Djm.s 			page 324


 9712 0032 93E80700 		ldm	r3, {r0, r1, r2}
 9713 0036 84E80700 		stm	r4, {r0, r1, r2}
 190:Cpp/fixed_size_function.hpp ****     }
 9714              		.loc 12 190 14
 9715 003a 7B69     		ldr	r3, [r7, #20]
 190:Cpp/fixed_size_function.hpp ****     }
 9716              		.loc 12 190 16
 9717 003c 7A68     		ldr	r2, [r7, #4]
 9718 003e 1032     		adds	r2, r2, #16
 190:Cpp/fixed_size_function.hpp ****     }
 9719              		.loc 12 190 14
 9720 0040 1046     		mov	r0, r2
 9721 0042 9847     		blx	r3
 9722              	.LVL9:
 9723              	.L378:
 192:Cpp/fixed_size_function.hpp **** 
 9724              		.loc 12 192 3
 9725 0044 00BF     		nop
 9726 0046 1C37     		adds	r7, r7, #28
 9727              	.LCFI684:
 9728              		.cfi_def_cfa_offset 12
 9729 0048 BD46     		mov	sp, r7
 9730              	.LCFI685:
 9731              		.cfi_def_cfa_register 13
 9732              		@ sp needed
 9733 004a 90BD     		pop	{r4, r7, pc}
 9734              		.cfi_endproc
 9735              	.LFE4675:
 9737              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_,"axG",%progbits,_Z
 9738              		.align	1
 9739              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_
 9740              		.syntax unified
 9741              		.thumb
 9742              		.thumb_func
 9743              		.fpu fpv4-sp-d16
 9745              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_:
 9746              	.LFB4676:
 204:Cpp/fixed_size_function.hpp **** 
 205:Cpp/fixed_size_function.hpp ****   void swap(fixed_size_function& other)
 206:Cpp/fixed_size_function.hpp ****   {
 207:Cpp/fixed_size_function.hpp ****     fixed_size_function tmp = std::move(other);
 208:Cpp/fixed_size_function.hpp ****     other = std::move(*this);
 209:Cpp/fixed_size_function.hpp ****     *this = std::move(tmp);
 210:Cpp/fixed_size_function.hpp ****   }
 211:Cpp/fixed_size_function.hpp **** 
 212:Cpp/fixed_size_function.hpp ****   friend void swap(fixed_size_function& lhs, fixed_size_function& rhs)
 213:Cpp/fixed_size_function.hpp ****   {
 214:Cpp/fixed_size_function.hpp ****     lhs.swap(rhs);
 215:Cpp/fixed_size_function.hpp ****   }
 216:Cpp/fixed_size_function.hpp **** 
 217:Cpp/fixed_size_function.hpp ****   friend bool operator==(std::nullptr_t, fixed_size_function const& f)
 218:Cpp/fixed_size_function.hpp ****   {
 219:Cpp/fixed_size_function.hpp ****     return !f;
 220:Cpp/fixed_size_function.hpp ****   }
 221:Cpp/fixed_size_function.hpp **** 
 222:Cpp/fixed_size_function.hpp ****   friend bool operator==(fixed_size_function const& f, std::nullptr_t)
 223:Cpp/fixed_size_function.hpp ****   {
ARM GAS  /tmp/ccU23Djm.s 			page 325


 224:Cpp/fixed_size_function.hpp ****     return !f;
 225:Cpp/fixed_size_function.hpp ****   }
 226:Cpp/fixed_size_function.hpp **** 
 227:Cpp/fixed_size_function.hpp ****   friend bool operator!=(std::nullptr_t, fixed_size_function const& f)
 228:Cpp/fixed_size_function.hpp ****   {
 229:Cpp/fixed_size_function.hpp ****     return f;
 230:Cpp/fixed_size_function.hpp ****   }
 231:Cpp/fixed_size_function.hpp **** 
 232:Cpp/fixed_size_function.hpp ****   friend bool operator!=(fixed_size_function const& f, std::nullptr_t)
 233:Cpp/fixed_size_function.hpp ****   {
 234:Cpp/fixed_size_function.hpp ****     return f;
 235:Cpp/fixed_size_function.hpp ****   }
 236:Cpp/fixed_size_function.hpp **** 
 237:Cpp/fixed_size_function.hpp **** private:
 238:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 239:Cpp/fixed_size_function.hpp ****   void create(Functor&& f)
 240:Cpp/fixed_size_function.hpp ****   {
 241:Cpp/fixed_size_function.hpp ****     using functor_type = typename std::decay<Functor>::type;
 242:Cpp/fixed_size_function.hpp ****     static_assert(sizeof(functor_type) <= StorageSize, "Functor must be smaller than storage buffer
 243:Cpp/fixed_size_function.hpp **** 
 244:Cpp/fixed_size_function.hpp ****     new (&storage_) functor_type(std::forward<Functor>(f));
 245:Cpp/fixed_size_function.hpp **** 
 246:Cpp/fixed_size_function.hpp ****     vtable_.call = &call_impl<functor_type>;
 247:Cpp/fixed_size_function.hpp ****     vtable_.destroy = &destroy_impl<functor_type>;
 248:Cpp/fixed_size_function.hpp ****     init_copy<functor_type>(is_copyable());
 249:Cpp/fixed_size_function.hpp ****     init_move<functor_type>(is_movable());
 250:Cpp/fixed_size_function.hpp ****   }
 251:Cpp/fixed_size_function.hpp **** 
 252:Cpp/fixed_size_function.hpp ****   // void copy(fixed_size_function const& src)
 253:Cpp/fixed_size_function.hpp ****   // {
 254:Cpp/fixed_size_function.hpp ****   //   if constexpr (is_copyable::value) {
 255:Cpp/fixed_size_function.hpp ****   //     if (src.vtable_.copy) {
 256:Cpp/fixed_size_function.hpp ****   //       src.vtable_.copy(&src.storage_, &storage_);
 257:Cpp/fixed_size_function.hpp ****   //       vtable_ = src.vtable_;
 258:Cpp/fixed_size_function.hpp ****   //     }
 259:Cpp/fixed_size_function.hpp ****   //   }
 260:Cpp/fixed_size_function.hpp ****   // }
 261:Cpp/fixed_size_function.hpp **** 
 262:Cpp/fixed_size_function.hpp ****   void move(fixed_size_function&& src)
 9747              		.loc 12 262 8
 9748              		.cfi_startproc
 9749              		@ args = 0, pretend = 0, frame = 8
 9750              		@ frame_needed = 1, uses_anonymous_args = 0
 9751 0000 80B5     		push	{r7, lr}
 9752              	.LCFI686:
 9753              		.cfi_def_cfa_offset 8
 9754              		.cfi_offset 7, -8
 9755              		.cfi_offset 14, -4
 9756 0002 82B0     		sub	sp, sp, #8
 9757              	.LCFI687:
 9758              		.cfi_def_cfa_offset 16
 9759 0004 00AF     		add	r7, sp, #0
 9760              	.LCFI688:
 9761              		.cfi_def_cfa_register 7
 9762 0006 7860     		str	r0, [r7, #4]
 9763 0008 3960     		str	r1, [r7]
 263:Cpp/fixed_size_function.hpp ****   {
ARM GAS  /tmp/ccU23Djm.s 			page 326


 264:Cpp/fixed_size_function.hpp ****     if constexpr (is_movable::value) {
 265:Cpp/fixed_size_function.hpp ****       if (src.vtable_.move) {
 9764              		.loc 12 265 23
 9765 000a 3B68     		ldr	r3, [r7]
 9766 000c 9B68     		ldr	r3, [r3, #8]
 9767              		.loc 12 265 7
 9768 000e 002B     		cmp	r3, #0
 9769 0010 10D0     		beq	.L381
 266:Cpp/fixed_size_function.hpp ****         src.vtable_.move(&src.storage_, &storage_);
 9770              		.loc 12 266 21
 9771 0012 3B68     		ldr	r3, [r7]
 9772 0014 9B68     		ldr	r3, [r3, #8]
 9773              		.loc 12 266 31
 9774 0016 3A68     		ldr	r2, [r7]
 9775 0018 02F11000 		add	r0, r2, #16
 9776              		.loc 12 266 42
 9777 001c 7A68     		ldr	r2, [r7, #4]
 9778 001e 1032     		adds	r2, r2, #16
 9779              		.loc 12 266 21
 9780 0020 1146     		mov	r1, r2
 9781 0022 9847     		blx	r3
 9782              	.LVL10:
 267:Cpp/fixed_size_function.hpp ****         vtable_ = src.vtable_;
 9783              		.loc 12 267 9
 9784 0024 7B68     		ldr	r3, [r7, #4]
 9785 0026 3A68     		ldr	r2, [r7]
 9786 0028 07CA     		ldm	r2, {r0, r1, r2}
 9787 002a 83E80700 		stm	r3, {r0, r1, r2}
 268:Cpp/fixed_size_function.hpp ****         src.reset();
 9788              		.loc 12 268 9
 9789 002e 3868     		ldr	r0, [r7]
 9790 0030 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv
 9791              	.L381:
 269:Cpp/fixed_size_function.hpp ****       }
 270:Cpp/fixed_size_function.hpp ****     } else {
 271:Cpp/fixed_size_function.hpp ****       copy(src);
 272:Cpp/fixed_size_function.hpp ****     }
 273:Cpp/fixed_size_function.hpp ****   }
 9792              		.loc 12 273 3
 9793 0034 00BF     		nop
 9794 0036 0837     		adds	r7, r7, #8
 9795              	.LCFI689:
 9796              		.cfi_def_cfa_offset 8
 9797 0038 BD46     		mov	sp, r7
 9798              	.LCFI690:
 9799              		.cfi_def_cfa_register 13
 9800              		@ sp needed
 9801 003a 80BD     		pop	{r7, pc}
 9802              		.cfi_endproc
 9803              	.LFE4676:
 9805              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_,"axG",%progbits,_Z
 9806              		.align	1
 9807              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_
 9808              		.syntax unified
 9809              		.thumb
 9810              		.thumb_func
 9811              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU23Djm.s 			page 327


 9813              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_:
 9814              	.LFB4677:
 262:Cpp/fixed_size_function.hpp ****   {
 9815              		.loc 12 262 8
 9816              		.cfi_startproc
 9817              		@ args = 0, pretend = 0, frame = 8
 9818              		@ frame_needed = 1, uses_anonymous_args = 0
 9819 0000 80B5     		push	{r7, lr}
 9820              	.LCFI691:
 9821              		.cfi_def_cfa_offset 8
 9822              		.cfi_offset 7, -8
 9823              		.cfi_offset 14, -4
 9824 0002 82B0     		sub	sp, sp, #8
 9825              	.LCFI692:
 9826              		.cfi_def_cfa_offset 16
 9827 0004 00AF     		add	r7, sp, #0
 9828              	.LCFI693:
 9829              		.cfi_def_cfa_register 7
 9830 0006 7860     		str	r0, [r7, #4]
 9831 0008 3960     		str	r1, [r7]
 265:Cpp/fixed_size_function.hpp ****         src.vtable_.move(&src.storage_, &storage_);
 9832              		.loc 12 265 23
 9833 000a 3B68     		ldr	r3, [r7]
 9834 000c 9B68     		ldr	r3, [r3, #8]
 265:Cpp/fixed_size_function.hpp ****         src.vtable_.move(&src.storage_, &storage_);
 9835              		.loc 12 265 7
 9836 000e 002B     		cmp	r3, #0
 9837 0010 10D0     		beq	.L384
 266:Cpp/fixed_size_function.hpp ****         vtable_ = src.vtable_;
 9838              		.loc 12 266 21
 9839 0012 3B68     		ldr	r3, [r7]
 9840 0014 9B68     		ldr	r3, [r3, #8]
 266:Cpp/fixed_size_function.hpp ****         vtable_ = src.vtable_;
 9841              		.loc 12 266 31
 9842 0016 3A68     		ldr	r2, [r7]
 9843 0018 02F11000 		add	r0, r2, #16
 266:Cpp/fixed_size_function.hpp ****         vtable_ = src.vtable_;
 9844              		.loc 12 266 42
 9845 001c 7A68     		ldr	r2, [r7, #4]
 9846 001e 1032     		adds	r2, r2, #16
 266:Cpp/fixed_size_function.hpp ****         vtable_ = src.vtable_;
 9847              		.loc 12 266 21
 9848 0020 1146     		mov	r1, r2
 9849 0022 9847     		blx	r3
 9850              	.LVL11:
 267:Cpp/fixed_size_function.hpp ****         src.reset();
 9851              		.loc 12 267 9
 9852 0024 7B68     		ldr	r3, [r7, #4]
 9853 0026 3A68     		ldr	r2, [r7]
 9854 0028 07CA     		ldm	r2, {r0, r1, r2}
 9855 002a 83E80700 		stm	r3, {r0, r1, r2}
 268:Cpp/fixed_size_function.hpp ****       }
 9856              		.loc 12 268 9
 9857 002e 3868     		ldr	r0, [r7]
 9858 0030 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv
 9859              	.L384:
 9860              		.loc 12 273 3
ARM GAS  /tmp/ccU23Djm.s 			page 328


 9861 0034 00BF     		nop
 9862 0036 0837     		adds	r7, r7, #8
 9863              	.LCFI694:
 9864              		.cfi_def_cfa_offset 8
 9865 0038 BD46     		mov	sp, r7
 9866              	.LCFI695:
 9867              		.cfi_def_cfa_register 13
 9868              		@ sp needed
 9869 003a 80BD     		pop	{r7, pc}
 9870              		.cfi_endproc
 9871              	.LFE4677:
 9873              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv,"axG",%progbits,_ZN1
 9874              		.align	1
 9875              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv
 9876              		.syntax unified
 9877              		.thumb
 9878              		.thumb_func
 9879              		.fpu fpv4-sp-d16
 9881              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv:
 9882              	.LFB4678:
 185:Cpp/fixed_size_function.hpp ****   {
 9883              		.loc 12 185 8
 9884              		.cfi_startproc
 9885              		@ args = 0, pretend = 0, frame = 24
 9886              		@ frame_needed = 1, uses_anonymous_args = 0
 9887 0000 90B5     		push	{r4, r7, lr}
 9888              	.LCFI696:
 9889              		.cfi_def_cfa_offset 12
 9890              		.cfi_offset 4, -12
 9891              		.cfi_offset 7, -8
 9892              		.cfi_offset 14, -4
 9893 0002 87B0     		sub	sp, sp, #28
 9894              	.LCFI697:
 9895              		.cfi_def_cfa_offset 40
 9896 0004 00AF     		add	r7, sp, #0
 9897              	.LCFI698:
 9898              		.cfi_def_cfa_register 7
 9899 0006 7860     		str	r0, [r7, #4]
 187:Cpp/fixed_size_function.hpp ****     if (destroy) {
 9900              		.loc 12 187 10
 9901 0008 7B68     		ldr	r3, [r7, #4]
 9902 000a 5B68     		ldr	r3, [r3, #4]
 9903 000c 7B61     		str	r3, [r7, #20]
 188:Cpp/fixed_size_function.hpp ****       vtable_ = vtable();
 9904              		.loc 12 188 5
 9905 000e 7B69     		ldr	r3, [r7, #20]
 9906 0010 002B     		cmp	r3, #0
 9907 0012 17D0     		beq	.L387
 189:Cpp/fixed_size_function.hpp ****       destroy(&storage_);
 9908              		.loc 12 189 7
 9909 0014 0023     		movs	r3, #0
 9910 0016 BB60     		str	r3, [r7, #8]
 9911 0018 0023     		movs	r3, #0
 9912 001a FB60     		str	r3, [r7, #12]
 9913 001c 0023     		movs	r3, #0
 9914 001e 3B61     		str	r3, [r7, #16]
 9915 0020 07F10803 		add	r3, r7, #8
ARM GAS  /tmp/ccU23Djm.s 			page 329


 9916 0024 1846     		mov	r0, r3
 9917 0026 FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EmJEEC1Ev
 9918 002a 7B68     		ldr	r3, [r7, #4]
 9919 002c 1C46     		mov	r4, r3
 9920 002e 07F10803 		add	r3, r7, #8
 9921 0032 93E80700 		ldm	r3, {r0, r1, r2}
 9922 0036 84E80700 		stm	r4, {r0, r1, r2}
 190:Cpp/fixed_size_function.hpp ****     }
 9923              		.loc 12 190 14
 9924 003a 7B69     		ldr	r3, [r7, #20]
 190:Cpp/fixed_size_function.hpp ****     }
 9925              		.loc 12 190 16
 9926 003c 7A68     		ldr	r2, [r7, #4]
 9927 003e 1032     		adds	r2, r2, #16
 190:Cpp/fixed_size_function.hpp ****     }
 9928              		.loc 12 190 14
 9929 0040 1046     		mov	r0, r2
 9930 0042 9847     		blx	r3
 9931              	.LVL12:
 9932              	.L387:
 192:Cpp/fixed_size_function.hpp **** 
 9933              		.loc 12 192 3
 9934 0044 00BF     		nop
 9935 0046 1C37     		adds	r7, r7, #28
 9936              	.LCFI699:
 9937              		.cfi_def_cfa_offset 12
 9938 0048 BD46     		mov	sp, r7
 9939              	.LCFI700:
 9940              		.cfi_def_cfa_register 13
 9941              		@ sp needed
 9942 004a 90BD     		pop	{r4, r7, pc}
 9943              		.cfi_endproc
 9944              	.LFE4678:
 9946              		.section	.text._ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvE
 9947              		.align	1
 9948              		.weak	_ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14c
 9949              		.syntax unified
 9950              		.thumb
 9951              		.thumb_func
 9952              		.fpu fpv4-sp-d16
 9954              	_ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construc
 9955              	.LFB4679:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 9956              		.loc 13 74 5
 9957              		.cfi_startproc
 9958              		@ args = 0, pretend = 0, frame = 8
 9959              		@ frame_needed = 1, uses_anonymous_args = 0
 9960              		@ link register save eliminated.
 9961 0000 80B4     		push	{r7}
 9962              	.LCFI701:
 9963              		.cfi_def_cfa_offset 4
 9964              		.cfi_offset 7, -4
 9965 0002 83B0     		sub	sp, sp, #12
 9966              	.LCFI702:
 9967              		.cfi_def_cfa_offset 16
 9968 0004 00AF     		add	r7, sp, #0
 9969              	.LCFI703:
ARM GAS  /tmp/ccU23Djm.s 			page 330


 9970              		.cfi_def_cfa_register 7
 9971 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 9972              		.loc 13 75 36
 9973 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 9974              		.loc 13 75 39
 9975 000a 1846     		mov	r0, r3
 9976 000c 0C37     		adds	r7, r7, #12
 9977              	.LCFI704:
 9978              		.cfi_def_cfa_offset 4
 9979 000e BD46     		mov	sp, r7
 9980              	.LCFI705:
 9981              		.cfi_def_cfa_register 13
 9982              		@ sp needed
 9983 0010 5DF8047B 		ldr	r7, [sp], #4
 9984              	.LCFI706:
 9985              		.cfi_restore 7
 9986              		.cfi_def_cfa_offset 0
 9987 0014 7047     		bx	lr
 9988              		.cfi_endproc
 9989              	.LFE4679:
 9991              		.section	.text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14con
 9992              		.align	1
 9993              		.weak	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_ty
 9994              		.syntax unified
 9995              		.thumb
 9996              		.thumb_func
 9997              		.fpu fpv4-sp-d16
 9999              	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmE
 10000              	.LFB4682:
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 10001              		.loc 6 64 40
 10002              		.cfi_startproc
 10003              		@ args = 0, pretend = 0, frame = 8
 10004              		@ frame_needed = 1, uses_anonymous_args = 0
 10005 0000 80B5     		push	{r7, lr}
 10006              	.LCFI707:
 10007              		.cfi_def_cfa_offset 8
 10008              		.cfi_offset 7, -8
 10009              		.cfi_offset 14, -4
 10010 0002 82B0     		sub	sp, sp, #8
 10011              	.LCFI708:
 10012              		.cfi_def_cfa_offset 16
 10013 0004 00AF     		add	r7, sp, #0
 10014              	.LCFI709:
 10015              		.cfi_def_cfa_register 7
 10016 0006 7860     		str	r0, [r7, #4]
 10017 0008 3960     		str	r1, [r7]
 10018              	.LBB78:
  64:Cpp/scheduler.hpp ****         auto repeat = ff();
 10019              		.loc 6 64 40
 10020 000a 3B68     		ldr	r3, [r7]
 10021 000c 1A68     		ldr	r2, [r3]
 10022 000e 7B68     		ldr	r3, [r7, #4]
 10023 0010 1A60     		str	r2, [r3]
 10024 0012 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 331


 10025 0014 03F10802 		add	r2, r3, #8
 10026 0018 3B68     		ldr	r3, [r7]
 10027 001a 0833     		adds	r3, r3, #8
 10028 001c 1946     		mov	r1, r3
 10029 001e 1046     		mov	r0, r2
 10030 0020 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1EOS2_
 10031              	.LBE78:
 10032 0024 7B68     		ldr	r3, [r7, #4]
 10033 0026 1846     		mov	r0, r3
 10034 0028 0837     		adds	r7, r7, #8
 10035              	.LCFI710:
 10036              		.cfi_def_cfa_offset 8
 10037 002a BD46     		mov	sp, r7
 10038              	.LCFI711:
 10039              		.cfi_def_cfa_register 13
 10040              		@ sp needed
 10041 002c 80BD     		pop	{r7, pc}
 10042              		.cfi_endproc
 10043              	.LFE4682:
 10045              		.weak	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_ty
 10046              		.thumb_set _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14constru
 10047              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler
 10048              		.align	1
 10049              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedul
 10050              		.syntax unified
 10051              		.thumb
 10052              		.thumb_func
 10053              		.fpu fpv4-sp-d16
 10055              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedule_cond_
 10056              	.LFB4680:
 239:Cpp/fixed_size_function.hpp ****   {
 10057              		.loc 12 239 8
 10058              		.cfi_startproc
 10059              		@ args = 0, pretend = 0, frame = 16
 10060              		@ frame_needed = 1, uses_anonymous_args = 0
 10061 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10062              	.LCFI712:
 10063              		.cfi_def_cfa_offset 20
 10064              		.cfi_offset 4, -20
 10065              		.cfi_offset 5, -16
 10066              		.cfi_offset 6, -12
 10067              		.cfi_offset 7, -8
 10068              		.cfi_offset 14, -4
 10069 0002 85B0     		sub	sp, sp, #20
 10070              	.LCFI713:
 10071              		.cfi_def_cfa_offset 40
 10072 0004 00AF     		add	r7, sp, #0
 10073              	.LCFI714:
 10074              		.cfi_def_cfa_register 7
 10075 0006 7860     		str	r0, [r7, #4]
 10076 0008 3960     		str	r1, [r7]
 244:Cpp/fixed_size_function.hpp **** 
 10077              		.loc 12 244 55
 10078 000a 3868     		ldr	r0, [r7]
 10079 000c FFF7FEFF 		bl	_ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14cons
 10080 0010 0446     		mov	r4, r0
 244:Cpp/fixed_size_function.hpp **** 
ARM GAS  /tmp/ccU23Djm.s 			page 332


 10081              		.loc 12 244 5
 10082 0012 7B68     		ldr	r3, [r7, #4]
 10083 0014 1033     		adds	r3, r3, #16
 10084 0016 1946     		mov	r1, r3
 10085 0018 3020     		movs	r0, #48
 10086 001a FFF7FEFF 		bl	_ZnwjPv
 10087 001e 0346     		mov	r3, r0
 10088 0020 2146     		mov	r1, r4
 10089 0022 1846     		mov	r0, r3
 10090 0024 FFF7FEFF 		bl	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2
 246:Cpp/fixed_size_function.hpp ****     vtable_.destroy = &destroy_impl<functor_type>;
 10091              		.loc 12 246 5
 10092 0028 7B68     		ldr	r3, [r7, #4]
 10093 002a 084A     		ldr	r2, .L393
 10094 002c 1A60     		str	r2, [r3]
 247:Cpp/fixed_size_function.hpp ****     init_copy<functor_type>(is_copyable());
 10095              		.loc 12 247 5
 10096 002e 7B68     		ldr	r3, [r7, #4]
 10097 0030 074A     		ldr	r2, .L393+4
 10098 0032 5A60     		str	r2, [r3, #4]
 248:Cpp/fixed_size_function.hpp ****     init_move<functor_type>(is_movable());
 10099              		.loc 12 248 5
 10100 0034 3146     		mov	r1, r6
 10101 0036 7868     		ldr	r0, [r7, #4]
 10102 0038 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Scheduler20schedul
 249:Cpp/fixed_size_function.hpp ****   }
 10103              		.loc 12 249 5
 10104 003c 2946     		mov	r1, r5
 10105 003e 7868     		ldr	r0, [r7, #4]
 10106 0040 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20schedul
 250:Cpp/fixed_size_function.hpp **** 
 10107              		.loc 12 250 3
 10108 0044 00BF     		nop
 10109 0046 1437     		adds	r7, r7, #20
 10110              	.LCFI715:
 10111              		.cfi_def_cfa_offset 20
 10112 0048 BD46     		mov	sp, r7
 10113              	.LCFI716:
 10114              		.cfi_def_cfa_register 13
 10115              		@ sp needed
 10116 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 10117              	.L394:
 10118              		.align	2
 10119              	.L393:
 10120 004c 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Scheduler20sche
 10121 0050 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Scheduler20
 10122              		.cfi_endproc
 10123              	.LFE4680:
 10125              		.section	.text._ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_,"axG",%progbits,_ZSt7launderIN4otto3
 10126              		.align	1
 10127              		.weak	_ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_
 10128              		.syntax unified
 10129              		.thumb
 10130              		.thumb_func
 10131              		.fpu fpv4-sp-d16
 10133              	_ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_:
 10134              	.LFB4684:
ARM GAS  /tmp/ccU23Djm.s 			page 333


 175:/usr/arm-none-eabi/include/c++/9.3.0/new **** _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 176:/usr/arm-none-eabi/include/c++/9.3.0/new **** { return __p; }
 177:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 178:/usr/arm-none-eabi/include/c++/9.3.0/new **** // Default placement versions of operator delete.
 179:/usr/arm-none-eabi/include/c++/9.3.0/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 180:/usr/arm-none-eabi/include/c++/9.3.0/new **** inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 181:/usr/arm-none-eabi/include/c++/9.3.0/new **** //@}
 182:/usr/arm-none-eabi/include/c++/9.3.0/new **** } // extern "C++"
 183:/usr/arm-none-eabi/include/c++/9.3.0/new **** 
 184:/usr/arm-none-eabi/include/c++/9.3.0/new **** #if __cplusplus >= 201703L
 185:/usr/arm-none-eabi/include/c++/9.3.0/new **** #ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER
 186:/usr/arm-none-eabi/include/c++/9.3.0/new **** namespace std
 187:/usr/arm-none-eabi/include/c++/9.3.0/new **** {
 188:/usr/arm-none-eabi/include/c++/9.3.0/new **** #define __cpp_lib_launder 201606
 189:/usr/arm-none-eabi/include/c++/9.3.0/new ****   /// Pointer optimization barrier [ptr.launder]
 190:/usr/arm-none-eabi/include/c++/9.3.0/new ****   template<typename _Tp>
 191:/usr/arm-none-eabi/include/c++/9.3.0/new ****     [[nodiscard]] constexpr _Tp*
 192:/usr/arm-none-eabi/include/c++/9.3.0/new ****     launder(_Tp* __p) noexcept
 10135              		.loc 3 192 5
 10136              		.cfi_startproc
 10137              		@ args = 0, pretend = 0, frame = 8
 10138              		@ frame_needed = 1, uses_anonymous_args = 0
 10139              		@ link register save eliminated.
 10140 0000 80B4     		push	{r7}
 10141              	.LCFI717:
 10142              		.cfi_def_cfa_offset 4
 10143              		.cfi_offset 7, -4
 10144 0002 83B0     		sub	sp, sp, #12
 10145              	.LCFI718:
 10146              		.cfi_def_cfa_offset 16
 10147 0004 00AF     		add	r7, sp, #0
 10148              	.LCFI719:
 10149              		.cfi_def_cfa_register 7
 10150 0006 7860     		str	r0, [r7, #4]
 193:/usr/arm-none-eabi/include/c++/9.3.0/new ****     { return __builtin_launder(__p); }
 10151              		.loc 3 193 35
 10152 0008 7B68     		ldr	r3, [r7, #4]
 10153              		.loc 3 193 38
 10154 000a 1846     		mov	r0, r3
 10155 000c 0C37     		adds	r7, r7, #12
 10156              	.LCFI720:
 10157              		.cfi_def_cfa_offset 4
 10158 000e BD46     		mov	sp, r7
 10159              	.LCFI721:
 10160              		.cfi_def_cfa_register 13
 10161              		@ sp needed
 10162 0010 5DF8047B 		ldr	r7, [sp], #4
 10163              	.LCFI722:
 10164              		.cfi_restore 7
 10165              		.cfi_def_cfa_offset 0
 10166 0014 7047     		bx	lr
 10167              		.cfi_endproc
 10168              	.LFE4684:
 10170              		.section	.text._ZN4otto3mcu9Scheduler4TaskaSEOS2_,"axG",%progbits,_ZN4otto3mcu9Scheduler4TaskaSEOS
 10171              		.align	1
 10172              		.weak	_ZN4otto3mcu9Scheduler4TaskaSEOS2_
 10173              		.syntax unified
ARM GAS  /tmp/ccU23Djm.s 			page 334


 10174              		.thumb
 10175              		.thumb_func
 10176              		.fpu fpv4-sp-d16
 10178              	_ZN4otto3mcu9Scheduler4TaskaSEOS2_:
 10179              	.LFB4686:
  17:Cpp/scheduler.hpp ****       /// Function to execute
 10180              		.loc 6 17 12
 10181              		.cfi_startproc
 10182              		@ args = 0, pretend = 0, frame = 8
 10183              		@ frame_needed = 1, uses_anonymous_args = 0
 10184 0000 80B5     		push	{r7, lr}
 10185              	.LCFI723:
 10186              		.cfi_def_cfa_offset 8
 10187              		.cfi_offset 7, -8
 10188              		.cfi_offset 14, -4
 10189 0002 82B0     		sub	sp, sp, #8
 10190              	.LCFI724:
 10191              		.cfi_def_cfa_offset 16
 10192 0004 00AF     		add	r7, sp, #0
 10193              	.LCFI725:
 10194              		.cfi_def_cfa_register 7
 10195 0006 7860     		str	r0, [r7, #4]
 10196 0008 3960     		str	r1, [r7]
  17:Cpp/scheduler.hpp ****       /// Function to execute
 10197              		.loc 6 17 12
 10198 000a 3A68     		ldr	r2, [r7]
 10199 000c 7B68     		ldr	r3, [r7, #4]
 10200 000e 1146     		mov	r1, r2
 10201 0010 1846     		mov	r0, r3
 10202 0012 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_
 10203 0016 3B68     		ldr	r3, [r7]
 10204 0018 9A6C     		ldr	r2, [r3, #72]
 10205 001a 7B68     		ldr	r3, [r7, #4]
 10206 001c 9A64     		str	r2, [r3, #72]
 10207 001e 3B68     		ldr	r3, [r7]
 10208 0020 DA6C     		ldr	r2, [r3, #76]
 10209 0022 7B68     		ldr	r3, [r7, #4]
 10210 0024 DA64     		str	r2, [r3, #76]
 10211 0026 7B68     		ldr	r3, [r7, #4]
 10212 0028 1846     		mov	r0, r3
 10213 002a 0837     		adds	r7, r7, #8
 10214              	.LCFI726:
 10215              		.cfi_def_cfa_offset 8
 10216 002c BD46     		mov	sp, r7
 10217              	.LCFI727:
 10218              		.cfi_def_cfa_register 13
 10219              		@ sp needed
 10220 002e 80BD     		pop	{r7, pc}
 10221              		.cfi_endproc
 10222              	.LFE4686:
 10224              		.section	.text._ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7g
 10225              		.align	1
 10226              		.weak	_ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3
 10227              		.syntax unified
 10228              		.thumb
 10229              		.thumb_func
 10230              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU23Djm.s 			page 335


 10232              	_ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT
 10233              	.LFB4685:
 243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	       _RandomAccessIterator __result, _Compare& __comp)
 10234              		.loc 14 243 5
 10235              		.cfi_startproc
 10236              		@ args = 0, pretend = 0, frame = 176
 10237              		@ frame_needed = 1, uses_anonymous_args = 0
 10238 0000 90B5     		push	{r4, r7, lr}
 10239              	.LCFI728:
 10240              		.cfi_def_cfa_offset 12
 10241              		.cfi_offset 4, -12
 10242              		.cfi_offset 7, -8
 10243              		.cfi_offset 14, -4
 10244 0002 AFB0     		sub	sp, sp, #188
 10245              	.LCFI729:
 10246              		.cfi_def_cfa_offset 200
 10247 0004 02AF     		add	r7, sp, #8
 10248              	.LCFI730:
 10249              		.cfi_def_cfa 7, 192
 10250 0006 F860     		str	r0, [r7, #12]
 10251 0008 B960     		str	r1, [r7, #8]
 10252 000a 7A60     		str	r2, [r7, #4]
 10253 000c 3B60     		str	r3, [r7]
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 10254              		.loc 14 251 28
 10255 000e 7868     		ldr	r0, [r7, #4]
 10256 0010 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 10257 0014 0246     		mov	r2, r0
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 10258              		.loc 14 251 18
 10259 0016 07F11003 		add	r3, r7, #16
 10260 001a 1146     		mov	r1, r2
 10261 001c 1846     		mov	r0, r3
 10262 001e FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__adjust_heap(__first, _DistanceType(0),
 10263              		.loc 14 252 19
 10264 0022 F868     		ldr	r0, [r7, #12]
 10265 0024 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 10266 0028 0346     		mov	r3, r0
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__adjust_heap(__first, _DistanceType(0),
 10267              		.loc 14 252 17
 10268 002a 1946     		mov	r1, r3
 10269 002c 7868     		ldr	r0, [r7, #4]
 10270 002e FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskaSEOS2_
 254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 			 _GLIBCXX_MOVE(__value), __comp);
 10271              		.loc 14 254 26
 10272 0032 BA68     		ldr	r2, [r7, #8]
 10273 0034 FB68     		ldr	r3, [r7, #12]
 10274 0036 D31A     		subs	r3, r2, r3
 10275 0038 1B11     		asrs	r3, r3, #4
 10276 003a 154A     		ldr	r2, .L400
 10277 003c 02FB03F3 		mul	r3, r2, r3
 10278 0040 1C46     		mov	r4, r3
 255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 10279              		.loc 14 255 5
 10280 0042 07F11003 		add	r3, r7, #16
 10281 0046 1846     		mov	r0, r3
ARM GAS  /tmp/ccU23Djm.s 			page 336


 10282 0048 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 10283 004c 0246     		mov	r2, r0
 253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 			 _DistanceType(__last - __first),
 10284              		.loc 14 253 25
 10285 004e 07F16003 		add	r3, r7, #96
 10286 0052 1146     		mov	r1, r2
 10287 0054 1846     		mov	r0, r3
 10288 0056 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 10289 005a 07F16002 		add	r2, r7, #96
 10290 005e 3B68     		ldr	r3, [r7]
 10291 0060 1B78     		ldrb	r3, [r3]
 10292 0062 8DF80030 		strb	r3, [sp]
 10293 0066 1346     		mov	r3, r2
 10294 0068 2246     		mov	r2, r4
 10295 006a 0021     		movs	r1, #0
 10296 006c F868     		ldr	r0, [r7, #12]
 10297 006e FFF7FEFF 		bl	_ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_iterISt7greate
 10298 0072 07F16003 		add	r3, r7, #96
 10299 0076 1846     		mov	r0, r3
 10300 0078 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 10301              		.loc 14 251 18
 10302 007c 07F11003 		add	r3, r7, #16
 10303 0080 1846     		mov	r0, r3
 10304 0082 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 10305              		.loc 14 256 5
 10306 0086 00BF     		nop
 10307 0088 B437     		adds	r7, r7, #180
 10308              	.LCFI731:
 10309              		.cfi_def_cfa_offset 12
 10310 008a BD46     		mov	sp, r7
 10311              	.LCFI732:
 10312              		.cfi_def_cfa_register 13
 10313              		@ sp needed
 10314 008c 90BD     		pop	{r4, r7, pc}
 10315              	.L401:
 10316 008e 00BF     		.align	2
 10317              	.L400:
 10318 0090 CDCCCCCC 		.word	-858993459
 10319              		.cfi_endproc
 10320              	.LFE4685:
 10322              		.section	.text._ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16
 10323              		.align	1
 10324              		.weak	_ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_re
 10325              		.syntax unified
 10326              		.thumb
 10327              		.thumb_func
 10328              		.fpu fpv4-sp-d16
 10330              	_ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_reference
 10331              	.LFB4687:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 10332              		.loc 13 99 5
 10333              		.cfi_startproc
 10334              		@ args = 0, pretend = 0, frame = 8
 10335              		@ frame_needed = 1, uses_anonymous_args = 0
 10336              		@ link register save eliminated.
ARM GAS  /tmp/ccU23Djm.s 			page 337


 10337 0000 80B4     		push	{r7}
 10338              	.LCFI733:
 10339              		.cfi_def_cfa_offset 4
 10340              		.cfi_offset 7, -4
 10341 0002 83B0     		sub	sp, sp, #12
 10342              	.LCFI734:
 10343              		.cfi_def_cfa_offset 16
 10344 0004 00AF     		add	r7, sp, #0
 10345              	.LCFI735:
 10346              		.cfi_def_cfa_register 7
 10347 0006 7860     		str	r0, [r7, #4]
 10348              		.loc 13 100 74
 10349 0008 7B68     		ldr	r3, [r7, #4]
 10350              		.loc 13 100 77
 10351 000a 1846     		mov	r0, r3
 10352 000c 0C37     		adds	r7, r7, #12
 10353              	.LCFI736:
 10354              		.cfi_def_cfa_offset 4
 10355 000e BD46     		mov	sp, r7
 10356              	.LCFI737:
 10357              		.cfi_def_cfa_register 13
 10358              		@ sp needed
 10359 0010 5DF8047B 		ldr	r7, [sp], #4
 10360              	.LCFI738:
 10361              		.cfi_restore 7
 10362              		.cfi_def_cfa_offset 0
 10363 0014 7047     		bx	lr
 10364              		.cfi_endproc
 10365              	.LFE4687:
 10367              		.section	.text._ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5erro
 10368              		.align	1
 10369              		.weak	_ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5value
 10370              		.syntax unified
 10371              		.thumb
 10372              		.thumb_func
 10373              		.fpu fpv4-sp-d16
 10375              	_ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5valueEv:
 10376              	.LFB4688:
 160:Cpp/expected.hpp ****   /// \group unexpected_value
 10377              		.loc 7 160 31
 10378              		.cfi_startproc
 10379              		@ args = 0, pretend = 0, frame = 8
 10380              		@ frame_needed = 1, uses_anonymous_args = 0
 10381              		@ link register save eliminated.
 10382 0000 80B4     		push	{r7}
 10383              	.LCFI739:
 10384              		.cfi_def_cfa_offset 4
 10385              		.cfi_offset 7, -4
 10386 0002 83B0     		sub	sp, sp, #12
 10387              	.LCFI740:
 10388              		.cfi_def_cfa_offset 16
 10389 0004 00AF     		add	r7, sp, #0
 10390              	.LCFI741:
 10391              		.cfi_def_cfa_register 7
 10392 0006 7860     		str	r0, [r7, #4]
 160:Cpp/expected.hpp ****   /// \group unexpected_value
 10393              		.loc 7 160 50
ARM GAS  /tmp/ccU23Djm.s 			page 338


 10394 0008 7B68     		ldr	r3, [r7, #4]
 160:Cpp/expected.hpp ****   /// \group unexpected_value
 10395              		.loc 7 160 57
 10396 000a 1846     		mov	r0, r3
 10397 000c 0C37     		adds	r7, r7, #12
 10398              	.LCFI742:
 10399              		.cfi_def_cfa_offset 4
 10400 000e BD46     		mov	sp, r7
 10401              	.LCFI743:
 10402              		.cfi_def_cfa_register 13
 10403              		@ sp needed
 10404 0010 5DF8047B 		ldr	r7, [sp], #4
 10405              	.LCFI744:
 10406              		.cfi_restore 7
 10407              		.cfi_def_cfa_offset 0
 10408 0014 7047     		bx	lr
 10409              		.cfi_endproc
 10410              	.LFE4688:
 10412              		.section	.text._ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_R
 10413              		.align	1
 10414              		.weak	_ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remo
 10415              		.syntax unified
 10416              		.thumb
 10417              		.thumb_func
 10418              		.fpu fpv4-sp-d16
 10420              	_ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remove_refe
 10421              	.LFB4690:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 10422              		.loc 13 74 5
 10423              		.cfi_startproc
 10424              		@ args = 0, pretend = 0, frame = 8
 10425              		@ frame_needed = 1, uses_anonymous_args = 0
 10426              		@ link register save eliminated.
 10427 0000 80B4     		push	{r7}
 10428              	.LCFI745:
 10429              		.cfi_def_cfa_offset 4
 10430              		.cfi_offset 7, -4
 10431 0002 83B0     		sub	sp, sp, #12
 10432              	.LCFI746:
 10433              		.cfi_def_cfa_offset 16
 10434 0004 00AF     		add	r7, sp, #0
 10435              	.LCFI747:
 10436              		.cfi_def_cfa_register 7
 10437 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 10438              		.loc 13 75 36
 10439 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 10440              		.loc 13 75 39
 10441 000a 1846     		mov	r0, r3
 10442 000c 0C37     		adds	r7, r7, #12
 10443              	.LCFI748:
 10444              		.cfi_def_cfa_offset 4
 10445 000e BD46     		mov	sp, r7
 10446              	.LCFI749:
 10447              		.cfi_def_cfa_register 13
 10448              		@ sp needed
ARM GAS  /tmp/ccU23Djm.s 			page 339


 10449 0010 5DF8047B 		ldr	r7, [sp], #4
 10450              	.LCFI750:
 10451              		.cfi_restore 7
 10452              		.cfi_def_cfa_offset 0
 10453 0014 7047     		bx	lr
 10454              		.cfi_endproc
 10455              	.LFE4690:
 10457              		.section	.text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4
 10458              		.align	1
 10459              		.weak	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj10
 10460              		.syntax unified
 10461              		.thumb
 10462              		.thumb_func
 10463              		.fpu fpv4-sp-d16
 10465              	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5er
 10466              	.LFB4691:
 538:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 10467              		.loc 7 538 22
 10468              		.cfi_startproc
 10469              		@ args = 0, pretend = 0, frame = 16
 10470              		@ frame_needed = 1, uses_anonymous_args = 0
 10471 0000 90B5     		push	{r4, r7, lr}
 10472              	.LCFI751:
 10473              		.cfi_def_cfa_offset 12
 10474              		.cfi_offset 4, -12
 10475              		.cfi_offset 7, -8
 10476              		.cfi_offset 14, -4
 10477 0002 85B0     		sub	sp, sp, #20
 10478              	.LCFI752:
 10479              		.cfi_def_cfa_offset 32
 10480 0004 00AF     		add	r7, sp, #0
 10481              	.LCFI753:
 10482              		.cfi_def_cfa_register 7
 10483 0006 F860     		str	r0, [r7, #12]
 10484 0008 3972     		strb	r1, [r7, #8]
 10485 000a 7A60     		str	r2, [r7, #4]
 10486              	.LBB79:
 539:Cpp/expected.hpp **** 
 10487              		.loc 7 539 65
 10488 000c FC68     		ldr	r4, [r7, #12]
 10489 000e 7868     		ldr	r0, [r7, #4]
 10490 0010 FFF7FEFF 		bl	_ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remove_
 10491 0014 0346     		mov	r3, r0
 10492 0016 1946     		mov	r1, r3
 10493 0018 2046     		mov	r0, r4
 10494 001a FFF7FEFF 		bl	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1EOS8_
 10495 001e FB68     		ldr	r3, [r7, #12]
 10496 0020 0022     		movs	r2, #0
 10497 0022 1A71     		strb	r2, [r3, #4]
 10498              	.LBE79:
 539:Cpp/expected.hpp **** 
 10499              		.loc 7 539 68
 10500 0024 FB68     		ldr	r3, [r7, #12]
 10501 0026 1846     		mov	r0, r3
 10502 0028 1437     		adds	r7, r7, #20
 10503              	.LCFI754:
 10504              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccU23Djm.s 			page 340


 10505 002a BD46     		mov	sp, r7
 10506              	.LCFI755:
 10507              		.cfi_def_cfa_register 13
 10508              		@ sp needed
 10509 002c 90BD     		pop	{r4, r7, pc}
 10510              		.cfi_endproc
 10511              	.LFE4691:
 10513              		.weak	_ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj10
 10514              		.thumb_set _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Task
 10515              		.section	.text._ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Sched
 10516              		.align	1
 10517              		.weak	_ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Task
 10518              		.syntax unified
 10519              		.thumb
 10520              		.thumb_func
 10521              		.fpu fpv4-sp-d16
 10523              	_ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024
 10524              	.LFB4694:
1087:Cpp/expected.hpp **** };
 10525              		.loc 7 1087 22
 10526              		.cfi_startproc
 10527              		@ args = 0, pretend = 0, frame = 8
 10528              		@ frame_needed = 1, uses_anonymous_args = 0
 10529              		@ link register save eliminated.
 10530 0000 80B4     		push	{r7}
 10531              	.LCFI756:
 10532              		.cfi_def_cfa_offset 4
 10533              		.cfi_offset 7, -4
 10534 0002 83B0     		sub	sp, sp, #12
 10535              	.LCFI757:
 10536              		.cfi_def_cfa_offset 16
 10537 0004 00AF     		add	r7, sp, #0
 10538              	.LCFI758:
 10539              		.cfi_def_cfa_register 7
 10540 0006 7860     		str	r0, [r7, #4]
 10541 0008 3970     		strb	r1, [r7]
1087:Cpp/expected.hpp **** };
 10542              		.loc 7 1087 75
 10543 000a 7B68     		ldr	r3, [r7, #4]
 10544 000c 1846     		mov	r0, r3
 10545 000e 0C37     		adds	r7, r7, #12
 10546              	.LCFI759:
 10547              		.cfi_def_cfa_offset 4
 10548 0010 BD46     		mov	sp, r7
 10549              	.LCFI760:
 10550              		.cfi_def_cfa_register 13
 10551              		@ sp needed
 10552 0012 5DF8047B 		ldr	r7, [sp], #4
 10553              	.LCFI761:
 10554              		.cfi_restore 7
 10555              		.cfi_def_cfa_offset 0
 10556 0016 7047     		bx	lr
 10557              		.cfi_endproc
 10558              	.LFE4694:
 10560              		.weak	_ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4Task
 10561              		.thumb_set _ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler
 10562              		.section	.text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_ve
ARM GAS  /tmp/ccU23Djm.s 			page 341


 10563              		.align	1
 10564              		.weak	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_L
 10565              		.syntax unified
 10566              		.thumb
 10567              		.thumb_func
 10568              		.fpu fpv4-sp-d16
 10570              	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE
 10571              	.LFB4697:
 418:Cpp/expected.hpp ****       : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
 10572              		.loc 7 418 22
 10573              		.cfi_startproc
 10574              		@ args = 0, pretend = 0, frame = 16
 10575              		@ frame_needed = 1, uses_anonymous_args = 0
 10576 0000 90B5     		push	{r4, r7, lr}
 10577              	.LCFI762:
 10578              		.cfi_def_cfa_offset 12
 10579              		.cfi_offset 4, -12
 10580              		.cfi_offset 7, -8
 10581              		.cfi_offset 14, -4
 10582 0002 85B0     		sub	sp, sp, #20
 10583              	.LCFI763:
 10584              		.cfi_def_cfa_offset 32
 10585 0004 00AF     		add	r7, sp, #0
 10586              	.LCFI764:
 10587              		.cfi_def_cfa_register 7
 10588 0006 F860     		str	r0, [r7, #12]
 10589 0008 3972     		strb	r1, [r7, #8]
 10590 000a 7A60     		str	r2, [r7, #4]
 10591              	.LBB80:
 419:Cpp/expected.hpp **** 
 10592              		.loc 7 419 65
 10593 000c FC68     		ldr	r4, [r7, #12]
 10594 000e 7868     		ldr	r0, [r7, #4]
 10595 0010 FFF7FEFF 		bl	_ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remove_
 10596 0014 0346     		mov	r3, r0
 10597 0016 1946     		mov	r1, r3
 10598 0018 2046     		mov	r0, r4
 10599 001a FFF7FEFF 		bl	_ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1EOS8_
 10600 001e FB68     		ldr	r3, [r7, #12]
 10601 0020 0022     		movs	r2, #0
 10602 0022 1A71     		strb	r2, [r3, #4]
 10603              	.LBE80:
 419:Cpp/expected.hpp **** 
 10604              		.loc 7 419 68
 10605 0024 FB68     		ldr	r3, [r7, #12]
 10606 0026 1846     		mov	r0, r3
 10607 0028 1437     		adds	r7, r7, #20
 10608              	.LCFI765:
 10609              		.cfi_def_cfa_offset 12
 10610 002a BD46     		mov	sp, r7
 10611              	.LCFI766:
 10612              		.cfi_def_cfa_register 13
 10613              		@ sp needed
 10614 002c 90BD     		pop	{r4, r7, pc}
 10615              		.cfi_endproc
 10616              	.LFE4697:
 10618              		.weak	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_L
ARM GAS  /tmp/ccU23Djm.s 			page 342


 10619              		.thumb_set _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vector
 10620              		.section	.text._ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12loc
 10621              		.align	1
 10622              		.weak	_ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vector
 10623              		.syntax unified
 10624              		.thumb
 10625              		.thumb_func
 10626              		.fpu fpv4-sp-d16
 10628              	_ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1
 10629              	.LFB4700:
1087:Cpp/expected.hpp **** };
 10630              		.loc 7 1087 22
 10631              		.cfi_startproc
 10632              		@ args = 0, pretend = 0, frame = 8
 10633              		@ frame_needed = 1, uses_anonymous_args = 0
 10634              		@ link register save eliminated.
 10635 0000 80B4     		push	{r7}
 10636              	.LCFI767:
 10637              		.cfi_def_cfa_offset 4
 10638              		.cfi_offset 7, -4
 10639 0002 83B0     		sub	sp, sp, #12
 10640              	.LCFI768:
 10641              		.cfi_def_cfa_offset 16
 10642 0004 00AF     		add	r7, sp, #0
 10643              	.LCFI769:
 10644              		.cfi_def_cfa_register 7
 10645 0006 7860     		str	r0, [r7, #4]
 10646 0008 3970     		strb	r1, [r7]
1087:Cpp/expected.hpp **** };
 10647              		.loc 7 1087 75
 10648 000a 7B68     		ldr	r3, [r7, #4]
 10649 000c 1846     		mov	r0, r3
 10650 000e 0C37     		adds	r7, r7, #12
 10651              	.LCFI770:
 10652              		.cfi_def_cfa_offset 4
 10653 0010 BD46     		mov	sp, r7
 10654              	.LCFI771:
 10655              		.cfi_def_cfa_register 13
 10656              		@ sp needed
 10657 0012 5DF8047B 		ldr	r7, [sp], #4
 10658              	.LCFI772:
 10659              		.cfi_restore 7
 10660              		.cfi_def_cfa_offset 0
 10661 0016 7047     		bx	lr
 10662              		.cfi_endproc
 10663              	.LFE4700:
 10665              		.weak	_ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vector
 10666              		.thumb_set _ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_v
 10667              		.section	.text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_ve
 10668              		.align	1
 10669              		.weak	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_L
 10670              		.syntax unified
 10671              		.thumb
 10672              		.thumb_func
 10673              		.fpu fpv4-sp-d16
 10675              	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE
 10676              	.LFB4703:
ARM GAS  /tmp/ccU23Djm.s 			page 343


 406:Cpp/expected.hpp ****       : m_val(std::forward<Args>(args)...), m_has_val(true) {}
 10677              		.loc 7 406 13
 10678              		.cfi_startproc
 10679              		@ args = 0, pretend = 0, frame = 16
 10680              		@ frame_needed = 1, uses_anonymous_args = 0
 10681 0000 80B5     		push	{r7, lr}
 10682              	.LCFI773:
 10683              		.cfi_def_cfa_offset 8
 10684              		.cfi_offset 7, -8
 10685              		.cfi_offset 14, -4
 10686 0002 84B0     		sub	sp, sp, #16
 10687              	.LCFI774:
 10688              		.cfi_def_cfa_offset 24
 10689 0004 00AF     		add	r7, sp, #0
 10690              	.LCFI775:
 10691              		.cfi_def_cfa_register 7
 10692 0006 F860     		str	r0, [r7, #12]
 10693 0008 3972     		strb	r1, [r7, #8]
 10694 000a 7A60     		str	r2, [r7, #4]
 10695              	.LBB81:
 407:Cpp/expected.hpp **** 
 10696              		.loc 7 407 33
 10697 000c 7868     		ldr	r0, [r7, #4]
 10698 000e FFF7FEFF 		bl	_ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE
 10699 0012 0346     		mov	r3, r0
 407:Cpp/expected.hpp **** 
 10700              		.loc 7 407 59
 10701 0014 1A68     		ldr	r2, [r3]
 10702 0016 FB68     		ldr	r3, [r7, #12]
 10703 0018 1A60     		str	r2, [r3]
 10704 001a FB68     		ldr	r3, [r7, #12]
 10705 001c 0122     		movs	r2, #1
 10706 001e 1A71     		strb	r2, [r3, #4]
 10707              	.LBE81:
 407:Cpp/expected.hpp **** 
 10708              		.loc 7 407 62
 10709 0020 FB68     		ldr	r3, [r7, #12]
 10710 0022 1846     		mov	r0, r3
 10711 0024 1037     		adds	r7, r7, #16
 10712              	.LCFI776:
 10713              		.cfi_def_cfa_offset 8
 10714 0026 BD46     		mov	sp, r7
 10715              	.LCFI777:
 10716              		.cfi_def_cfa_register 13
 10717              		@ sp needed
 10718 0028 80BD     		pop	{r7, pc}
 10719              		.cfi_endproc
 10720              	.LFE4703:
 10722              		.weak	_ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_L
 10723              		.thumb_set _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vector
 10724              		.section	.text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_,"
 10725              		.align	1
 10726              		.weak	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_
 10727              		.syntax unified
 10728              		.thumb
 10729              		.thumb_func
 10730              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU23Djm.s 			page 344


 10732              	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_:
 10733              	.LFB4706:
 10734              		.file 19 "/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // Default predicates for internal use -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // Copyright (C) 2013-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** /** @file predefined_ops.h
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****  *  You should not attempt to use it directly. @headername{algorithm}
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****  */
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #ifndef _GLIBCXX_PREDEFINED_OPS_H
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #define _GLIBCXX_PREDEFINED_OPS_H	1
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** namespace __gnu_cxx
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** {
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** namespace __ops
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** {
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   struct _Iter_less_iter
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   {
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     template<typename _Iterator1, typename _Iterator2>
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _GLIBCXX14_CONSTEXPR
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       bool
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       operator()(_Iterator1 __it1, _Iterator2 __it2) const
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { return *__it1 < *__it2; }
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   };
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   _GLIBCXX14_CONSTEXPR
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Iter_less_iter
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __iter_less_iter()
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Iter_less_iter(); }
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   struct _Iter_less_val
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   {
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #if __cplusplus >= 201103L
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     constexpr _Iter_less_val() = default;
ARM GAS  /tmp/ccU23Djm.s 			page 345


  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #else
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     _Iter_less_val() { }
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #endif
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     explicit
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     _Iter_less_val(_Iter_less_iter) { }
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     template<typename _Iterator, typename _Value>
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       bool
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       operator()(_Iterator __it, _Value& __val) const
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { return *__it < __val; }
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   };
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Iter_less_val
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __iter_less_val()
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Iter_less_val(); }
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Iter_less_val
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __iter_comp_val(_Iter_less_iter)
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Iter_less_val(); }
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   struct _Val_less_iter
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   {
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #if __cplusplus >= 201103L
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     constexpr _Val_less_iter() = default;
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #else
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     _Val_less_iter() { }
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #endif
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     explicit
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     _Val_less_iter(_Iter_less_iter) { }
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     template<typename _Value, typename _Iterator>
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       bool
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       operator()(_Value& __val, _Iterator __it) const
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { return __val < *__it; }
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   };
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Val_less_iter
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __val_less_iter()
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Val_less_iter(); }
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Val_less_iter
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __val_comp_iter(_Iter_less_iter)
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Val_less_iter(); }
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 101:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   struct _Iter_equal_to_iter
 102:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   {
 103:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     template<typename _Iterator1, typename _Iterator2>
 104:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       bool
 105:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       operator()(_Iterator1 __it1, _Iterator2 __it2) const
 106:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { return *__it1 == *__it2; }
 107:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   };
 108:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 109:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Iter_equal_to_iter
 110:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __iter_equal_to_iter()
 111:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Iter_equal_to_iter(); }
ARM GAS  /tmp/ccU23Djm.s 			page 346


 112:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 113:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   struct _Iter_equal_to_val
 114:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   {
 115:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     template<typename _Iterator, typename _Value>
 116:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       bool
 117:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       operator()(_Iterator __it, _Value& __val) const
 118:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { return *__it == __val; }
 119:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   };
 120:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 121:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Iter_equal_to_val
 122:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __iter_equal_to_val()
 123:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Iter_equal_to_val(); }
 124:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 125:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   inline _Iter_equal_to_val
 126:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   __iter_comp_val(_Iter_equal_to_iter)
 127:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   { return _Iter_equal_to_val(); }
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 129:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   template<typename _Compare>
 130:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     struct _Iter_comp_iter
 131:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     {
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _Compare _M_comp;
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 134:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       explicit _GLIBCXX14_CONSTEXPR
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _Iter_comp_iter(_Compare __comp)
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	: _M_comp(_GLIBCXX_MOVE(__comp))
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { }
 138:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       template<typename _Iterator1, typename _Iterator2>
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****         _GLIBCXX14_CONSTEXPR
 141:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****         bool
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****         operator()(_Iterator1 __it1, _Iterator2 __it2)
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****         { return bool(_M_comp(*__it1, *__it2)); }
 144:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     };
 145:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 146:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   template<typename _Compare>
 147:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     _GLIBCXX14_CONSTEXPR
 148:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     inline _Iter_comp_iter<_Compare>
 149:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     __iter_comp_iter(_Compare __comp)
 150:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 151:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 152:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****   template<typename _Compare>
 153:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     struct _Iter_comp_val
 154:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     {
 155:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _Compare _M_comp;
 156:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 157:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       explicit
 158:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _Iter_comp_val(_Compare __comp)
 10735              		.loc 19 158 7
 10736              		.cfi_startproc
 10737              		@ args = 0, pretend = 0, frame = 8
 10738              		@ frame_needed = 1, uses_anonymous_args = 0
 10739 0000 80B5     		push	{r7, lr}
 10740              	.LCFI778:
 10741              		.cfi_def_cfa_offset 8
 10742              		.cfi_offset 7, -8
 10743              		.cfi_offset 14, -4
 10744 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccU23Djm.s 			page 347


 10745              	.LCFI779:
 10746              		.cfi_def_cfa_offset 16
 10747 0004 00AF     		add	r7, sp, #0
 10748              	.LCFI780:
 10749              		.cfi_def_cfa_register 7
 10750 0006 7860     		str	r0, [r7, #4]
 10751 0008 3970     		strb	r1, [r7]
 10752              	.LBB82:
 159:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	: _M_comp(_GLIBCXX_MOVE(__comp))
 10753              		.loc 19 159 12
 10754 000a 3B46     		mov	r3, r7
 10755 000c 1846     		mov	r0, r3
 10756 000e FFF7FEFF 		bl	_ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_
 10757              	.LBE82:
 160:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { }
 10758              		.loc 19 160 9
 10759 0012 7B68     		ldr	r3, [r7, #4]
 10760 0014 1846     		mov	r0, r3
 10761 0016 0837     		adds	r7, r7, #8
 10762              	.LCFI781:
 10763              		.cfi_def_cfa_offset 8
 10764 0018 BD46     		mov	sp, r7
 10765              	.LCFI782:
 10766              		.cfi_def_cfa_register 13
 10767              		@ sp needed
 10768 001a 80BD     		pop	{r7, pc}
 10769              		.cfi_endproc
 10770              	.LFE4706:
 10772              		.weak	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1ES7_
 10773              		.thumb_set _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1ES7_,_ZN9_
 10774              		.section	.text._ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valI
 10775              		.align	1
 10776              		.weak	_ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greate
 10777              		.syntax unified
 10778              		.thumb
 10779              		.thumb_func
 10780              		.fpu fpv4-sp-d16
 10782              	_ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIS3_EE
 10783              	.LFB4708:
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		_Distance __holeIndex, _Distance __topIndex, _Tp __value,
 10784              		.loc 14 128 5
 10785              		.cfi_startproc
 10786              		@ args = 4, pretend = 0, frame = 24
 10787              		@ frame_needed = 1, uses_anonymous_args = 0
 10788 0000 80B5     		push	{r7, lr}
 10789              	.LCFI783:
 10790              		.cfi_def_cfa_offset 8
 10791              		.cfi_offset 7, -8
 10792              		.cfi_offset 14, -4
 10793 0002 86B0     		sub	sp, sp, #24
 10794              	.LCFI784:
 10795              		.cfi_def_cfa_offset 32
 10796 0004 00AF     		add	r7, sp, #0
 10797              	.LCFI785:
 10798              		.cfi_def_cfa_register 7
 10799 0006 F860     		str	r0, [r7, #12]
 10800 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccU23Djm.s 			page 348


 10801 000a 7A60     		str	r2, [r7, #4]
 10802 000c 3B60     		str	r3, [r7]
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 10803              		.loc 14 132 41
 10804 000e BB68     		ldr	r3, [r7, #8]
 10805 0010 013B     		subs	r3, r3, #1
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 10806              		.loc 14 132 17
 10807 0012 DA0F     		lsrs	r2, r3, #31
 10808 0014 1344     		add	r3, r3, r2
 10809 0016 5B10     		asrs	r3, r3, #1
 10810 0018 7B61     		str	r3, [r7, #20]
 10811              	.L424:
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10812              		.loc 14 133 39
 10813 001a BA68     		ldr	r2, [r7, #8]
 10814 001c 7B68     		ldr	r3, [r7, #4]
 10815 001e 9A42     		cmp	r2, r3
 10816 0020 11DD     		ble	.L421
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10817              		.loc 14 133 59 discriminator 1
 10818 0022 7A69     		ldr	r2, [r7, #20]
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10819              		.loc 14 133 57 discriminator 1
 10820 0024 1346     		mov	r3, r2
 10821 0026 9B00     		lsls	r3, r3, #2
 10822 0028 1344     		add	r3, r3, r2
 10823 002a 1B01     		lsls	r3, r3, #4
 10824 002c 1A46     		mov	r2, r3
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10825              		.loc 14 133 48 discriminator 1
 10826 002e FB68     		ldr	r3, [r7, #12]
 10827 0030 1344     		add	r3, r3, r2
 10828 0032 3A68     		ldr	r2, [r7]
 10829 0034 1946     		mov	r1, r3
 10830 0036 386A     		ldr	r0, [r7, #32]
 10831 0038 FFF7FEFF 		bl	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S6_EEbT_RT0_
 10832 003c 0346     		mov	r3, r0
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10833              		.loc 14 133 39 discriminator 1
 10834 003e 002B     		cmp	r3, #0
 10835 0040 01D0     		beq	.L421
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10836              		.loc 14 133 39 is_stmt 0 discriminator 3
 10837 0042 0123     		movs	r3, #1
 10838 0044 00E0     		b	.L422
 10839              	.L421:
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10840              		.loc 14 133 39 discriminator 4
 10841 0046 0023     		movs	r3, #0
 10842              	.L422:
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10843              		.loc 14 133 39 discriminator 6
 10844 0048 002B     		cmp	r3, #0
 10845 004a 1FD0     		beq	.L423
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __parent;
 10846              		.loc 14 135 31 is_stmt 1
ARM GAS  /tmp/ccU23Djm.s 			page 349


 10847 004c 7A69     		ldr	r2, [r7, #20]
 10848 004e 1346     		mov	r3, r2
 10849 0050 9B00     		lsls	r3, r3, #2
 10850 0052 1344     		add	r3, r3, r2
 10851 0054 1B01     		lsls	r3, r3, #4
 10852 0056 1A46     		mov	r2, r3
 10853 0058 FB68     		ldr	r3, [r7, #12]
 10854 005a 1344     		add	r3, r3, r2
 10855 005c 1846     		mov	r0, r3
 10856 005e FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 10857 0062 0146     		mov	r1, r0
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __parent;
 10858              		.loc 14 135 16
 10859 0064 BA68     		ldr	r2, [r7, #8]
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __parent;
 10860              		.loc 14 135 14
 10861 0066 1346     		mov	r3, r2
 10862 0068 9B00     		lsls	r3, r3, #2
 10863 006a 1344     		add	r3, r3, r2
 10864 006c 1B01     		lsls	r3, r3, #4
 10865 006e 1A46     		mov	r2, r3
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __parent;
 10866              		.loc 14 135 29
 10867 0070 FB68     		ldr	r3, [r7, #12]
 10868 0072 1344     		add	r3, r3, r2
 10869 0074 1846     		mov	r0, r3
 10870 0076 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskaSEOS2_
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __parent = (__holeIndex - 1) / 2;
 10871              		.loc 14 136 4
 10872 007a 7B69     		ldr	r3, [r7, #20]
 10873 007c BB60     		str	r3, [r7, #8]
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 10874              		.loc 14 137 28
 10875 007e BB68     		ldr	r3, [r7, #8]
 10876 0080 013B     		subs	r3, r3, #1
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 10877              		.loc 14 137 4
 10878 0082 DA0F     		lsrs	r2, r3, #31
 10879 0084 1344     		add	r3, r3, r2
 10880 0086 5B10     		asrs	r3, r3, #1
 10881 0088 7B61     		str	r3, [r7, #20]
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 10882              		.loc 14 133 7
 10883 008a C6E7     		b	.L424
 10884              	.L423:
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 10885              		.loc 14 139 34
 10886 008c 3868     		ldr	r0, [r7]
 10887 008e FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 10888 0092 0146     		mov	r1, r0
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 10889              		.loc 14 139 19
 10890 0094 BA68     		ldr	r2, [r7, #8]
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 10891              		.loc 14 139 17
 10892 0096 1346     		mov	r3, r2
 10893 0098 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccU23Djm.s 			page 350


 10894 009a 1344     		add	r3, r3, r2
 10895 009c 1B01     		lsls	r3, r3, #4
 10896 009e 1A46     		mov	r2, r3
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 10897              		.loc 14 139 32
 10898 00a0 FB68     		ldr	r3, [r7, #12]
 10899 00a2 1344     		add	r3, r3, r2
 10900 00a4 1846     		mov	r0, r3
 10901 00a6 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskaSEOS2_
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 10902              		.loc 14 140 5
 10903 00aa 00BF     		nop
 10904 00ac 1837     		adds	r7, r7, #24
 10905              	.LCFI786:
 10906              		.cfi_def_cfa_offset 8
 10907 00ae BD46     		mov	sp, r7
 10908              	.LCFI787:
 10909              		.cfi_def_cfa_register 13
 10910              		@ sp needed
 10911 00b0 80BD     		pop	{r7, pc}
 10912              		.cfi_endproc
 10913              	.LFE4708:
 10915              		.section	.text._ZNKSt5arrayIhLj4EE5beginEv,"axG",%progbits,_ZNKSt5arrayIhLj4EE5beginEv,comdat
 10916              		.align	1
 10917              		.weak	_ZNKSt5arrayIhLj4EE5beginEv
 10918              		.syntax unified
 10919              		.thumb
 10920              		.thumb_func
 10921              		.fpu fpv4-sp-d16
 10923              	_ZNKSt5arrayIhLj4EE5beginEv:
 10924              	.LFB4712:
 130:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data()); }
 10925              		.loc 8 130 7
 10926              		.cfi_startproc
 10927              		@ args = 0, pretend = 0, frame = 8
 10928              		@ frame_needed = 1, uses_anonymous_args = 0
 10929 0000 80B5     		push	{r7, lr}
 10930              	.LCFI788:
 10931              		.cfi_def_cfa_offset 8
 10932              		.cfi_offset 7, -8
 10933              		.cfi_offset 14, -4
 10934 0002 82B0     		sub	sp, sp, #8
 10935              	.LCFI789:
 10936              		.cfi_def_cfa_offset 16
 10937 0004 00AF     		add	r7, sp, #0
 10938              	.LCFI790:
 10939              		.cfi_def_cfa_register 7
 10940 0006 7860     		str	r0, [r7, #4]
 131:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 10941              		.loc 8 131 16
 10942 0008 7868     		ldr	r0, [r7, #4]
 10943 000a FFF7FEFF 		bl	_ZNKSt5arrayIhLj4EE4dataEv
 10944 000e 0346     		mov	r3, r0
 131:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 10945              		.loc 8 131 40
 10946 0010 1846     		mov	r0, r3
 10947 0012 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccU23Djm.s 			page 351


 10948              	.LCFI791:
 10949              		.cfi_def_cfa_offset 8
 10950 0014 BD46     		mov	sp, r7
 10951              	.LCFI792:
 10952              		.cfi_def_cfa_register 13
 10953              		@ sp needed
 10954 0016 80BD     		pop	{r7, pc}
 10955              		.cfi_endproc
 10956              	.LFE4712:
 10958              		.section	.text._ZNKSt5arrayIhLj4EE3endEv,"axG",%progbits,_ZNKSt5arrayIhLj4EE3endEv,comdat
 10959              		.align	1
 10960              		.weak	_ZNKSt5arrayIhLj4EE3endEv
 10961              		.syntax unified
 10962              		.thumb
 10963              		.thumb_func
 10964              		.fpu fpv4-sp-d16
 10966              	_ZNKSt5arrayIhLj4EE3endEv:
 10967              	.LFB4713:
 138:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_iterator(data() + _Nm); }
 10968              		.loc 8 138 7
 10969              		.cfi_startproc
 10970              		@ args = 0, pretend = 0, frame = 8
 10971              		@ frame_needed = 1, uses_anonymous_args = 0
 10972 0000 80B5     		push	{r7, lr}
 10973              	.LCFI793:
 10974              		.cfi_def_cfa_offset 8
 10975              		.cfi_offset 7, -8
 10976              		.cfi_offset 14, -4
 10977 0002 82B0     		sub	sp, sp, #8
 10978              	.LCFI794:
 10979              		.cfi_def_cfa_offset 16
 10980 0004 00AF     		add	r7, sp, #0
 10981              	.LCFI795:
 10982              		.cfi_def_cfa_register 7
 10983 0006 7860     		str	r0, [r7, #4]
 139:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 10984              		.loc 8 139 38
 10985 0008 7868     		ldr	r0, [r7, #4]
 10986 000a FFF7FEFF 		bl	_ZNKSt5arrayIhLj4EE4dataEv
 10987 000e 0346     		mov	r3, r0
 139:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 10988              		.loc 8 139 43
 10989 0010 0433     		adds	r3, r3, #4
 139:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 10990              		.loc 8 139 46
 10991 0012 1846     		mov	r0, r3
 10992 0014 0837     		adds	r7, r7, #8
 10993              	.LCFI796:
 10994              		.cfi_def_cfa_offset 8
 10995 0016 BD46     		mov	sp, r7
 10996              	.LCFI797:
 10997              		.cfi_def_cfa_register 13
 10998              		@ sp needed
 10999 0018 80BD     		pop	{r7, pc}
 11000              		.cfi_endproc
 11001              	.LFE4713:
 11003              		.section	.text._ZSt12__miter_baseIPKhET_S2_,"axG",%progbits,_ZSt12__miter_baseIPKhET_S2_,comdat
ARM GAS  /tmp/ccU23Djm.s 			page 352


 11004              		.align	1
 11005              		.weak	_ZSt12__miter_baseIPKhET_S2_
 11006              		.syntax unified
 11007              		.thumb
 11008              		.thumb_func
 11009              		.fpu fpv4-sp-d16
 11011              	_ZSt12__miter_baseIPKhET_S2_:
 11012              	.LFB4714:
 11013              		.file 20 "/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // The  -*- C++ -*- type traits classes for internal use in libstdc++
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Copyright (C) 2000-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** /** @file bits/cpp_type_traits.h
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****  *  Do not attempt to use it directly. @headername{ext/type_traits}
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****  */
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifndef _CPP_TYPE_TRAITS_H
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #define _CPP_TYPE_TRAITS_H 1
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #pragma GCC system_header
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #include <bits/c++config.h>
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // This file provides some compile-time information about various types.
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // These representations were designed, on purpose, to be constant-expressions
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // and not types as found in <bits/type_traits.h>.  In particular, they
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // can be used in control structures and the optimizer hopefully will do
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // the obvious thing.
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Why integral expressions, and not functions nor types?
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Firstly, these compile-time entities are used as template-arguments
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // so function return values won't work:  We need compile-time entities.
ARM GAS  /tmp/ccU23Djm.s 			page 353


  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // We're left with types and constant  integral expressions.
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Secondly, from the point of view of ease of use, type-based compile-time
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // information is -not- *that* convenient.  One has to write lots of
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // overloaded functions and to hope that the compiler will select the right
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // one. As a net effect, the overall structure isn't very clear at first
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // glance.
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Thirdly, partial ordering and overload resolution (of function templates)
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // is highly costly in terms of compiler-resource.  It is a Good Thing to
  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // keep these resource consumption as least as possible.
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // See valarray_array.h for a case use.
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // Update 2005: types are also provided and <bits/type_traits.h> has been
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** // removed.
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** //
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** extern "C++" {
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** {
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   struct __true_type { };
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   struct __false_type { };
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<bool>
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __truth_type
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     { typedef __false_type __type; };
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __truth_type<true>
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     { typedef __true_type __type; };
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // N.B. The conversions to bool are needed due to the issue
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // explained in c++/19404.
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<class _Sp, class _Tp>
  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __traitor
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef typename __truth_type<__value>::__type __type;
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Compare for equality of types.
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename, typename>
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __are_same
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 101:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 102:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __are_same<_Tp, _Tp>
 103:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 104:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 105:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
ARM GAS  /tmp/ccU23Djm.s 			page 354


 106:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 107:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 108:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Holds if the template-argument is a void type.
 109:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 110:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_void
 111:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 112:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 113:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 114:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 115:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 116:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 117:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_void<void>
 118:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 119:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 120:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 121:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 122:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 123:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 124:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Integer types
 125:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 126:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 127:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 129:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 130:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 131:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Thirteen specializations (yes there are eleven standard integer
 134:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // types; <em>long long</em> and <em>unsigned long long</em> are
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // supported as extensions).  Up to four target-specific __int<N>
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // types are supported as well.
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 138:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<bool>
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 141:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 144:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 145:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<char>
 146:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 147:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 148:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 149:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 150:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 151:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 152:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<signed char>
 153:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 154:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 155:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 156:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 157:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 158:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 159:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<unsigned char>
 160:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 161:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 162:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
ARM GAS  /tmp/ccU23Djm.s 			page 355


 163:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 164:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 165:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** # ifdef _GLIBCXX_USE_WCHAR_T
 166:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 167:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<wchar_t>
 168:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 172:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** # endif
 173:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 174:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifdef _GLIBCXX_USE_CHAR8_T
 175:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 176:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<char8_t>
 177:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 178:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 179:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 180:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 181:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 182:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 183:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #if __cplusplus >= 201103L
 184:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 185:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<char16_t>
 186:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 187:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 188:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 189:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 190:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 191:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 192:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<char32_t>
 193:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 194:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 195:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 196:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 197:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 198:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 199:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 200:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<short>
 201:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 202:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 203:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 204:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<unsigned short>
 208:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 209:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 210:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 211:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 212:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 213:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 214:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<int>
 215:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 216:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 217:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 218:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 356


 220:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<unsigned int>
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 224:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 226:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 227:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<long>
 229:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 232:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 233:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 234:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 235:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<unsigned long>
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 237:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 238:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 239:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 240:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 241:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 242:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<long long>
 243:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 244:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 245:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 246:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 247:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 248:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 249:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<unsigned long long>
 250:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 253:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 254:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 255:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #define __INT_N(TYPE) 			\
 256:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>				\
 257:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<TYPE>		\
 258:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {					\
 259:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };		\
 260:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;	\
 261:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };					\
 262:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>				\
 263:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_integer<unsigned TYPE>	\
 264:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {					\
 265:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };		\
 266:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;	\
 267:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 268:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 269:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_0
 270:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_0)
 271:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 272:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_1
 273:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_1)
 274:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 275:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_2
 276:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_2)
ARM GAS  /tmp/ccU23Djm.s 			page 357


 277:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 278:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_3
 279:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_3)
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 281:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #undef __INT_N
 283:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 284:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 285:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Floating point types
 286:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 287:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 288:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_floating
 289:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 290:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 291:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 292:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 293:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 294:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // three specializations (float, double and 'long double')
 295:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_floating<float>
 297:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 298:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 299:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 300:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 301:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 302:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 303:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_floating<double>
 304:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 305:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 306:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 307:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 308:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 309:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 310:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_floating<long double>
 311:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 312:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 313:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 314:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 315:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 316:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 317:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Pointer types
 318:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 319:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 320:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_pointer
 321:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 322:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 323:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 324:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 325:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 326:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 327:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_pointer<_Tp*>
 328:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 329:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 330:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 331:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 332:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 333:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
ARM GAS  /tmp/ccU23Djm.s 			page 358


 334:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // An arithmetic type is an integer type or a floating point type
 335:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 336:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 337:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_arithmetic
 338:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
 339:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     { };
 340:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 341:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 342:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // A scalar type is an arithmetic type or a pointer type
 343:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // 
 344:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 345:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_scalar
 346:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
 347:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     { };
 348:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 349:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 350:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // For use in std::copy and std::find overloads for streambuf iterators.
 351:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 352:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 353:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_char
 354:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 355:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 356:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 357:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 358:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 359:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 360:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_char<char>
 361:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 362:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 363:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 364:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 365:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 366:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #ifdef _GLIBCXX_USE_WCHAR_T
 367:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 368:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_char<wchar_t>
 369:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 370:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 371:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 372:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 373:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif
 374:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 375:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 376:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_byte
 377:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 378:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 379:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 380:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 381:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 382:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 383:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_byte<char>
 384:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 385:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 386:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 387:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 388:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 389:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 390:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_byte<signed char>
ARM GAS  /tmp/ccU23Djm.s 			page 359


 391:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 392:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 393:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 394:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 395:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 396:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 397:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_byte<unsigned char>
 398:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 399:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 400:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 401:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 402:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 403:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #if __cplusplus >= 201703L
 404:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   enum class byte : unsigned char;
 405:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 406:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<>
 407:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_byte<byte>
 408:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 409:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 1 };
 410:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __true_type __type;
 411:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 412:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** #endif // C++17
 413:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 414:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 415:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Move iterator type
 416:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   //
 417:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Tp>
 418:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     struct __is_move_iterator
 419:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     {
 420:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       enum { __value = 0 };
 421:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****       typedef __false_type __type;
 422:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     };
 423:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h **** 
 424:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 425:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   // remove the move_iterator wrapper.
 426:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****   template<typename _Iterator>
 427:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     inline _Iterator
 428:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     __miter_base(_Iterator __it)
 11014              		.loc 20 428 5
 11015              		.cfi_startproc
 11016              		@ args = 0, pretend = 0, frame = 8
 11017              		@ frame_needed = 1, uses_anonymous_args = 0
 11018              		@ link register save eliminated.
 11019 0000 80B4     		push	{r7}
 11020              	.LCFI798:
 11021              		.cfi_def_cfa_offset 4
 11022              		.cfi_offset 7, -4
 11023 0002 83B0     		sub	sp, sp, #12
 11024              	.LCFI799:
 11025              		.cfi_def_cfa_offset 16
 11026 0004 00AF     		add	r7, sp, #0
 11027              	.LCFI800:
 11028              		.cfi_def_cfa_register 7
 11029 0006 7860     		str	r0, [r7, #4]
 429:/usr/arm-none-eabi/include/c++/9.3.0/bits/cpp_type_traits.h ****     { return __it; }
 11030              		.loc 20 429 14
 11031 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 360


 11032              		.loc 20 429 20
 11033 000a 1846     		mov	r0, r3
 11034 000c 0C37     		adds	r7, r7, #12
 11035              	.LCFI801:
 11036              		.cfi_def_cfa_offset 4
 11037 000e BD46     		mov	sp, r7
 11038              	.LCFI802:
 11039              		.cfi_def_cfa_register 13
 11040              		@ sp needed
 11041 0010 5DF8047B 		ldr	r7, [sp], #4
 11042              	.LCFI803:
 11043              		.cfi_restore 7
 11044              		.cfi_def_cfa_offset 0
 11045 0014 7047     		bx	lr
 11046              		.cfi_endproc
 11047              	.LFE4714:
 11049              		.section	.text._ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_,"axG",%progbits,_ZSt14__copy_move_a2ILb
 11050              		.align	1
 11051              		.weak	_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_
 11052              		.syntax unified
 11053              		.thumb
 11054              		.thumb_func
 11055              		.fpu fpv4-sp-d16
 11057              	_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_:
 11058              	.LFB4715:
 438:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 11059              		.loc 16 438 5
 11060              		.cfi_startproc
 11061              		@ args = 0, pretend = 0, frame = 16
 11062              		@ frame_needed = 1, uses_anonymous_args = 0
 11063 0000 B0B5     		push	{r4, r5, r7, lr}
 11064              	.LCFI804:
 11065              		.cfi_def_cfa_offset 16
 11066              		.cfi_offset 4, -16
 11067              		.cfi_offset 5, -12
 11068              		.cfi_offset 7, -8
 11069              		.cfi_offset 14, -4
 11070 0002 84B0     		sub	sp, sp, #16
 11071              	.LCFI805:
 11072              		.cfi_def_cfa_offset 32
 11073 0004 00AF     		add	r7, sp, #0
 11074              	.LCFI806:
 11075              		.cfi_def_cfa_register 7
 11076 0006 F860     		str	r0, [r7, #12]
 11077 0008 B960     		str	r1, [r7, #8]
 11078 000a 7A60     		str	r2, [r7, #4]
 440:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 11079              		.loc 16 440 31
 11080 000c F868     		ldr	r0, [r7, #12]
 11081 000e FFF7FEFF 		bl	_ZSt12__niter_baseIPKhET_S2_
 11082 0012 0446     		mov	r4, r0
 11083 0014 B868     		ldr	r0, [r7, #8]
 11084 0016 FFF7FEFF 		bl	_ZSt12__niter_baseIPKhET_S2_
 11085 001a 0546     		mov	r5, r0
 11086 001c 7B68     		ldr	r3, [r7, #4]
 11087 001e 1846     		mov	r0, r3
 11088 0020 FFF7FEFF 		bl	_ZSt12__niter_baseIPhET_S1_
ARM GAS  /tmp/ccU23Djm.s 			page 361


 11089 0024 0346     		mov	r3, r0
 11090 0026 1A46     		mov	r2, r3
 11091 0028 2946     		mov	r1, r5
 11092 002a 2046     		mov	r0, r4
 11093 002c FFF7FEFF 		bl	_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_
 11094 0030 0246     		mov	r2, r0
 11095 0032 3B1D     		adds	r3, r7, #4
 11096 0034 1146     		mov	r1, r2
 11097 0036 1846     		mov	r0, r3
 11098 0038 FFF7FEFF 		bl	_ZSt12__niter_wrapIPhET_RKS1_S1_
 11099 003c 0346     		mov	r3, r0
 444:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 11100              		.loc 16 444 5
 11101 003e 1846     		mov	r0, r3
 11102 0040 1037     		adds	r7, r7, #16
 11103              	.LCFI807:
 11104              		.cfi_def_cfa_offset 16
 11105 0042 BD46     		mov	sp, r7
 11106              	.LCFI808:
 11107              		.cfi_def_cfa_register 13
 11108              		@ sp needed
 11109 0044 B0BD     		pop	{r4, r5, r7, pc}
 11110              		.cfi_endproc
 11111              	.LFE4715:
 11113              		.section	.text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv,"axG",%progbits
 11114              		.align	1
 11115              		.weak	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv
 11116              		.syntax unified
 11117              		.thumb
 11118              		.thumb_func
 11119              		.fpu fpv4-sp-d16
 11121              	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv:
 11122              	.LFB4716:
 210:Cpp/local_vector.hpp **** 
 211:Cpp/local_vector.hpp ****     constexpr void clear() noexcept
 11123              		.loc 5 211 20
 11124              		.cfi_startproc
 11125              		@ args = 0, pretend = 0, frame = 16
 11126              		@ frame_needed = 1, uses_anonymous_args = 0
 11127 0000 80B5     		push	{r7, lr}
 11128              	.LCFI809:
 11129              		.cfi_def_cfa_offset 8
 11130              		.cfi_offset 7, -8
 11131              		.cfi_offset 14, -4
 11132 0002 84B0     		sub	sp, sp, #16
 11133              	.LCFI810:
 11134              		.cfi_def_cfa_offset 24
 11135 0004 00AF     		add	r7, sp, #0
 11136              	.LCFI811:
 11137              		.cfi_def_cfa_register 7
 11138 0006 7860     		str	r0, [r7, #4]
 11139              	.L435:
 212:Cpp/local_vector.hpp ****     {
 213:Cpp/local_vector.hpp ****       while (!empty()) {
 11140              		.loc 5 213 14
 11141 0008 7868     		ldr	r0, [r7, #4]
 11142 000a FFF7FEFF 		bl	_ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv
ARM GAS  /tmp/ccU23Djm.s 			page 362


 11143 000e 0346     		mov	r3, r0
 11144 0010 83F00103 		eor	r3, r3, #1
 11145 0014 DBB2     		uxtb	r3, r3
 11146 0016 002B     		cmp	r3, #0
 11147 0018 06D0     		beq	.L436
 214:Cpp/local_vector.hpp ****         pop_back();
 11148              		.loc 5 214 9
 11149 001a 07F10803 		add	r3, r7, #8
 11150 001e 7968     		ldr	r1, [r7, #4]
 11151 0020 1846     		mov	r0, r3
 11152 0022 FFF7FEFF 		bl	_ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv
 213:Cpp/local_vector.hpp ****         pop_back();
 11153              		.loc 5 213 7
 11154 0026 EFE7     		b	.L435
 11155              	.L436:
 215:Cpp/local_vector.hpp ****       }
 216:Cpp/local_vector.hpp ****     }
 11156              		.loc 5 216 5
 11157 0028 00BF     		nop
 11158 002a 1037     		adds	r7, r7, #16
 11159              	.LCFI812:
 11160              		.cfi_def_cfa_offset 8
 11161 002c BD46     		mov	sp, r7
 11162              	.LCFI813:
 11163              		.cfi_def_cfa_register 13
 11164              		@ sp needed
 11165 002e 80BD     		pop	{r7, pc}
 11166              		.cfi_endproc
 11167              	.LFE4716:
 11169              		.section	.text._ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj,"axG",%progbits,_ZNKSt5arrayIN4o
 11170              		.align	1
 11171              		.weak	_ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj
 11172              		.syntax unified
 11173              		.thumb
 11174              		.thumb_func
 11175              		.fpu fpv4-sp-d16
 11177              	_ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj:
 11178              	.LFB4717:
 189:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 11179              		.loc 8 189 7
 11180              		.cfi_startproc
 11181              		@ args = 0, pretend = 0, frame = 8
 11182              		@ frame_needed = 1, uses_anonymous_args = 0
 11183 0000 80B5     		push	{r7, lr}
 11184              	.LCFI814:
 11185              		.cfi_def_cfa_offset 8
 11186              		.cfi_offset 7, -8
 11187              		.cfi_offset 14, -4
 11188 0002 82B0     		sub	sp, sp, #8
 11189              	.LCFI815:
 11190              		.cfi_def_cfa_offset 16
 11191 0004 00AF     		add	r7, sp, #0
 11192              	.LCFI816:
 11193              		.cfi_def_cfa_register 7
 11194 0006 7860     		str	r0, [r7, #4]
 11195 0008 3960     		str	r1, [r7]
 11196              		.loc 8 190 33
ARM GAS  /tmp/ccU23Djm.s 			page 363


 11197 000a 7B68     		ldr	r3, [r7, #4]
 11198              		.loc 8 190 32
 11199 000c 3968     		ldr	r1, [r7]
 11200 000e 1846     		mov	r0, r3
 11201 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j
 11202 0014 0346     		mov	r3, r0
 11203              		.loc 8 190 49
 11204 0016 1846     		mov	r0, r3
 11205 0018 0837     		adds	r7, r7, #8
 11206              	.LCFI817:
 11207              		.cfi_def_cfa_offset 8
 11208 001a BD46     		mov	sp, r7
 11209              	.LCFI818:
 11210              		.cfi_def_cfa_register 13
 11211              		@ sp needed
 11212 001c 80BD     		pop	{r7, pc}
 11213              		.cfi_endproc
 11214              	.LFE4717:
 11216              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_c
 11217              		.align	1
 11218              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_cascade_co
 11219              		.syntax unified
 11220              		.thumb
 11221              		.thumb_func
 11222              		.fpu fpv4-sp-d16
 11224              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_cascade_colorsILi
 11225              	.LFB4719:
 148:Cpp/fixed_size_function.hpp ****   {
 11226              		.loc 12 148 3
 11227              		.cfi_startproc
 11228              		@ args = 0, pretend = 0, frame = 8
 11229              		@ frame_needed = 1, uses_anonymous_args = 0
 11230 0000 80B5     		push	{r7, lr}
 11231              	.LCFI819:
 11232              		.cfi_def_cfa_offset 8
 11233              		.cfi_offset 7, -8
 11234              		.cfi_offset 14, -4
 11235 0002 82B0     		sub	sp, sp, #8
 11236              	.LCFI820:
 11237              		.cfi_def_cfa_offset 16
 11238 0004 00AF     		add	r7, sp, #0
 11239              	.LCFI821:
 11240              		.cfi_def_cfa_register 7
 11241 0006 7860     		str	r0, [r7, #4]
 11242 0008 3960     		str	r1, [r7]
 11243              	.LBB83:
 149:Cpp/fixed_size_function.hpp ****     create(std::forward<Functor>(f));
 11244              		.loc 12 149 3
 11245 000a 7B68     		ldr	r3, [r7, #4]
 11246 000c 1846     		mov	r0, r3
 11247 000e FFF7FEFF 		bl	_ZN7details21fixed_function_vtableIL14construct_type2EmJEEC1Ev
 150:Cpp/fixed_size_function.hpp ****   }
 11248              		.loc 12 150 5
 11249 0012 3868     		ldr	r0, [r7]
 11250 0014 FFF7FEFF 		bl	_ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EO
 11251 0018 0346     		mov	r3, r0
 11252 001a 1946     		mov	r1, r3
ARM GAS  /tmp/ccU23Djm.s 			page 364


 11253 001c 7868     		ldr	r0, [r7, #4]
 11254 001e FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_cascade_
 11255              	.LBE83:
 151:Cpp/fixed_size_function.hpp **** 
 11256              		.loc 12 151 3
 11257 0022 7B68     		ldr	r3, [r7, #4]
 11258 0024 1846     		mov	r0, r3
 11259 0026 0837     		adds	r7, r7, #8
 11260              	.LCFI822:
 11261              		.cfi_def_cfa_offset 8
 11262 0028 BD46     		mov	sp, r7
 11263              	.LCFI823:
 11264              		.cfi_def_cfa_register 13
 11265              		@ sp needed
 11266 002a 80BD     		pop	{r7, pc}
 11267              		.cfi_endproc
 11268              	.LFE4719:
 11270              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1IZN4otto3mcu7ws2812b18led_cascade_co
 11271              		.thumb_set _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1IZN4otto3mcu7ws2812b18led_casca
 11272              		.section	.text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj,"axG",%progbits,_ZNSt5arrayIN4otto3mcu7Gpi
 11273              		.align	1
 11274              		.weak	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj
 11275              		.syntax unified
 11276              		.thumb
 11277              		.thumb_func
 11278              		.fpu fpv4-sp-d16
 11280              	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj:
 11281              	.LFB4721:
 185:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 11282              		.loc 8 185 7
 11283              		.cfi_startproc
 11284              		@ args = 0, pretend = 0, frame = 8
 11285              		@ frame_needed = 1, uses_anonymous_args = 0
 11286 0000 80B5     		push	{r7, lr}
 11287              	.LCFI824:
 11288              		.cfi_def_cfa_offset 8
 11289              		.cfi_offset 7, -8
 11290              		.cfi_offset 14, -4
 11291 0002 82B0     		sub	sp, sp, #8
 11292              	.LCFI825:
 11293              		.cfi_def_cfa_offset 16
 11294 0004 00AF     		add	r7, sp, #0
 11295              	.LCFI826:
 11296              		.cfi_def_cfa_register 7
 11297 0006 7860     		str	r0, [r7, #4]
 11298 0008 3960     		str	r1, [r7]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11299              		.loc 8 186 33
 11300 000a 7B68     		ldr	r3, [r7, #4]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11301              		.loc 8 186 32
 11302 000c 3968     		ldr	r1, [r7]
 11303 000e 1846     		mov	r0, r3
 11304 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j
 11305 0014 0346     		mov	r3, r0
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11306              		.loc 8 186 49
ARM GAS  /tmp/ccU23Djm.s 			page 365


 11307 0016 1846     		mov	r0, r3
 11308 0018 0837     		adds	r7, r7, #8
 11309              	.LCFI827:
 11310              		.cfi_def_cfa_offset 8
 11311 001a BD46     		mov	sp, r7
 11312              	.LCFI828:
 11313              		.cfi_def_cfa_register 13
 11314              		@ sp needed
 11315 001c 80BD     		pop	{r7, pc}
 11316              		.cfi_endproc
 11317              	.LFE4721:
 11319              		.section	.text._ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj,"axG
 11320              		.align	1
 11321              		.weak	_ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj
 11322              		.syntax unified
 11323              		.thumb
 11324              		.thumb_func
 11325              		.fpu fpv4-sp-d16
 11327              	_ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj:
 11328              	.LFB4722:
 185:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 11329              		.loc 8 185 7
 11330              		.cfi_startproc
 11331              		@ args = 0, pretend = 0, frame = 8
 11332              		@ frame_needed = 1, uses_anonymous_args = 0
 11333 0000 80B5     		push	{r7, lr}
 11334              	.LCFI829:
 11335              		.cfi_def_cfa_offset 8
 11336              		.cfi_offset 7, -8
 11337              		.cfi_offset 14, -4
 11338 0002 82B0     		sub	sp, sp, #8
 11339              	.LCFI830:
 11340              		.cfi_def_cfa_offset 16
 11341 0004 00AF     		add	r7, sp, #0
 11342              	.LCFI831:
 11343              		.cfi_def_cfa_register 7
 11344 0006 7860     		str	r0, [r7, #4]
 11345 0008 3960     		str	r1, [r7]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11346              		.loc 8 186 33
 11347 000a 7B68     		ldr	r3, [r7, #4]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11348              		.loc 8 186 32
 11349 000c 3968     		ldr	r1, [r7]
 11350 000e 1846     		mov	r0, r3
 11351 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EE6_S_r
 11352 0014 0346     		mov	r3, r0
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11353              		.loc 8 186 49
 11354 0016 1846     		mov	r0, r3
 11355 0018 0837     		adds	r7, r7, #8
 11356              	.LCFI832:
 11357              		.cfi_def_cfa_offset 8
 11358 001a BD46     		mov	sp, r7
 11359              	.LCFI833:
 11360              		.cfi_def_cfa_register 13
 11361              		@ sp needed
ARM GAS  /tmp/ccU23Djm.s 			page 366


 11362 001c 80BD     		pop	{r7, pc}
 11363              		.cfi_endproc
 11364              	.LFE4722:
 11366              		.section	.text._ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj,"axG",%progb
 11367              		.align	1
 11368              		.weak	_ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj
 11369              		.syntax unified
 11370              		.thumb
 11371              		.thumb_func
 11372              		.fpu fpv4-sp-d16
 11374              	_ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj:
 11375              	.LFB4723:
 185:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 11376              		.loc 8 185 7
 11377              		.cfi_startproc
 11378              		@ args = 0, pretend = 0, frame = 8
 11379              		@ frame_needed = 1, uses_anonymous_args = 0
 11380 0000 80B5     		push	{r7, lr}
 11381              	.LCFI834:
 11382              		.cfi_def_cfa_offset 8
 11383              		.cfi_offset 7, -8
 11384              		.cfi_offset 14, -4
 11385 0002 82B0     		sub	sp, sp, #8
 11386              	.LCFI835:
 11387              		.cfi_def_cfa_offset 16
 11388 0004 00AF     		add	r7, sp, #0
 11389              	.LCFI836:
 11390              		.cfi_def_cfa_register 7
 11391 0006 7860     		str	r0, [r7, #4]
 11392 0008 3960     		str	r1, [r7]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11393              		.loc 8 186 33
 11394 000a 7B68     		ldr	r3, [r7, #4]
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11395              		.loc 8 186 32
 11396 000c 3968     		ldr	r1, [r7]
 11397 000e 1846     		mov	r0, r3
 11398 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_refERA8_KS6_j
 11399 0014 0346     		mov	r3, r0
 186:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11400              		.loc 8 186 49
 11401 0016 1846     		mov	r0, r3
 11402 0018 0837     		adds	r7, r7, #8
 11403              	.LCFI837:
 11404              		.cfi_def_cfa_offset 8
 11405 001a BD46     		mov	sp, r7
 11406              	.LCFI838:
 11407              		.cfi_def_cfa_register 13
 11408              		@ sp needed
 11409 001c 80BD     		pop	{r7, pc}
 11410              		.cfi_endproc
 11411              	.LFE4723:
 11413              		.section	.text._ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptr
 11414              		.align	1
 11415              		.weak	_ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptrERA8_KS6_
 11416              		.syntax unified
 11417              		.thumb
ARM GAS  /tmp/ccU23Djm.s 			page 367


 11418              		.thumb_func
 11419              		.fpu fpv4-sp-d16
 11421              	_ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptrERA8_KS6_:
 11422              	.LFB4725:
  59:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp*>(__t); }
 11423              		.loc 8 59 7
 11424              		.cfi_startproc
 11425              		@ args = 0, pretend = 0, frame = 8
 11426              		@ frame_needed = 1, uses_anonymous_args = 0
 11427              		@ link register save eliminated.
 11428 0000 80B4     		push	{r7}
 11429              	.LCFI839:
 11430              		.cfi_def_cfa_offset 4
 11431              		.cfi_offset 7, -4
 11432 0002 83B0     		sub	sp, sp, #12
 11433              	.LCFI840:
 11434              		.cfi_def_cfa_offset 16
 11435 0004 00AF     		add	r7, sp, #0
 11436              	.LCFI841:
 11437              		.cfi_def_cfa_register 7
 11438 0006 7860     		str	r0, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 11439              		.loc 8 60 36
 11440 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 11441              		.loc 8 60 39
 11442 000a 1846     		mov	r0, r3
 11443 000c 0C37     		adds	r7, r7, #12
 11444              	.LCFI842:
 11445              		.cfi_def_cfa_offset 4
 11446 000e BD46     		mov	sp, r7
 11447              	.LCFI843:
 11448              		.cfi_def_cfa_register 13
 11449              		@ sp needed
 11450 0010 5DF8047B 		ldr	r7, [sp], #4
 11451              	.LCFI844:
 11452              		.cfi_restore 7
 11453              		.cfi_def_cfa_offset 0
 11454 0014 7047     		bx	lr
 11455              		.cfi_endproc
 11456              	.LFE4725:
 11458              		.section	.text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv,"axG",%p
 11459              		.align	1
 11460              		.weak	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv
 11461              		.syntax unified
 11462              		.thumb
 11463              		.thumb_func
 11464              		.fpu fpv4-sp-d16
 11466              	_ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv:
 11467              	.LFB4724:
 191:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 192:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR reference
 193:/usr/arm-none-eabi/include/c++/9.3.0/array ****       at(size_type __n)
 194:/usr/arm-none-eabi/include/c++/9.3.0/array ****       {
 195:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	if (__n >= _Nm)
 196:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 197:/usr/arm-none-eabi/include/c++/9.3.0/array **** 					    ">= _Nm (which is %zu)"),
ARM GAS  /tmp/ccU23Djm.s 			page 368


 198:/usr/arm-none-eabi/include/c++/9.3.0/array **** 					__n, _Nm);
 199:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	return _AT_Type::_S_ref(_M_elems, __n);
 200:/usr/arm-none-eabi/include/c++/9.3.0/array ****       }
 201:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 202:/usr/arm-none-eabi/include/c++/9.3.0/array ****       constexpr const_reference
 203:/usr/arm-none-eabi/include/c++/9.3.0/array ****       at(size_type __n) const
 204:/usr/arm-none-eabi/include/c++/9.3.0/array ****       {
 205:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	// Result of conditional expression must be an lvalue so use
 206:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	// boolean ? lvalue : (throw-expr, lvalue)
 207:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
 208:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	  : (std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 209:/usr/arm-none-eabi/include/c++/9.3.0/array **** 					       ">= _Nm (which is %zu)"),
 210:/usr/arm-none-eabi/include/c++/9.3.0/array **** 					   __n, _Nm),
 211:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	     _AT_Type::_S_ref(_M_elems, 0));
 212:/usr/arm-none-eabi/include/c++/9.3.0/array ****       }
 213:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 214:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR reference
 215:/usr/arm-none-eabi/include/c++/9.3.0/array ****       front() noexcept
 216:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return *begin(); }
 217:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 218:/usr/arm-none-eabi/include/c++/9.3.0/array ****       constexpr const_reference
 219:/usr/arm-none-eabi/include/c++/9.3.0/array ****       front() const noexcept
 220:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, 0); }
 221:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 222:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR reference
 223:/usr/arm-none-eabi/include/c++/9.3.0/array ****       back() noexcept
 224:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _Nm ? *(end() - 1) : *end(); }
 225:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 226:/usr/arm-none-eabi/include/c++/9.3.0/array ****       constexpr const_reference
 227:/usr/arm-none-eabi/include/c++/9.3.0/array ****       back() const noexcept
 228:/usr/arm-none-eabi/include/c++/9.3.0/array ****       {
 229:/usr/arm-none-eabi/include/c++/9.3.0/array **** 	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 230:/usr/arm-none-eabi/include/c++/9.3.0/array ****  	           : _AT_Type::_S_ref(_M_elems, 0);
 231:/usr/arm-none-eabi/include/c++/9.3.0/array ****       }
 232:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 233:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR pointer
 234:/usr/arm-none-eabi/include/c++/9.3.0/array ****       data() noexcept
 235:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 236:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 237:/usr/arm-none-eabi/include/c++/9.3.0/array ****       _GLIBCXX17_CONSTEXPR const_pointer
 238:/usr/arm-none-eabi/include/c++/9.3.0/array ****       data() const noexcept
 11468              		.loc 8 238 7
 11469              		.cfi_startproc
 11470              		@ args = 0, pretend = 0, frame = 8
 11471              		@ frame_needed = 1, uses_anonymous_args = 0
 11472 0000 80B5     		push	{r7, lr}
 11473              	.LCFI845:
 11474              		.cfi_def_cfa_offset 8
 11475              		.cfi_offset 7, -8
 11476              		.cfi_offset 14, -4
 11477 0002 82B0     		sub	sp, sp, #8
 11478              	.LCFI846:
 11479              		.cfi_def_cfa_offset 16
 11480 0004 00AF     		add	r7, sp, #0
 11481              	.LCFI847:
 11482              		.cfi_def_cfa_register 7
 11483 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 369


 239:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 11484              		.loc 8 239 33
 11485 0008 7B68     		ldr	r3, [r7, #4]
 11486              		.loc 8 239 32
 11487 000a 1846     		mov	r0, r3
 11488 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptrERA8_KS6_
 11489 0010 0346     		mov	r3, r0
 11490              		.loc 8 239 44
 11491 0012 1846     		mov	r0, r3
 11492 0014 0837     		adds	r7, r7, #8
 11493              	.LCFI848:
 11494              		.cfi_def_cfa_offset 8
 11495 0016 BD46     		mov	sp, r7
 11496              	.LCFI849:
 11497              		.cfi_def_cfa_register 13
 11498              		@ sp needed
 11499 0018 80BD     		pop	{r7, pc}
 11500              		.cfi_endproc
 11501              	.LFE4724:
 11503              		.section	.text._ZNSt5arrayIhLj648EE4dataEv,"axG",%progbits,_ZNSt5arrayIhLj648EE4dataEv,comdat
 11504              		.align	1
 11505              		.weak	_ZNSt5arrayIhLj648EE4dataEv
 11506              		.syntax unified
 11507              		.thumb
 11508              		.thumb_func
 11509              		.fpu fpv4-sp-d16
 11511              	_ZNSt5arrayIhLj648EE4dataEv:
 11512              	.LFB4726:
 234:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 11513              		.loc 8 234 7
 11514              		.cfi_startproc
 11515              		@ args = 0, pretend = 0, frame = 8
 11516              		@ frame_needed = 1, uses_anonymous_args = 0
 11517 0000 80B5     		push	{r7, lr}
 11518              	.LCFI850:
 11519              		.cfi_def_cfa_offset 8
 11520              		.cfi_offset 7, -8
 11521              		.cfi_offset 14, -4
 11522 0002 82B0     		sub	sp, sp, #8
 11523              	.LCFI851:
 11524              		.cfi_def_cfa_offset 16
 11525 0004 00AF     		add	r7, sp, #0
 11526              	.LCFI852:
 11527              		.cfi_def_cfa_register 7
 11528 0006 7860     		str	r0, [r7, #4]
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11529              		.loc 8 235 33
 11530 0008 7B68     		ldr	r3, [r7, #4]
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11531              		.loc 8 235 32
 11532 000a 1846     		mov	r0, r3
 11533 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh
 11534 0010 0346     		mov	r3, r0
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11535              		.loc 8 235 44
 11536 0012 1846     		mov	r0, r3
 11537 0014 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccU23Djm.s 			page 370


 11538              	.LCFI853:
 11539              		.cfi_def_cfa_offset 8
 11540 0016 BD46     		mov	sp, r7
 11541              	.LCFI854:
 11542              		.cfi_def_cfa_register 13
 11543              		@ sp needed
 11544 0018 80BD     		pop	{r7, pc}
 11545              		.cfi_endproc
 11546              	.LFE4726:
 11548              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv,"axG",%progbits,_ZN4otto3m
 11549              		.align	1
 11550              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv
 11551              		.syntax unified
 11552              		.thumb
 11553              		.thumb_func
 11554              		.fpu fpv4-sp-d16
 11556              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv:
 11557              	.LFB4727:
 158:Cpp/ws2812b.hpp ****     {
 11558              		.loc 9 158 10
 11559              		.cfi_startproc
 11560              		@ args = 0, pretend = 0, frame = 8
 11561              		@ frame_needed = 1, uses_anonymous_args = 0
 11562 0000 80B5     		push	{r7, lr}
 11563              	.LCFI855:
 11564              		.cfi_def_cfa_offset 8
 11565              		.cfi_offset 7, -8
 11566              		.cfi_offset 14, -4
 11567 0002 82B0     		sub	sp, sp, #8
 11568              	.LCFI856:
 11569              		.cfi_def_cfa_offset 16
 11570 0004 00AF     		add	r7, sp, #0
 11571              	.LCFI857:
 11572              		.cfi_def_cfa_register 7
 11573 0006 7860     		str	r0, [r7, #4]
 160:Cpp/ws2812b.hpp ****       needs_update_ = false;
 11574              		.loc 9 160 7
 11575 0008 7868     		ldr	r0, [r7, #4]
 11576 000a FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv
 161:Cpp/ws2812b.hpp ****     }
 11577              		.loc 9 161 7
 11578 000e 7B68     		ldr	r3, [r7, #4]
 11579 0010 0022     		movs	r2, #0
 11580 0012 1A71     		strb	r2, [r3, #4]
 162:Cpp/ws2812b.hpp **** 
 11581              		.loc 9 162 5
 11582 0014 00BF     		nop
 11583 0016 0837     		adds	r7, r7, #8
 11584              	.LCFI858:
 11585              		.cfi_def_cfa_offset 8
 11586 0018 BD46     		mov	sp, r7
 11587              	.LCFI859:
 11588              		.cfi_def_cfa_register 13
 11589              		@ sp needed
 11590 001a 80BD     		pop	{r7, pc}
 11591              		.cfi_endproc
 11592              	.LFE4727:
ARM GAS  /tmp/ccU23Djm.s 			page 371


 11594              		.section	.text._ZNKSt5arrayIhLj4EEixEj,"axG",%progbits,_ZNKSt5arrayIhLj4EEixEj,comdat
 11595              		.align	1
 11596              		.weak	_ZNKSt5arrayIhLj4EEixEj
 11597              		.syntax unified
 11598              		.thumb
 11599              		.thumb_func
 11600              		.fpu fpv4-sp-d16
 11602              	_ZNKSt5arrayIhLj4EEixEj:
 11603              	.LFB4728:
 189:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 11604              		.loc 8 189 7
 11605              		.cfi_startproc
 11606              		@ args = 0, pretend = 0, frame = 8
 11607              		@ frame_needed = 1, uses_anonymous_args = 0
 11608 0000 80B5     		push	{r7, lr}
 11609              	.LCFI860:
 11610              		.cfi_def_cfa_offset 8
 11611              		.cfi_offset 7, -8
 11612              		.cfi_offset 14, -4
 11613 0002 82B0     		sub	sp, sp, #8
 11614              	.LCFI861:
 11615              		.cfi_def_cfa_offset 16
 11616 0004 00AF     		add	r7, sp, #0
 11617              	.LCFI862:
 11618              		.cfi_def_cfa_register 7
 11619 0006 7860     		str	r0, [r7, #4]
 11620 0008 3960     		str	r1, [r7]
 190:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11621              		.loc 8 190 33
 11622 000a 7B68     		ldr	r3, [r7, #4]
 190:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11623              		.loc 8 190 32
 11624 000c 3968     		ldr	r1, [r7]
 11625 000e 1846     		mov	r0, r3
 11626 0010 FFF7FEFF 		bl	_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
 11627 0014 0346     		mov	r3, r0
 190:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11628              		.loc 8 190 49
 11629 0016 1846     		mov	r0, r3
 11630 0018 0837     		adds	r7, r7, #8
 11631              	.LCFI863:
 11632              		.cfi_def_cfa_offset 8
 11633 001a BD46     		mov	sp, r7
 11634              	.LCFI864:
 11635              		.cfi_def_cfa_register 13
 11636              		@ sp needed
 11637 001c 80BD     		pop	{r7, pc}
 11638              		.cfi_endproc
 11639              	.LFE4728:
 11641              		.section	.text._ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_,"axG",%progbits,_ZSt5beginISt5arr
 11642              		.align	1
 11643              		.weak	_ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_
 11644              		.syntax unified
 11645              		.thumb
 11646              		.thumb_func
 11647              		.fpu fpv4-sp-d16
 11649              	_ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_:
ARM GAS  /tmp/ccU23Djm.s 			page 372


 11650              	.LFB4729:
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     { return __cont.begin(); }
 11651              		.loc 15 48 5
 11652              		.cfi_startproc
 11653              		@ args = 0, pretend = 0, frame = 8
 11654              		@ frame_needed = 1, uses_anonymous_args = 0
 11655 0000 80B5     		push	{r7, lr}
 11656              	.LCFI865:
 11657              		.cfi_def_cfa_offset 8
 11658              		.cfi_offset 7, -8
 11659              		.cfi_offset 14, -4
 11660 0002 82B0     		sub	sp, sp, #8
 11661              	.LCFI866:
 11662              		.cfi_def_cfa_offset 16
 11663 0004 00AF     		add	r7, sp, #0
 11664              	.LCFI867:
 11665              		.cfi_def_cfa_register 7
 11666 0006 7860     		str	r0, [r7, #4]
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
 11667              		.loc 15 49 27
 11668 0008 7868     		ldr	r0, [r7, #4]
 11669 000a FFF7FEFF 		bl	_ZNSt5arrayIhLj648EE5beginEv
 11670 000e 0346     		mov	r3, r0
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
 11671              		.loc 15 49 30
 11672 0010 1846     		mov	r0, r3
 11673 0012 0837     		adds	r7, r7, #8
 11674              	.LCFI868:
 11675              		.cfi_def_cfa_offset 8
 11676 0014 BD46     		mov	sp, r7
 11677              	.LCFI869:
 11678              		.cfi_def_cfa_register 13
 11679              		@ sp needed
 11680 0016 80BD     		pop	{r7, pc}
 11681              		.cfi_endproc
 11682              	.LFE4729:
 11684              		.section	.text._ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_,"axG",%progbits,_ZSt3endISt5arrayIhLj
 11685              		.align	1
 11686              		.weak	_ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_
 11687              		.syntax unified
 11688              		.thumb
 11689              		.thumb_func
 11690              		.fpu fpv4-sp-d16
 11692              	_ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_:
 11693              	.LFB4730:
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h ****     { return __cont.end(); }
 11694              		.loc 15 68 5
 11695              		.cfi_startproc
 11696              		@ args = 0, pretend = 0, frame = 8
 11697              		@ frame_needed = 1, uses_anonymous_args = 0
 11698 0000 80B5     		push	{r7, lr}
 11699              	.LCFI870:
 11700              		.cfi_def_cfa_offset 8
 11701              		.cfi_offset 7, -8
 11702              		.cfi_offset 14, -4
 11703 0002 82B0     		sub	sp, sp, #8
 11704              	.LCFI871:
ARM GAS  /tmp/ccU23Djm.s 			page 373


 11705              		.cfi_def_cfa_offset 16
 11706 0004 00AF     		add	r7, sp, #0
 11707              	.LCFI872:
 11708              		.cfi_def_cfa_register 7
 11709 0006 7860     		str	r0, [r7, #4]
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
 11710              		.loc 15 69 25
 11711 0008 7868     		ldr	r0, [r7, #4]
 11712 000a FFF7FEFF 		bl	_ZNSt5arrayIhLj648EE3endEv
 11713 000e 0346     		mov	r3, r0
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/range_access.h **** 
 11714              		.loc 15 69 28
 11715 0010 1846     		mov	r0, r3
 11716 0012 0837     		adds	r7, r7, #8
 11717              	.LCFI873:
 11718              		.cfi_def_cfa_offset 8
 11719 0014 BD46     		mov	sp, r7
 11720              	.LCFI874:
 11721              		.cfi_def_cfa_register 13
 11722              		@ sp needed
 11723 0016 80BD     		pop	{r7, pc}
 11724              		.cfi_endproc
 11725              	.LFE4730:
 11727              		.section	.text._ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE,"axG",%progbits,_ZSt7forwardI
 11728              		.align	1
 11729              		.weak	_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE
 11730              		.syntax unified
 11731              		.thumb
 11732              		.thumb_func
 11733              		.fpu fpv4-sp-d16
 11735              	_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE:
 11736              	.LFB4731:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 11737              		.loc 13 74 5
 11738              		.cfi_startproc
 11739              		@ args = 0, pretend = 0, frame = 8
 11740              		@ frame_needed = 1, uses_anonymous_args = 0
 11741              		@ link register save eliminated.
 11742 0000 80B4     		push	{r7}
 11743              	.LCFI875:
 11744              		.cfi_def_cfa_offset 4
 11745              		.cfi_offset 7, -4
 11746 0002 83B0     		sub	sp, sp, #12
 11747              	.LCFI876:
 11748              		.cfi_def_cfa_offset 16
 11749 0004 00AF     		add	r7, sp, #0
 11750              	.LCFI877:
 11751              		.cfi_def_cfa_register 7
 11752 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 11753              		.loc 13 75 36
 11754 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 11755              		.loc 13 75 39
 11756 000a 1846     		mov	r0, r3
 11757 000c 0C37     		adds	r7, r7, #12
 11758              	.LCFI878:
ARM GAS  /tmp/ccU23Djm.s 			page 374


 11759              		.cfi_def_cfa_offset 4
 11760 000e BD46     		mov	sp, r7
 11761              	.LCFI879:
 11762              		.cfi_def_cfa_register 13
 11763              		@ sp needed
 11764 0010 5DF8047B 		ldr	r7, [sp], #4
 11765              	.LCFI880:
 11766              		.cfi_restore 7
 11767              		.cfi_def_cfa_offset 0
 11768 0014 7047     		bx	lr
 11769              		.cfi_endproc
 11770              	.LFE4731:
 11772              		.section	.text._ZSt4fillIPhhEvT_S1_RKT0_,"axG",%progbits,_ZSt4fillIPhhEvT_S1_RKT0_,comdat
 11773              		.align	1
 11774              		.weak	_ZSt4fillIPhhEvT_S1_RKT0_
 11775              		.syntax unified
 11776              		.thumb
 11777              		.thumb_func
 11778              		.fpu fpv4-sp-d16
 11780              	_ZSt4fillIPhhEvT_S1_RKT0_:
 11781              	.LFB4732:
 476:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 477:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 478:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 479:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 480:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 481:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 482:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 483:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 484:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   result + (first - last)
 485:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 486:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 487:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 488:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 489:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 490:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 491:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 492:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 493:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  within [first,last).
 494:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 495:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 496:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _OI
 497:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 498:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 499:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 500:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 501:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 502:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 503:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 504:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 505:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 506:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 507:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 508:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 509:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 510:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #else
 511:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
ARM GAS  /tmp/ccU23Djm.s 			page 375


 512:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 513:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 514:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool, bool, typename>
 515:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move_backward
 516:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 517:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 518:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _BI2
 519:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 520:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 521:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  while (__first != __last)
 522:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    *--__result = *--__last;
 523:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 524:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 525:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 526:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 527:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 528:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Category>
 529:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 530:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 531:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 532:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _BI2
 533:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 534:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 535:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  while (__first != __last)
 536:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 537:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 538:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 539:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 540:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 541:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 542:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<>
 543:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 544:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 545:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 546:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _BI2
 547:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 548:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 549:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 550:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 551:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    *--__result = *--__last;
 552:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 553:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 554:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 555:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 556:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 557:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<>
 558:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 559:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 560:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 561:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _BI2
 562:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 563:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 564:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 565:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 566:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 567:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result;
 568:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
ARM GAS  /tmp/ccU23Djm.s 			page 376


 569:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 570:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 571:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 572:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove>
 573:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 574:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 575:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       template<typename _Tp>
 576:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	static _Tp*
 577:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 578:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 579:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 580:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 581:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 582:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 583:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 584:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 585:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 586:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 587:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  if (_Num)
 588:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 589:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result - _Num;
 590:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 591:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 592:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 593:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 594:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _BI2
 595:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 596:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 597:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::value_type _ValueType1;
 598:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI2>::value_type _ValueType2;
 599:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 600:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       const bool __simple = (__is_trivially_copyable(_ValueType1)
 601:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __is_pointer<_BI1>::__value
 602:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __is_pointer<_BI2>::__value
 603:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 604:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 605:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove, __simple,
 606:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 607:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 								 __last,
 608:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 								 __result);
 609:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 610:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 611:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 612:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _BI2
 613:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 614:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 615:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 616:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		std::__copy_move_backward_a<_IsMove>
 617:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 618:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 619:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 620:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 621:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 622:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 623:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 624:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 625:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
ARM GAS  /tmp/ccU23Djm.s 			page 377


 626:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 627:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   result - (first - last)
 628:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 629:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 630:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 631:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 632:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 633:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 634:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 635:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 636:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 637:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 638:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 639:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 640:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _BI2
 641:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 642:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 643:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 644:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 645:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 646:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 647:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 648:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 649:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 650:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 651:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
 652:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 653:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 654:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 655:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 656:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 657:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 658:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 659:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 660:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 661:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 662:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   result - (first - last)
 663:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 664:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 665:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 666:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 667:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 668:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 669:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 670:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 671:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 672:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 673:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
 674:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 675:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline _BI2
 676:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 677:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 678:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 679:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 680:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 681:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 682:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
ARM GAS  /tmp/ccU23Djm.s 			page 378


 683:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 684:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 685:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 686:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 687:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 						std::__miter_base(__last),
 688:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 						__result);
 689:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 690:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 691:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 692:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #else
 693:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 694:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** #endif
 695:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 696:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 697:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline typename
 698:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 699:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 700:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****  	     const _Tp& __value)
 701:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 702:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 703:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	*__first = __value;
 704:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 705:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 706:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 707:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline typename
 708:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 709:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 710:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	     const _Tp& __value)
 711:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 712:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 713:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 714:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	*__first = __tmp;
 715:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 716:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 717:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 718:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _Tp>
 719:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline typename
 720:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 721:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 722:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 723:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 725:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 726:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 727:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 728:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   /**
 729:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 730:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 731:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 732:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 733:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 734:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  @return   Nothing.
 735:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *
 736:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 737:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 738:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 739:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   */
ARM GAS  /tmp/ccU23Djm.s 			page 379


 740:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 741:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     inline void
 742:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 11782              		.loc 16 742 5
 11783              		.cfi_startproc
 11784              		@ args = 0, pretend = 0, frame = 16
 11785              		@ frame_needed = 1, uses_anonymous_args = 0
 11786 0000 90B5     		push	{r4, r7, lr}
 11787              	.LCFI881:
 11788              		.cfi_def_cfa_offset 12
 11789              		.cfi_offset 4, -12
 11790              		.cfi_offset 7, -8
 11791              		.cfi_offset 14, -4
 11792 0002 85B0     		sub	sp, sp, #20
 11793              	.LCFI882:
 11794              		.cfi_def_cfa_offset 32
 11795 0004 00AF     		add	r7, sp, #0
 11796              	.LCFI883:
 11797              		.cfi_def_cfa_register 7
 11798 0006 F860     		str	r0, [r7, #12]
 11799 0008 B960     		str	r1, [r7, #8]
 11800 000a 7A60     		str	r2, [r7, #4]
 743:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 744:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       // concept requirements
 745:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 746:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 				  _ForwardIterator>)
 747:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 748:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 749:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 11801              		.loc 16 749 20
 11802 000c F868     		ldr	r0, [r7, #12]
 11803 000e FFF7FEFF 		bl	_ZSt12__niter_baseIPhET_S1_
 11804 0012 0446     		mov	r4, r0
 11805 0014 B868     		ldr	r0, [r7, #8]
 11806 0016 FFF7FEFF 		bl	_ZSt12__niter_baseIPhET_S1_
 11807 001a 0346     		mov	r3, r0
 11808 001c 7A68     		ldr	r2, [r7, #4]
 11809 001e 1946     		mov	r1, r3
 11810 0020 2046     		mov	r0, r4
 11811 0022 FFF7FEFF 		bl	_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_
 750:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 		    __value);
 751:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 11812              		.loc 16 751 5
 11813 0026 00BF     		nop
 11814 0028 1437     		adds	r7, r7, #20
 11815              	.LCFI884:
 11816              		.cfi_def_cfa_offset 12
 11817 002a BD46     		mov	sp, r7
 11818              	.LCFI885:
 11819              		.cfi_def_cfa_register 13
 11820              		@ sp needed
 11821 002c 90BD     		pop	{r4, r7, pc}
 11822              		.cfi_endproc
 11823              	.LFE4732:
 11825              		.section	.text._ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE,"axG",%progbits,_ZSt7forwar
 11826              		.align	1
 11827              		.weak	_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE
ARM GAS  /tmp/ccU23Djm.s 			page 380


 11828              		.syntax unified
 11829              		.thumb
 11830              		.thumb_func
 11831              		.fpu fpv4-sp-d16
 11833              	_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE:
 11834              	.LFB4733:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 11835              		.loc 13 74 5
 11836              		.cfi_startproc
 11837              		@ args = 0, pretend = 0, frame = 8
 11838              		@ frame_needed = 1, uses_anonymous_args = 0
 11839              		@ link register save eliminated.
 11840 0000 80B4     		push	{r7}
 11841              	.LCFI886:
 11842              		.cfi_def_cfa_offset 4
 11843              		.cfi_offset 7, -4
 11844 0002 83B0     		sub	sp, sp, #12
 11845              	.LCFI887:
 11846              		.cfi_def_cfa_offset 16
 11847 0004 00AF     		add	r7, sp, #0
 11848              	.LCFI888:
 11849              		.cfi_def_cfa_register 7
 11850 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 11851              		.loc 13 75 36
 11852 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 11853              		.loc 13 75 39
 11854 000a 1846     		mov	r0, r3
 11855 000c 0C37     		adds	r7, r7, #12
 11856              	.LCFI889:
 11857              		.cfi_def_cfa_offset 4
 11858 000e BD46     		mov	sp, r7
 11859              	.LCFI890:
 11860              		.cfi_def_cfa_register 13
 11861              		@ sp needed
 11862 0010 5DF8047B 		ldr	r7, [sp], #4
 11863              	.LCFI891:
 11864              		.cfi_restore 7
 11865              		.cfi_def_cfa_offset 0
 11866 0014 7047     		bx	lr
 11867              		.cfi_endproc
 11868              	.LFE4733:
 11870              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_,"axG",%pro
 11871              		.align	1
 11872              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_
 11873              		.syntax unified
 11874              		.thumb
 11875              		.thumb_func
 11876              		.fpu fpv4-sp-d16
 11878              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_:
 11879              	.LFB4734:
 239:Cpp/fixed_size_function.hpp ****   {
 11880              		.loc 12 239 8
 11881              		.cfi_startproc
 11882              		@ args = 0, pretend = 0, frame = 16
 11883              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccU23Djm.s 			page 381


 11884 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11885              	.LCFI892:
 11886              		.cfi_def_cfa_offset 20
 11887              		.cfi_offset 4, -20
 11888              		.cfi_offset 5, -16
 11889              		.cfi_offset 6, -12
 11890              		.cfi_offset 7, -8
 11891              		.cfi_offset 14, -4
 11892 0002 85B0     		sub	sp, sp, #20
 11893              	.LCFI893:
 11894              		.cfi_def_cfa_offset 40
 11895 0004 00AF     		add	r7, sp, #0
 11896              	.LCFI894:
 11897              		.cfi_def_cfa_register 7
 11898 0006 7860     		str	r0, [r7, #4]
 11899 0008 3960     		str	r1, [r7]
 244:Cpp/fixed_size_function.hpp **** 
 11900              		.loc 12 244 55
 11901 000a 3868     		ldr	r0, [r7]
 11902 000c FFF7FEFF 		bl	_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE
 11903 0010 0446     		mov	r4, r0
 244:Cpp/fixed_size_function.hpp **** 
 11904              		.loc 12 244 5
 11905 0012 7B68     		ldr	r3, [r7, #4]
 11906 0014 1033     		adds	r3, r3, #16
 11907 0016 1946     		mov	r1, r3
 11908 0018 0420     		movs	r0, #4
 11909 001a FFF7FEFF 		bl	_ZnwjPv
 11910 001e 0346     		mov	r3, r0
 11911 0020 1C60     		str	r4, [r3]
 246:Cpp/fixed_size_function.hpp ****     vtable_.destroy = &destroy_impl<functor_type>;
 11912              		.loc 12 246 5
 11913 0022 7B68     		ldr	r3, [r7, #4]
 11914 0024 084A     		ldr	r2, .L466
 11915 0026 1A60     		str	r2, [r3]
 247:Cpp/fixed_size_function.hpp ****     init_copy<functor_type>(is_copyable());
 11916              		.loc 12 247 5
 11917 0028 7B68     		ldr	r3, [r7, #4]
 11918 002a 084A     		ldr	r2, .L466+4
 11919 002c 5A60     		str	r2, [r3, #4]
 248:Cpp/fixed_size_function.hpp ****     init_move<functor_type>(is_movable());
 11920              		.loc 12 248 5
 11921 002e 3146     		mov	r1, r6
 11922 0030 7868     		ldr	r0, [r7, #4]
 11923 0032 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integral_constantIb
 249:Cpp/fixed_size_function.hpp ****   }
 11924              		.loc 12 249 5
 11925 0036 2946     		mov	r1, r5
 11926 0038 7868     		ldr	r0, [r7, #4]
 11927 003a FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constantIb
 250:Cpp/fixed_size_function.hpp **** 
 11928              		.loc 12 250 3
 11929 003e 00BF     		nop
 11930 0040 1437     		adds	r7, r7, #20
 11931              	.LCFI895:
 11932              		.cfi_def_cfa_offset 20
 11933 0042 BD46     		mov	sp, r7
ARM GAS  /tmp/ccU23Djm.s 			page 382


 11934              	.LCFI896:
 11935              		.cfi_def_cfa_register 13
 11936              		@ sp needed
 11937 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 11938              	.L467:
 11939 0046 00BF     		.align	2
 11940              	.L466:
 11941 0048 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv
 11942 004c 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv
 11943              		.cfi_endproc
 11944              	.LFE4734:
 11946              		.section	.text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv,"axG",%progbits,_ZNSt5arrayIN4otto3mcu
 11947              		.align	1
 11948              		.weak	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv
 11949              		.syntax unified
 11950              		.thumb
 11951              		.thumb_func
 11952              		.fpu fpv4-sp-d16
 11954              	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv:
 11955              	.LFB4735:
 126:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return iterator(data()); }
 11956              		.loc 8 126 7
 11957              		.cfi_startproc
 11958              		@ args = 0, pretend = 0, frame = 8
 11959              		@ frame_needed = 1, uses_anonymous_args = 0
 11960 0000 80B5     		push	{r7, lr}
 11961              	.LCFI897:
 11962              		.cfi_def_cfa_offset 8
 11963              		.cfi_offset 7, -8
 11964              		.cfi_offset 14, -4
 11965 0002 82B0     		sub	sp, sp, #8
 11966              	.LCFI898:
 11967              		.cfi_def_cfa_offset 16
 11968 0004 00AF     		add	r7, sp, #0
 11969              	.LCFI899:
 11970              		.cfi_def_cfa_register 7
 11971 0006 7860     		str	r0, [r7, #4]
 127:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11972              		.loc 8 127 16
 11973 0008 7868     		ldr	r0, [r7, #4]
 11974 000a FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv
 11975 000e 0346     		mov	r3, r0
 127:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 11976              		.loc 8 127 34
 11977 0010 1846     		mov	r0, r3
 11978 0012 0837     		adds	r7, r7, #8
 11979              	.LCFI900:
 11980              		.cfi_def_cfa_offset 8
 11981 0014 BD46     		mov	sp, r7
 11982              	.LCFI901:
 11983              		.cfi_def_cfa_register 13
 11984              		@ sp needed
 11985 0016 80BD     		pop	{r7, pc}
 11986              		.cfi_endproc
 11987              	.LFE4735:
 11989              		.section	.text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv,"axG",%progbits,_ZNSt5arrayIN4otto3mcu7G
 11990              		.align	1
ARM GAS  /tmp/ccU23Djm.s 			page 383


 11991              		.weak	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv
 11992              		.syntax unified
 11993              		.thumb
 11994              		.thumb_func
 11995              		.fpu fpv4-sp-d16
 11997              	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv:
 11998              	.LFB4736:
 134:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return iterator(data() + _Nm); }
 11999              		.loc 8 134 7
 12000              		.cfi_startproc
 12001              		@ args = 0, pretend = 0, frame = 8
 12002              		@ frame_needed = 1, uses_anonymous_args = 0
 12003 0000 80B5     		push	{r7, lr}
 12004              	.LCFI902:
 12005              		.cfi_def_cfa_offset 8
 12006              		.cfi_offset 7, -8
 12007              		.cfi_offset 14, -4
 12008 0002 82B0     		sub	sp, sp, #8
 12009              	.LCFI903:
 12010              		.cfi_def_cfa_offset 16
 12011 0004 00AF     		add	r7, sp, #0
 12012              	.LCFI904:
 12013              		.cfi_def_cfa_register 7
 12014 0006 7860     		str	r0, [r7, #4]
 135:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12015              		.loc 8 135 32
 12016 0008 7868     		ldr	r0, [r7, #4]
 12017 000a FFF7FEFF 		bl	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv
 12018 000e 0346     		mov	r3, r0
 135:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12019              		.loc 8 135 37
 12020 0010 6033     		adds	r3, r3, #96
 135:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12021              		.loc 8 135 40
 12022 0012 1846     		mov	r0, r3
 12023 0014 0837     		adds	r7, r7, #8
 12024              	.LCFI905:
 12025              		.cfi_def_cfa_offset 8
 12026 0016 BD46     		mov	sp, r7
 12027              	.LCFI906:
 12028              		.cfi_def_cfa_register 13
 12029              		@ sp needed
 12030 0018 80BD     		pop	{r7, pc}
 12031              		.cfi_endproc
 12032              	.LFE4736:
 12034              		.section	.text._ZNSt5arrayIhLj2EE4dataEv,"axG",%progbits,_ZNSt5arrayIhLj2EE4dataEv,comdat
 12035              		.align	1
 12036              		.weak	_ZNSt5arrayIhLj2EE4dataEv
 12037              		.syntax unified
 12038              		.thumb
 12039              		.thumb_func
 12040              		.fpu fpv4-sp-d16
 12042              	_ZNSt5arrayIhLj2EE4dataEv:
 12043              	.LFB4737:
 234:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 12044              		.loc 8 234 7
 12045              		.cfi_startproc
ARM GAS  /tmp/ccU23Djm.s 			page 384


 12046              		@ args = 0, pretend = 0, frame = 8
 12047              		@ frame_needed = 1, uses_anonymous_args = 0
 12048 0000 80B5     		push	{r7, lr}
 12049              	.LCFI907:
 12050              		.cfi_def_cfa_offset 8
 12051              		.cfi_offset 7, -8
 12052              		.cfi_offset 14, -4
 12053 0002 82B0     		sub	sp, sp, #8
 12054              	.LCFI908:
 12055              		.cfi_def_cfa_offset 16
 12056 0004 00AF     		add	r7, sp, #0
 12057              	.LCFI909:
 12058              		.cfi_def_cfa_register 7
 12059 0006 7860     		str	r0, [r7, #4]
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12060              		.loc 8 235 33
 12061 0008 7B68     		ldr	r3, [r7, #4]
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12062              		.loc 8 235 32
 12063 000a 1846     		mov	r0, r3
 12064 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh
 12065 0010 0346     		mov	r3, r0
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12066              		.loc 8 235 44
 12067 0012 1846     		mov	r0, r3
 12068 0014 0837     		adds	r7, r7, #8
 12069              	.LCFI910:
 12070              		.cfi_def_cfa_offset 8
 12071 0016 BD46     		mov	sp, r7
 12072              	.LCFI911:
 12073              		.cfi_def_cfa_register 13
 12074              		@ sp needed
 12075 0018 80BD     		pop	{r7, pc}
 12076              		.cfi_endproc
 12077              	.LFE4737:
 12079              		.section	.text._ZNKSt5arrayIhLj2EE4sizeEv,"axG",%progbits,_ZNKSt5arrayIhLj2EE4sizeEv,comdat
 12080              		.align	1
 12081              		.weak	_ZNKSt5arrayIhLj2EE4sizeEv
 12082              		.syntax unified
 12083              		.thumb
 12084              		.thumb_func
 12085              		.fpu fpv4-sp-d16
 12087              	_ZNKSt5arrayIhLj2EE4sizeEv:
 12088              	.LFB4738:
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12089              		.loc 8 175 7
 12090              		.cfi_startproc
 12091              		@ args = 0, pretend = 0, frame = 8
 12092              		@ frame_needed = 1, uses_anonymous_args = 0
 12093              		@ link register save eliminated.
 12094 0000 80B4     		push	{r7}
 12095              	.LCFI912:
 12096              		.cfi_def_cfa_offset 4
 12097              		.cfi_offset 7, -4
 12098 0002 83B0     		sub	sp, sp, #12
 12099              	.LCFI913:
 12100              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccU23Djm.s 			page 385


 12101 0004 00AF     		add	r7, sp, #0
 12102              	.LCFI914:
 12103              		.cfi_def_cfa_register 7
 12104 0006 7860     		str	r0, [r7, #4]
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12105              		.loc 8 175 38
 12106 0008 0223     		movs	r3, #2
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 12107              		.loc 8 175 43
 12108 000a 1846     		mov	r0, r3
 12109 000c 0C37     		adds	r7, r7, #12
 12110              	.LCFI915:
 12111              		.cfi_def_cfa_offset 4
 12112 000e BD46     		mov	sp, r7
 12113              	.LCFI916:
 12114              		.cfi_def_cfa_register 13
 12115              		@ sp needed
 12116 0010 5DF8047B 		ldr	r7, [sp], #4
 12117              	.LCFI917:
 12118              		.cfi_restore 7
 12119              		.cfi_def_cfa_offset 0
 12120 0014 7047     		bx	lr
 12121              		.cfi_endproc
 12122              	.LFE4738:
 12124              		.section	.text._ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE,"ax",%pro
 12125              		.align	1
 12126              		.syntax unified
 12127              		.thumb
 12128              		.thumb_func
 12129              		.fpu fpv4-sp-d16
 12131              	_ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE:
 12132              	.LFB4739:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 12133              		.loc 13 74 5
 12134              		.cfi_startproc
 12135              		@ args = 0, pretend = 0, frame = 8
 12136              		@ frame_needed = 1, uses_anonymous_args = 0
 12137              		@ link register save eliminated.
 12138 0000 80B4     		push	{r7}
 12139              	.LCFI918:
 12140              		.cfi_def_cfa_offset 4
 12141              		.cfi_offset 7, -4
 12142 0002 83B0     		sub	sp, sp, #12
 12143              	.LCFI919:
 12144              		.cfi_def_cfa_offset 16
 12145 0004 00AF     		add	r7, sp, #0
 12146              	.LCFI920:
 12147              		.cfi_def_cfa_register 7
 12148 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 12149              		.loc 13 75 36
 12150 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 12151              		.loc 13 75 39
 12152 000a 1846     		mov	r0, r3
 12153 000c 0C37     		adds	r7, r7, #12
 12154              	.LCFI921:
ARM GAS  /tmp/ccU23Djm.s 			page 386


 12155              		.cfi_def_cfa_offset 4
 12156 000e BD46     		mov	sp, r7
 12157              	.LCFI922:
 12158              		.cfi_def_cfa_register 13
 12159              		@ sp needed
 12160 0010 5DF8047B 		ldr	r7, [sp], #4
 12161              	.LCFI923:
 12162              		.cfi_restore 7
 12163              		.cfi_def_cfa_offset 0
 12164 0014 7047     		bx	lr
 12165              		.cfi_endproc
 12166              	.LFE4739:
 12168              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlv
 12169              		.align	1
 12170              		.syntax unified
 12171              		.thumb
 12172              		.thumb_func
 12173              		.fpu fpv4-sp-d16
 12175              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlvE_EEvOT_:
 12176              	.LFB4740:
 239:Cpp/fixed_size_function.hpp ****   {
 12177              		.loc 12 239 8
 12178              		.cfi_startproc
 12179              		@ args = 0, pretend = 0, frame = 16
 12180              		@ frame_needed = 1, uses_anonymous_args = 0
 12181 0000 B0B5     		push	{r4, r5, r7, lr}
 12182              	.LCFI924:
 12183              		.cfi_def_cfa_offset 16
 12184              		.cfi_offset 4, -16
 12185              		.cfi_offset 5, -12
 12186              		.cfi_offset 7, -8
 12187              		.cfi_offset 14, -4
 12188 0002 84B0     		sub	sp, sp, #16
 12189              	.LCFI925:
 12190              		.cfi_def_cfa_offset 32
 12191 0004 00AF     		add	r7, sp, #0
 12192              	.LCFI926:
 12193              		.cfi_def_cfa_register 7
 12194 0006 7860     		str	r0, [r7, #4]
 12195 0008 3960     		str	r1, [r7]
 244:Cpp/fixed_size_function.hpp **** 
 12196              		.loc 12 244 55
 12197 000a 3868     		ldr	r0, [r7]
 12198 000c FFF7FEFF 		bl	_ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE
 244:Cpp/fixed_size_function.hpp **** 
 12199              		.loc 12 244 5
 12200 0010 7B68     		ldr	r3, [r7, #4]
 12201 0012 1033     		adds	r3, r3, #16
 12202 0014 1946     		mov	r1, r3
 12203 0016 0120     		movs	r0, #1
 12204 0018 FFF7FEFF 		bl	_ZnwjPv
 246:Cpp/fixed_size_function.hpp ****     vtable_.destroy = &destroy_impl<functor_type>;
 12205              		.loc 12 246 5
 12206 001c 7B68     		ldr	r3, [r7, #4]
 12207 001e 084A     		ldr	r2, .L479
 12208 0020 1A60     		str	r2, [r3]
 247:Cpp/fixed_size_function.hpp ****     init_copy<functor_type>(is_copyable());
ARM GAS  /tmp/ccU23Djm.s 			page 387


 12209              		.loc 12 247 5
 12210 0022 7B68     		ldr	r3, [r7, #4]
 12211 0024 074A     		ldr	r2, .L479+4
 12212 0026 5A60     		str	r2, [r3, #4]
 248:Cpp/fixed_size_function.hpp ****     init_move<functor_type>(is_movable());
 12213              		.loc 12 248 5
 12214 0028 2946     		mov	r1, r5
 12215 002a 7868     		ldr	r0, [r7, #4]
 12216 002c FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZ14OTTO_main_loopEUlvE_EEvSt17
 249:Cpp/fixed_size_function.hpp ****   }
 12217              		.loc 12 249 5
 12218 0030 2146     		mov	r1, r4
 12219 0032 7868     		ldr	r0, [r7, #4]
 12220 0034 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopEUlvE_EEvSt17
 250:Cpp/fixed_size_function.hpp **** 
 12221              		.loc 12 250 3
 12222 0038 00BF     		nop
 12223 003a 1037     		adds	r7, r7, #16
 12224              	.LCFI927:
 12225              		.cfi_def_cfa_offset 16
 12226 003c BD46     		mov	sp, r7
 12227              	.LCFI928:
 12228              		.cfi_def_cfa_register 13
 12229              		@ sp needed
 12230 003e B0BD     		pop	{r4, r5, r7, pc}
 12231              	.L480:
 12232              		.align	2
 12233              	.L479:
 12234 0040 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZ14OTTO_main_loopEUlvE_EEvP
 12235 0044 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZ14OTTO_main_loopEUlvE_
 12236              		.cfi_endproc
 12237              	.LFE4740:
 12239              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Schedu
 12240              		.align	1
 12241              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Scheduler20sche
 12242              		.syntax unified
 12243              		.thumb
 12244              		.thumb_func
 12245              		.fpu fpv4-sp-d16
 12247              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Scheduler20schedule_co
 12248              	.LFB4791:
 274:Cpp/fixed_size_function.hpp **** 
 275:Cpp/fixed_size_function.hpp **** private:
 276:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 277:Cpp/fixed_size_function.hpp ****   static Ret call_impl(void* functor, Args&&... args)
 12249              		.loc 12 277 14
 12250              		.cfi_startproc
 12251              		@ args = 0, pretend = 0, frame = 8
 12252              		@ frame_needed = 1, uses_anonymous_args = 0
 12253 0000 80B5     		push	{r7, lr}
 12254              	.LCFI929:
 12255              		.cfi_def_cfa_offset 8
 12256              		.cfi_offset 7, -8
 12257              		.cfi_offset 14, -4
 12258 0002 82B0     		sub	sp, sp, #8
 12259              	.LCFI930:
 12260              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccU23Djm.s 			page 388


 12261 0004 00AF     		add	r7, sp, #0
 12262              	.LCFI931:
 12263              		.cfi_def_cfa_register 7
 12264 0006 7860     		str	r0, [r7, #4]
 278:Cpp/fixed_size_function.hpp ****   {
 279:Cpp/fixed_size_function.hpp ****     return (*static_cast<Functor*>(functor))(std::forward<Args>(args)...);
 12265              		.loc 12 279 45
 12266 0008 7868     		ldr	r0, [r7, #4]
 12267 000a FFF7FEFF 		bl	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2
 12268              		.loc 12 279 73
 12269 000e 00BF     		nop
 280:Cpp/fixed_size_function.hpp ****   }
 12270              		.loc 12 280 3
 12271 0010 0837     		adds	r7, r7, #8
 12272              	.LCFI932:
 12273              		.cfi_def_cfa_offset 8
 12274 0012 BD46     		mov	sp, r7
 12275              	.LCFI933:
 12276              		.cfi_def_cfa_register 13
 12277              		@ sp needed
 12278 0014 80BD     		pop	{r7, pc}
 12279              		.cfi_endproc
 12280              	.LFE4791:
 12282              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Sc
 12283              		.align	1
 12284              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Scheduler20
 12285              		.syntax unified
 12286              		.thumb
 12287              		.thumb_func
 12288              		.fpu fpv4-sp-d16
 12290              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Scheduler20schedul
 12291              	.LFB4792:
 281:Cpp/fixed_size_function.hpp **** 
 282:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 283:Cpp/fixed_size_function.hpp ****   static void destroy_impl(void* functor)
 12292              		.loc 12 283 15
 12293              		.cfi_startproc
 12294              		@ args = 0, pretend = 0, frame = 8
 12295              		@ frame_needed = 1, uses_anonymous_args = 0
 12296 0000 80B5     		push	{r7, lr}
 12297              	.LCFI934:
 12298              		.cfi_def_cfa_offset 8
 12299              		.cfi_offset 7, -8
 12300              		.cfi_offset 14, -4
 12301 0002 82B0     		sub	sp, sp, #8
 12302              	.LCFI935:
 12303              		.cfi_def_cfa_offset 16
 12304 0004 00AF     		add	r7, sp, #0
 12305              	.LCFI936:
 12306              		.cfi_def_cfa_register 7
 12307 0006 7860     		str	r0, [r7, #4]
 284:Cpp/fixed_size_function.hpp ****   {
 285:Cpp/fixed_size_function.hpp ****     static_cast<Functor*>(functor)->~Functor();
 12308              		.loc 12 285 5
 12309 0008 7868     		ldr	r0, [r7, #4]
 12310 000a FFF7FEFF 		bl	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2
 286:Cpp/fixed_size_function.hpp ****   }
ARM GAS  /tmp/ccU23Djm.s 			page 389


 12311              		.loc 12 286 3
 12312 000e 00BF     		nop
 12313 0010 0837     		adds	r7, r7, #8
 12314              	.LCFI937:
 12315              		.cfi_def_cfa_offset 8
 12316 0012 BD46     		mov	sp, r7
 12317              	.LCFI938:
 12318              		.cfi_def_cfa_register 13
 12319              		@ sp needed
 12320 0014 80BD     		pop	{r7, pc}
 12321              		.cfi_endproc
 12322              	.LFE4792:
 12324              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Schedu
 12325              		.align	1
 12326              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Scheduler20sche
 12327              		.syntax unified
 12328              		.thumb
 12329              		.thumb_func
 12330              		.fpu fpv4-sp-d16
 12332              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Scheduler20schedule_co
 12333              	.LFB4793:
 287:Cpp/fixed_size_function.hpp **** 
 288:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 289:Cpp/fixed_size_function.hpp ****   static void copy_impl(void const* functor, void* dest)
 290:Cpp/fixed_size_function.hpp ****   {
 291:Cpp/fixed_size_function.hpp ****     new (dest) Functor(*static_cast<Functor const*>(functor));
 292:Cpp/fixed_size_function.hpp ****   }
 293:Cpp/fixed_size_function.hpp **** 
 294:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 295:Cpp/fixed_size_function.hpp ****   static void move_impl(void* functor, void* dest)
 296:Cpp/fixed_size_function.hpp ****   {
 297:Cpp/fixed_size_function.hpp ****     new (dest) Functor(std::move(*static_cast<Functor*>(functor)));
 298:Cpp/fixed_size_function.hpp ****   }
 299:Cpp/fixed_size_function.hpp **** 
 300:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 301:Cpp/fixed_size_function.hpp ****   void init_copy(std::true_type /*copyable*/)
 302:Cpp/fixed_size_function.hpp ****   {
 303:Cpp/fixed_size_function.hpp ****     vtable_.copy = &copy_impl<Functor>;
 304:Cpp/fixed_size_function.hpp ****   }
 305:Cpp/fixed_size_function.hpp **** 
 306:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 307:Cpp/fixed_size_function.hpp ****   void init_copy(std::false_type /*copyable*/)
 12334              		.loc 12 307 8
 12335              		.cfi_startproc
 12336              		@ args = 0, pretend = 0, frame = 8
 12337              		@ frame_needed = 1, uses_anonymous_args = 0
 12338              		@ link register save eliminated.
 12339 0000 80B4     		push	{r7}
 12340              	.LCFI939:
 12341              		.cfi_def_cfa_offset 4
 12342              		.cfi_offset 7, -4
 12343 0002 83B0     		sub	sp, sp, #12
 12344              	.LCFI940:
 12345              		.cfi_def_cfa_offset 16
 12346 0004 00AF     		add	r7, sp, #0
 12347              	.LCFI941:
 12348              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccU23Djm.s 			page 390


 12349 0006 7860     		str	r0, [r7, #4]
 12350 0008 3970     		strb	r1, [r7]
 308:Cpp/fixed_size_function.hpp ****   {}
 12351              		.loc 12 308 4
 12352 000a 00BF     		nop
 12353 000c 0C37     		adds	r7, r7, #12
 12354              	.LCFI942:
 12355              		.cfi_def_cfa_offset 4
 12356 000e BD46     		mov	sp, r7
 12357              	.LCFI943:
 12358              		.cfi_def_cfa_register 13
 12359              		@ sp needed
 12360 0010 5DF8047B 		ldr	r7, [sp], #4
 12361              	.LCFI944:
 12362              		.cfi_restore 7
 12363              		.cfi_def_cfa_offset 0
 12364 0014 7047     		bx	lr
 12365              		.cfi_endproc
 12366              	.LFE4793:
 12368              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Schedu
 12369              		.align	1
 12370              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20sche
 12371              		.syntax unified
 12372              		.thumb
 12373              		.thumb_func
 12374              		.fpu fpv4-sp-d16
 12376              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20schedule_co
 12377              	.LFB4794:
 309:Cpp/fixed_size_function.hpp **** 
 310:Cpp/fixed_size_function.hpp ****   template<typename Functor>
 311:Cpp/fixed_size_function.hpp ****   void init_move(std::true_type /*movable*/)
 12378              		.loc 12 311 8
 12379              		.cfi_startproc
 12380              		@ args = 0, pretend = 0, frame = 8
 12381              		@ frame_needed = 1, uses_anonymous_args = 0
 12382              		@ link register save eliminated.
 12383 0000 80B4     		push	{r7}
 12384              	.LCFI945:
 12385              		.cfi_def_cfa_offset 4
 12386              		.cfi_offset 7, -4
 12387 0002 83B0     		sub	sp, sp, #12
 12388              	.LCFI946:
 12389              		.cfi_def_cfa_offset 16
 12390 0004 00AF     		add	r7, sp, #0
 12391              	.LCFI947:
 12392              		.cfi_def_cfa_register 7
 12393 0006 7860     		str	r0, [r7, #4]
 12394 0008 3970     		strb	r1, [r7]
 312:Cpp/fixed_size_function.hpp ****   {
 313:Cpp/fixed_size_function.hpp ****     vtable_.move = &move_impl<Functor>;
 12395              		.loc 12 313 5
 12396 000a 7B68     		ldr	r3, [r7, #4]
 12397 000c 034A     		ldr	r2, .L486
 12398 000e 9A60     		str	r2, [r3, #8]
 314:Cpp/fixed_size_function.hpp ****   }
 12399              		.loc 12 314 3
 12400 0010 00BF     		nop
ARM GAS  /tmp/ccU23Djm.s 			page 391


 12401 0012 0C37     		adds	r7, r7, #12
 12402              	.LCFI948:
 12403              		.cfi_def_cfa_offset 4
 12404 0014 BD46     		mov	sp, r7
 12405              	.LCFI949:
 12406              		.cfi_def_cfa_register 13
 12407              		@ sp needed
 12408 0016 5DF8047B 		ldr	r7, [sp], #4
 12409              	.LCFI950:
 12410              		.cfi_restore 7
 12411              		.cfi_def_cfa_offset 0
 12412 001a 7047     		bx	lr
 12413              	.L487:
 12414              		.align	2
 12415              	.L486:
 12416 001c 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Scheduler20sche
 12417              		.cfi_endproc
 12418              	.LFE4794:
 12420              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_,"axG",%progbits,_ZN19
 12421              		.align	1
 12422              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_
 12423              		.syntax unified
 12424              		.thumb
 12425              		.thumb_func
 12426              		.fpu fpv4-sp-d16
 12428              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_:
 12429              	.LFB4795:
 141:Cpp/fixed_size_function.hpp ****   {
 12430              		.loc 12 141 24
 12431              		.cfi_startproc
 12432              		@ args = 0, pretend = 0, frame = 8
 12433              		@ frame_needed = 1, uses_anonymous_args = 0
 12434 0000 80B5     		push	{r7, lr}
 12435              	.LCFI951:
 12436              		.cfi_def_cfa_offset 8
 12437              		.cfi_offset 7, -8
 12438              		.cfi_offset 14, -4
 12439 0002 82B0     		sub	sp, sp, #8
 12440              	.LCFI952:
 12441              		.cfi_def_cfa_offset 16
 12442 0004 00AF     		add	r7, sp, #0
 12443              	.LCFI953:
 12444              		.cfi_def_cfa_register 7
 12445 0006 7860     		str	r0, [r7, #4]
 12446 0008 3960     		str	r1, [r7]
 143:Cpp/fixed_size_function.hpp ****     return *this;
 12447              		.loc 12 143 21
 12448 000a 3868     		ldr	r0, [r7]
 12449 000c FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 12450 0010 0346     		mov	r3, r0
 143:Cpp/fixed_size_function.hpp ****     return *this;
 12451              		.loc 12 143 5
 12452 0012 1946     		mov	r1, r3
 12453 0014 7868     		ldr	r0, [r7, #4]
 12454 0016 FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_
 144:Cpp/fixed_size_function.hpp ****   }
 12455              		.loc 12 144 13
ARM GAS  /tmp/ccU23Djm.s 			page 392


 12456 001a 7B68     		ldr	r3, [r7, #4]
 145:Cpp/fixed_size_function.hpp **** 
 12457              		.loc 12 145 3
 12458 001c 1846     		mov	r0, r3
 12459 001e 0837     		adds	r7, r7, #8
 12460              	.LCFI954:
 12461              		.cfi_def_cfa_offset 8
 12462 0020 BD46     		mov	sp, r7
 12463              	.LCFI955:
 12464              		.cfi_def_cfa_register 13
 12465              		@ sp needed
 12466 0022 80BD     		pop	{r7, pc}
 12467              		.cfi_endproc
 12468              	.LFE4795:
 12470              		.section	.text._ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_it
 12471              		.align	1
 12472              		.weak	_ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_iterISt7gre
 12473              		.syntax unified
 12474              		.thumb
 12475              		.thumb_func
 12476              		.fpu fpv4-sp-d16
 12478              	_ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3
 12479              	.LFB4796:
 214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 12480              		.loc 14 214 5
 12481              		.cfi_startproc
 12482              		@ args = 4, pretend = 0, frame = 112
 12483              		@ frame_needed = 1, uses_anonymous_args = 0
 12484 0000 80B5     		push	{r7, lr}
 12485              	.LCFI956:
 12486              		.cfi_def_cfa_offset 8
 12487              		.cfi_offset 7, -8
 12488              		.cfi_offset 14, -4
 12489 0002 9EB0     		sub	sp, sp, #120
 12490              	.LCFI957:
 12491              		.cfi_def_cfa_offset 128
 12492 0004 02AF     		add	r7, sp, #8
 12493              	.LCFI958:
 12494              		.cfi_def_cfa 7, 120
 12495 0006 F860     		str	r0, [r7, #12]
 12496 0008 B960     		str	r1, [r7, #8]
 12497 000a 7A60     		str	r2, [r7, #4]
 12498 000c 3B60     		str	r3, [r7]
 217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       _Distance __secondChild = __holeIndex;
 12499              		.loc 14 217 23
 12500 000e BB68     		ldr	r3, [r7, #8]
 12501 0010 BB66     		str	r3, [r7, #104]
 218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       while (__secondChild < (__len - 1) / 2)
 12502              		.loc 14 218 17
 12503 0012 BB68     		ldr	r3, [r7, #8]
 12504 0014 FB66     		str	r3, [r7, #108]
 12505              	.L493:
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12506              		.loc 14 219 37
 12507 0016 7B68     		ldr	r3, [r7, #4]
 12508 0018 013B     		subs	r3, r3, #1
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
ARM GAS  /tmp/ccU23Djm.s 			page 393


 12509              		.loc 14 219 42
 12510 001a DA0F     		lsrs	r2, r3, #31
 12511 001c 1344     		add	r3, r3, r2
 12512 001e 5B10     		asrs	r3, r3, #1
 12513 0020 1A46     		mov	r2, r3
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12514              		.loc 14 219 28
 12515 0022 FB6E     		ldr	r3, [r7, #108]
 12516 0024 9342     		cmp	r3, r2
 12517 0026 38DA     		bge	.L491
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 12518              		.loc 14 221 39
 12519 0028 FB6E     		ldr	r3, [r7, #108]
 12520 002a 0133     		adds	r3, r3, #1
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 12521              		.loc 14 221 4
 12522 002c 5B00     		lsls	r3, r3, #1
 12523 002e FB66     		str	r3, [r7, #108]
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 12524              		.loc 14 222 25
 12525 0030 FA6E     		ldr	r2, [r7, #108]
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 12526              		.loc 14 222 23
 12527 0032 1346     		mov	r3, r2
 12528 0034 9B00     		lsls	r3, r3, #2
 12529 0036 1344     		add	r3, r3, r2
 12530 0038 1B01     		lsls	r3, r3, #4
 12531 003a 1A46     		mov	r2, r3
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 12532              		.loc 14 222 14
 12533 003c FB68     		ldr	r3, [r7, #12]
 12534 003e 9918     		adds	r1, r3, r2
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    __secondChild--;
 12535              		.loc 14 223 19
 12536 0040 FA6E     		ldr	r2, [r7, #108]
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	    __secondChild--;
 12537              		.loc 14 223 16
 12538 0042 1346     		mov	r3, r2
 12539 0044 9B00     		lsls	r3, r3, #2
 12540 0046 1344     		add	r3, r3, r2
 12541 0048 1B01     		lsls	r3, r3, #4
 12542 004a 503B     		subs	r3, r3, #80
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 12543              		.loc 14 222 14
 12544 004c FA68     		ldr	r2, [r7, #12]
 12545 004e 1344     		add	r3, r3, r2
 12546 0050 1A46     		mov	r2, r3
 12547 0052 07F17800 		add	r0, r7, #120
 12548 0056 FFF7FEFF 		bl	_ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_SA_EEbT_T0_
 12549 005a 0346     		mov	r3, r0
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 12550              		.loc 14 222 4
 12551 005c 002B     		cmp	r3, #0
 12552 005e 02D0     		beq	.L492
 224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 12553              		.loc 14 224 6
 12554 0060 FB6E     		ldr	r3, [r7, #108]
ARM GAS  /tmp/ccU23Djm.s 			page 394


 12555 0062 013B     		subs	r3, r3, #1
 12556 0064 FB66     		str	r3, [r7, #108]
 12557              	.L492:
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __secondChild;
 12558              		.loc 14 225 31
 12559 0066 FA6E     		ldr	r2, [r7, #108]
 12560 0068 1346     		mov	r3, r2
 12561 006a 9B00     		lsls	r3, r3, #2
 12562 006c 1344     		add	r3, r3, r2
 12563 006e 1B01     		lsls	r3, r3, #4
 12564 0070 1A46     		mov	r2, r3
 12565 0072 FB68     		ldr	r3, [r7, #12]
 12566 0074 1344     		add	r3, r3, r2
 12567 0076 1846     		mov	r0, r3
 12568 0078 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 12569 007c 0146     		mov	r1, r0
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __secondChild;
 12570              		.loc 14 225 16
 12571 007e BA68     		ldr	r2, [r7, #8]
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __secondChild;
 12572              		.loc 14 225 14
 12573 0080 1346     		mov	r3, r2
 12574 0082 9B00     		lsls	r3, r3, #2
 12575 0084 1344     		add	r3, r3, r2
 12576 0086 1B01     		lsls	r3, r3, #4
 12577 0088 1A46     		mov	r2, r3
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  __holeIndex = __secondChild;
 12578              		.loc 14 225 29
 12579 008a FB68     		ldr	r3, [r7, #12]
 12580 008c 1344     		add	r3, r3, r2
 12581 008e 1846     		mov	r0, r3
 12582 0090 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskaSEOS2_
 226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 12583              		.loc 14 226 4
 12584 0094 FB6E     		ldr	r3, [r7, #108]
 12585 0096 BB60     		str	r3, [r7, #8]
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12586              		.loc 14 219 7
 12587 0098 BDE7     		b	.L493
 12588              	.L491:
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12589              		.loc 14 228 18
 12590 009a 7B68     		ldr	r3, [r7, #4]
 12591 009c 03F00103 		and	r3, r3, #1
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12592              		.loc 14 228 7
 12593 00a0 002B     		cmp	r3, #0
 12594 00a2 26D1     		bne	.L494
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12595              		.loc 14 228 55 discriminator 1
 12596 00a4 7B68     		ldr	r3, [r7, #4]
 12597 00a6 023B     		subs	r3, r3, #2
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12598              		.loc 14 228 60 discriminator 1
 12599 00a8 DA0F     		lsrs	r2, r3, #31
 12600 00aa 1344     		add	r3, r3, r2
 12601 00ac 5B10     		asrs	r3, r3, #1
ARM GAS  /tmp/ccU23Djm.s 			page 395


 12602 00ae 1A46     		mov	r2, r3
 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	{
 12603              		.loc 14 228 28 discriminator 1
 12604 00b0 FB6E     		ldr	r3, [r7, #108]
 12605 00b2 9342     		cmp	r3, r2
 12606 00b4 1DD1     		bne	.L494
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 12607              		.loc 14 230 39
 12608 00b6 FB6E     		ldr	r3, [r7, #108]
 12609 00b8 0133     		adds	r3, r3, #1
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 12610              		.loc 14 230 4
 12611 00ba 5B00     		lsls	r3, r3, #1
 12612 00bc FB66     		str	r3, [r7, #108]
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 12613              		.loc 14 231 31
 12614 00be FA6E     		ldr	r2, [r7, #108]
 12615 00c0 1346     		mov	r3, r2
 12616 00c2 9B00     		lsls	r3, r3, #2
 12617 00c4 1344     		add	r3, r3, r2
 12618 00c6 1B01     		lsls	r3, r3, #4
 12619 00c8 503B     		subs	r3, r3, #80
 12620 00ca FA68     		ldr	r2, [r7, #12]
 12621 00cc 1344     		add	r3, r3, r2
 12622 00ce 1846     		mov	r0, r3
 12623 00d0 FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 12624 00d4 0146     		mov	r1, r0
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 12625              		.loc 14 231 16
 12626 00d6 BA68     		ldr	r2, [r7, #8]
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 12627              		.loc 14 231 14
 12628 00d8 1346     		mov	r3, r2
 12629 00da 9B00     		lsls	r3, r3, #2
 12630 00dc 1344     		add	r3, r3, r2
 12631 00de 1B01     		lsls	r3, r3, #4
 12632 00e0 1A46     		mov	r2, r3
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 12633              		.loc 14 231 29
 12634 00e2 FB68     		ldr	r3, [r7, #12]
 12635 00e4 1344     		add	r3, r3, r2
 12636 00e6 1846     		mov	r0, r3
 12637 00e8 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskaSEOS2_
 233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 	}
 12638              		.loc 14 233 4
 12639 00ec FB6E     		ldr	r3, [r7, #108]
 12640 00ee 013B     		subs	r3, r3, #1
 12641 00f0 BB60     		str	r3, [r7, #8]
 12642              	.L494:
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, __holeIndex, __topIndex,
 12643              		.loc 14 236 8
 12644 00f2 07F17800 		add	r0, r7, #120
 12645 00f6 FFF7FEFF 		bl	_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEEEONSt16re
 12646 00fa 0246     		mov	r2, r0
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****       std::__push_heap(__first, __holeIndex, __topIndex,
 12647              		.loc 14 236 2
 12648 00fc 07F11403 		add	r3, r7, #20
ARM GAS  /tmp/ccU23Djm.s 			page 396


 12649 0100 1146     		mov	r1, r2
 12650 0102 1846     		mov	r0, r3
 12651 0104 FFF7FEFF 		bl	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1EONS0_15_Iter_comp
 238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h ****     }
 12652              		.loc 14 238 10
 12653 0108 3868     		ldr	r0, [r7]
 12654 010a FFF7FEFF 		bl	_ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
 12655 010e 0246     		mov	r2, r0
 237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 		       _GLIBCXX_MOVE(__value), __cmp);
 12656              		.loc 14 237 23
 12657 0110 07F11803 		add	r3, r7, #24
 12658 0114 1146     		mov	r1, r2
 12659 0116 1846     		mov	r0, r3
 12660 0118 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskC1EOS2_
 12661 011c 07F11802 		add	r2, r7, #24
 12662 0120 07F11403 		add	r3, r7, #20
 12663 0124 0093     		str	r3, [sp]
 12664 0126 1346     		mov	r3, r2
 12665 0128 BA6E     		ldr	r2, [r7, #104]
 12666 012a B968     		ldr	r1, [r7, #8]
 12667 012c F868     		ldr	r0, [r7, #12]
 12668 012e FFF7FEFF 		bl	_ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIS
 12669 0132 07F11803 		add	r3, r7, #24
 12670 0136 1846     		mov	r0, r3
 12671 0138 FFF7FEFF 		bl	_ZN4otto3mcu9Scheduler4TaskD1Ev
 239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_heap.h **** 
 12672              		.loc 14 239 5
 12673 013c 00BF     		nop
 12674 013e 7037     		adds	r7, r7, #112
 12675              	.LCFI959:
 12676              		.cfi_def_cfa_offset 8
 12677 0140 BD46     		mov	sp, r7
 12678              	.LCFI960:
 12679              		.cfi_def_cfa_register 13
 12680              		@ sp needed
 12681 0142 80BD     		pop	{r7, pc}
 12682              		.cfi_endproc
 12683              	.LFE4796:
 12685              		.section	.text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S
 12686              		.align	1
 12687              		.weak	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S6_EEbT_RT
 12688              		.syntax unified
 12689              		.thumb
 12690              		.thumb_func
 12691              		.fpu fpv4-sp-d16
 12693              	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S6_EEbT_RT0_:
 12694              	.LFB4797:
 161:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 162:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       explicit
 163:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 164:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	: _M_comp(__comp._M_comp)
 165:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { }
 166:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 167:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #if __cplusplus >= 201103L
 168:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       explicit
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	: _M_comp(std::move(__comp._M_comp))
ARM GAS  /tmp/ccU23Djm.s 			page 397


 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { }
 172:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #endif
 173:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 
 174:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       template<typename _Iterator, typename _Value>
 175:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	bool
 176:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	operator()(_Iterator __it, _Value& __val)
 12695              		.loc 19 176 2
 12696              		.cfi_startproc
 12697              		@ args = 0, pretend = 0, frame = 16
 12698              		@ frame_needed = 1, uses_anonymous_args = 0
 12699 0000 80B5     		push	{r7, lr}
 12700              	.LCFI961:
 12701              		.cfi_def_cfa_offset 8
 12702              		.cfi_offset 7, -8
 12703              		.cfi_offset 14, -4
 12704 0002 84B0     		sub	sp, sp, #16
 12705              	.LCFI962:
 12706              		.cfi_def_cfa_offset 24
 12707 0004 00AF     		add	r7, sp, #0
 12708              	.LCFI963:
 12709              		.cfi_def_cfa_register 7
 12710 0006 F860     		str	r0, [r7, #12]
 12711 0008 B960     		str	r1, [r7, #8]
 12712 000a 7A60     		str	r2, [r7, #4]
 177:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	{ return bool(_M_comp(*__it, __val)); }
 12713              		.loc 19 177 11
 12714 000c FB68     		ldr	r3, [r7, #12]
 12715 000e 7A68     		ldr	r2, [r7, #4]
 12716 0010 B968     		ldr	r1, [r7, #8]
 12717 0012 1846     		mov	r0, r3
 12718 0014 FFF7FEFF 		bl	_ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_
 12719 0018 0346     		mov	r3, r0
 12720              		.loc 19 177 40
 12721 001a 1846     		mov	r0, r3
 12722 001c 1037     		adds	r7, r7, #16
 12723              	.LCFI964:
 12724              		.cfi_def_cfa_offset 8
 12725 001e BD46     		mov	sp, r7
 12726              	.LCFI965:
 12727              		.cfi_def_cfa_register 13
 12728              		@ sp needed
 12729 0020 80BD     		pop	{r7, pc}
 12730              		.cfi_endproc
 12731              	.LFE4797:
 12733              		.section	.text._ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh,"axG",%progbits,_ZNSt14__array_traitsIhL
 12734              		.align	1
 12735              		.weak	_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
 12736              		.syntax unified
 12737              		.thumb
 12738              		.thumb_func
 12739              		.fpu fpv4-sp-d16
 12741              	_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh:
 12742              	.LFB4802:
  59:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp*>(__t); }
 12743              		.loc 8 59 7
 12744              		.cfi_startproc
 12745              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccU23Djm.s 			page 398


 12746              		@ frame_needed = 1, uses_anonymous_args = 0
 12747              		@ link register save eliminated.
 12748 0000 80B4     		push	{r7}
 12749              	.LCFI966:
 12750              		.cfi_def_cfa_offset 4
 12751              		.cfi_offset 7, -4
 12752 0002 83B0     		sub	sp, sp, #12
 12753              	.LCFI967:
 12754              		.cfi_def_cfa_offset 16
 12755 0004 00AF     		add	r7, sp, #0
 12756              	.LCFI968:
 12757              		.cfi_def_cfa_register 7
 12758 0006 7860     		str	r0, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 12759              		.loc 8 60 36
 12760 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 12761              		.loc 8 60 39
 12762 000a 1846     		mov	r0, r3
 12763 000c 0C37     		adds	r7, r7, #12
 12764              	.LCFI969:
 12765              		.cfi_def_cfa_offset 4
 12766 000e BD46     		mov	sp, r7
 12767              	.LCFI970:
 12768              		.cfi_def_cfa_register 13
 12769              		@ sp needed
 12770 0010 5DF8047B 		ldr	r7, [sp], #4
 12771              	.LCFI971:
 12772              		.cfi_restore 7
 12773              		.cfi_def_cfa_offset 0
 12774 0014 7047     		bx	lr
 12775              		.cfi_endproc
 12776              	.LFE4802:
 12778              		.section	.text._ZNKSt5arrayIhLj4EE4dataEv,"axG",%progbits,_ZNKSt5arrayIhLj4EE4dataEv,comdat
 12779              		.align	1
 12780              		.weak	_ZNKSt5arrayIhLj4EE4dataEv
 12781              		.syntax unified
 12782              		.thumb
 12783              		.thumb_func
 12784              		.fpu fpv4-sp-d16
 12786              	_ZNKSt5arrayIhLj4EE4dataEv:
 12787              	.LFB4801:
 238:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 12788              		.loc 8 238 7
 12789              		.cfi_startproc
 12790              		@ args = 0, pretend = 0, frame = 8
 12791              		@ frame_needed = 1, uses_anonymous_args = 0
 12792 0000 80B5     		push	{r7, lr}
 12793              	.LCFI972:
 12794              		.cfi_def_cfa_offset 8
 12795              		.cfi_offset 7, -8
 12796              		.cfi_offset 14, -4
 12797 0002 82B0     		sub	sp, sp, #8
 12798              	.LCFI973:
 12799              		.cfi_def_cfa_offset 16
 12800 0004 00AF     		add	r7, sp, #0
 12801              	.LCFI974:
ARM GAS  /tmp/ccU23Djm.s 			page 399


 12802              		.cfi_def_cfa_register 7
 12803 0006 7860     		str	r0, [r7, #4]
 12804              		.loc 8 239 33
 12805 0008 7B68     		ldr	r3, [r7, #4]
 12806              		.loc 8 239 32
 12807 000a 1846     		mov	r0, r3
 12808 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
 12809 0010 0346     		mov	r3, r0
 12810              		.loc 8 239 44
 12811 0012 1846     		mov	r0, r3
 12812 0014 0837     		adds	r7, r7, #8
 12813              	.LCFI975:
 12814              		.cfi_def_cfa_offset 8
 12815 0016 BD46     		mov	sp, r7
 12816              	.LCFI976:
 12817              		.cfi_def_cfa_register 13
 12818              		@ sp needed
 12819 0018 80BD     		pop	{r7, pc}
 12820              		.cfi_endproc
 12821              	.LFE4801:
 12823              		.section	.text._ZSt12__niter_baseIPKhET_S2_,"axG",%progbits,_ZSt12__niter_baseIPKhET_S2_,comdat
 12824              		.align	1
 12825              		.weak	_ZSt12__niter_baseIPKhET_S2_
 12826              		.syntax unified
 12827              		.thumb
 12828              		.thumb_func
 12829              		.fpu fpv4-sp-d16
 12831              	_ZSt12__niter_baseIPKhET_S2_:
 12832              	.LFB4803:
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 12833              		.loc 16 280 5
 12834              		.cfi_startproc
 12835              		@ args = 0, pretend = 0, frame = 8
 12836              		@ frame_needed = 1, uses_anonymous_args = 0
 12837              		@ link register save eliminated.
 12838 0000 80B4     		push	{r7}
 12839              	.LCFI977:
 12840              		.cfi_def_cfa_offset 4
 12841              		.cfi_offset 7, -4
 12842 0002 83B0     		sub	sp, sp, #12
 12843              	.LCFI978:
 12844              		.cfi_def_cfa_offset 16
 12845 0004 00AF     		add	r7, sp, #0
 12846              	.LCFI979:
 12847              		.cfi_def_cfa_register 7
 12848 0006 7860     		str	r0, [r7, #4]
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12849              		.loc 16 282 14
 12850 0008 7B68     		ldr	r3, [r7, #4]
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12851              		.loc 16 282 20
 12852 000a 1846     		mov	r0, r3
 12853 000c 0C37     		adds	r7, r7, #12
 12854              	.LCFI980:
 12855              		.cfi_def_cfa_offset 4
 12856 000e BD46     		mov	sp, r7
 12857              	.LCFI981:
ARM GAS  /tmp/ccU23Djm.s 			page 400


 12858              		.cfi_def_cfa_register 13
 12859              		@ sp needed
 12860 0010 5DF8047B 		ldr	r7, [sp], #4
 12861              	.LCFI982:
 12862              		.cfi_restore 7
 12863              		.cfi_def_cfa_offset 0
 12864 0014 7047     		bx	lr
 12865              		.cfi_endproc
 12866              	.LFE4803:
 12868              		.section	.text._ZSt12__niter_baseIPhET_S1_,"axG",%progbits,_ZSt12__niter_baseIPhET_S1_,comdat
 12869              		.align	1
 12870              		.weak	_ZSt12__niter_baseIPhET_S1_
 12871              		.syntax unified
 12872              		.thumb
 12873              		.thumb_func
 12874              		.fpu fpv4-sp-d16
 12876              	_ZSt12__niter_baseIPhET_S1_:
 12877              	.LFB4804:
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 12878              		.loc 16 280 5
 12879              		.cfi_startproc
 12880              		@ args = 0, pretend = 0, frame = 8
 12881              		@ frame_needed = 1, uses_anonymous_args = 0
 12882              		@ link register save eliminated.
 12883 0000 80B4     		push	{r7}
 12884              	.LCFI983:
 12885              		.cfi_def_cfa_offset 4
 12886              		.cfi_offset 7, -4
 12887 0002 83B0     		sub	sp, sp, #12
 12888              	.LCFI984:
 12889              		.cfi_def_cfa_offset 16
 12890 0004 00AF     		add	r7, sp, #0
 12891              	.LCFI985:
 12892              		.cfi_def_cfa_register 7
 12893 0006 7860     		str	r0, [r7, #4]
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12894              		.loc 16 282 14
 12895 0008 7B68     		ldr	r3, [r7, #4]
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12896              		.loc 16 282 20
 12897 000a 1846     		mov	r0, r3
 12898 000c 0C37     		adds	r7, r7, #12
 12899              	.LCFI986:
 12900              		.cfi_def_cfa_offset 4
 12901 000e BD46     		mov	sp, r7
 12902              	.LCFI987:
 12903              		.cfi_def_cfa_register 13
 12904              		@ sp needed
 12905 0010 5DF8047B 		ldr	r7, [sp], #4
 12906              	.LCFI988:
 12907              		.cfi_restore 7
 12908              		.cfi_def_cfa_offset 0
 12909 0014 7047     		bx	lr
 12910              		.cfi_endproc
 12911              	.LFE4804:
 12913              		.section	.text._ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_,"axG",%progbits,_ZSt13__copy_move_aILb0E
 12914              		.align	1
ARM GAS  /tmp/ccU23Djm.s 			page 401


 12915              		.weak	_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_
 12916              		.syntax unified
 12917              		.thumb
 12918              		.thumb_func
 12919              		.fpu fpv4-sp-d16
 12921              	_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_:
 12922              	.LFB4805:
 393:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 12923              		.loc 16 393 5
 12924              		.cfi_startproc
 12925              		@ args = 0, pretend = 0, frame = 24
 12926              		@ frame_needed = 1, uses_anonymous_args = 0
 12927 0000 80B5     		push	{r7, lr}
 12928              	.LCFI989:
 12929              		.cfi_def_cfa_offset 8
 12930              		.cfi_offset 7, -8
 12931              		.cfi_offset 14, -4
 12932 0002 86B0     		sub	sp, sp, #24
 12933              	.LCFI990:
 12934              		.cfi_def_cfa_offset 32
 12935 0004 00AF     		add	r7, sp, #0
 12936              	.LCFI991:
 12937              		.cfi_def_cfa_register 7
 12938 0006 F860     		str	r0, [r7, #12]
 12939 0008 B960     		str	r1, [r7, #8]
 12940 000a 7A60     		str	r2, [r7, #4]
 398:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 			     && __is_pointer<_II>::__value
 12941              		.loc 16 398 18
 12942 000c 0123     		movs	r3, #1
 12943 000e FB75     		strb	r3, [r7, #23]
 404:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 12944              		.loc 16 404 30
 12945 0010 7A68     		ldr	r2, [r7, #4]
 12946 0012 B968     		ldr	r1, [r7, #8]
 12947 0014 F868     		ldr	r0, [r7, #12]
 12948 0016 FFF7FEFF 		bl	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_
 12949 001a 0346     		mov	r3, r0
 405:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12950              		.loc 16 405 5
 12951 001c 1846     		mov	r0, r3
 12952 001e 1837     		adds	r7, r7, #24
 12953              	.LCFI992:
 12954              		.cfi_def_cfa_offset 8
 12955 0020 BD46     		mov	sp, r7
 12956              	.LCFI993:
 12957              		.cfi_def_cfa_register 13
 12958              		@ sp needed
 12959 0022 80BD     		pop	{r7, pc}
 12960              		.cfi_endproc
 12961              	.LFE4805:
 12963              		.section	.text._ZSt12__niter_wrapIPhET_RKS1_S1_,"axG",%progbits,_ZSt12__niter_wrapIPhET_RKS1_S1_,c
 12964              		.align	1
 12965              		.weak	_ZSt12__niter_wrapIPhET_RKS1_S1_
 12966              		.syntax unified
 12967              		.thumb
 12968              		.thumb_func
 12969              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU23Djm.s 			page 402


 12971              	_ZSt12__niter_wrapIPhET_RKS1_S1_:
 12972              	.LFB4806:
 295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     { return __res; }
 12973              		.loc 16 295 5
 12974              		.cfi_startproc
 12975              		@ args = 0, pretend = 0, frame = 8
 12976              		@ frame_needed = 1, uses_anonymous_args = 0
 12977              		@ link register save eliminated.
 12978 0000 80B4     		push	{r7}
 12979              	.LCFI994:
 12980              		.cfi_def_cfa_offset 4
 12981              		.cfi_offset 7, -4
 12982 0002 83B0     		sub	sp, sp, #12
 12983              	.LCFI995:
 12984              		.cfi_def_cfa_offset 16
 12985 0004 00AF     		add	r7, sp, #0
 12986              	.LCFI996:
 12987              		.cfi_def_cfa_register 7
 12988 0006 7860     		str	r0, [r7, #4]
 12989 0008 3960     		str	r1, [r7]
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12990              		.loc 16 296 14
 12991 000a 3B68     		ldr	r3, [r7]
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 12992              		.loc 16 296 21
 12993 000c 1846     		mov	r0, r3
 12994 000e 0C37     		adds	r7, r7, #12
 12995              	.LCFI997:
 12996              		.cfi_def_cfa_offset 4
 12997 0010 BD46     		mov	sp, r7
 12998              	.LCFI998:
 12999              		.cfi_def_cfa_register 13
 13000              		@ sp needed
 13001 0012 5DF8047B 		ldr	r7, [sp], #4
 13002              	.LCFI999:
 13003              		.cfi_restore 7
 13004              		.cfi_def_cfa_offset 0
 13005 0016 7047     		bx	lr
 13006              		.cfi_endproc
 13007              	.LFE4806:
 13009              		.section	.text._ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j,"axG",%pro
 13010              		.align	1
 13011              		.weak	_ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j
 13012              		.syntax unified
 13013              		.thumb
 13014              		.thumb_func
 13015              		.fpu fpv4-sp-d16
 13017              	_ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j:
 13018              	.LFB4807:
  55:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp&>(__t[__n]); }
 13019              		.loc 8 55 7
 13020              		.cfi_startproc
 13021              		@ args = 0, pretend = 0, frame = 8
 13022              		@ frame_needed = 1, uses_anonymous_args = 0
 13023              		@ link register save eliminated.
 13024 0000 80B4     		push	{r7}
 13025              	.LCFI1000:
ARM GAS  /tmp/ccU23Djm.s 			page 403


 13026              		.cfi_def_cfa_offset 4
 13027              		.cfi_offset 7, -4
 13028 0002 83B0     		sub	sp, sp, #12
 13029              	.LCFI1001:
 13030              		.cfi_def_cfa_offset 16
 13031 0004 00AF     		add	r7, sp, #0
 13032              	.LCFI1002:
 13033              		.cfi_def_cfa_register 7
 13034 0006 7860     		str	r0, [r7, #4]
 13035 0008 3960     		str	r1, [r7]
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13036              		.loc 8 56 41
 13037 000a 3A68     		ldr	r2, [r7]
 13038 000c 1346     		mov	r3, r2
 13039 000e 5B00     		lsls	r3, r3, #1
 13040 0010 1344     		add	r3, r3, r2
 13041 0012 7A68     		ldr	r2, [r7, #4]
 13042 0014 1344     		add	r3, r3, r2
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13043              		.loc 8 56 44
 13044 0016 1846     		mov	r0, r3
 13045 0018 0C37     		adds	r7, r7, #12
 13046              	.LCFI1003:
 13047              		.cfi_def_cfa_offset 4
 13048 001a BD46     		mov	sp, r7
 13049              	.LCFI1004:
 13050              		.cfi_def_cfa_register 13
 13051              		@ sp needed
 13052 001c 5DF8047B 		ldr	r7, [sp], #4
 13053              	.LCFI1005:
 13054              		.cfi_restore 7
 13055              		.cfi_def_cfa_offset 0
 13056 0020 7047     		bx	lr
 13057              		.cfi_endproc
 13058              	.LFE4807:
 13060              		.section	.text._ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT
 13061              		.align	1
 13062              		.weak	_ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE
 13063              		.syntax unified
 13064              		.thumb
 13065              		.thumb_func
 13066              		.fpu fpv4-sp-d16
 13068              	_ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EOT_RN
 13069              	.LFB4808:
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 13070              		.loc 13 74 5
 13071              		.cfi_startproc
 13072              		@ args = 0, pretend = 0, frame = 8
 13073              		@ frame_needed = 1, uses_anonymous_args = 0
 13074              		@ link register save eliminated.
 13075 0000 80B4     		push	{r7}
 13076              	.LCFI1006:
 13077              		.cfi_def_cfa_offset 4
 13078              		.cfi_offset 7, -4
 13079 0002 83B0     		sub	sp, sp, #12
 13080              	.LCFI1007:
 13081              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccU23Djm.s 			page 404


 13082 0004 00AF     		add	r7, sp, #0
 13083              	.LCFI1008:
 13084              		.cfi_def_cfa_register 7
 13085 0006 7860     		str	r0, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 13086              		.loc 13 75 36
 13087 0008 7B68     		ldr	r3, [r7, #4]
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h **** 
 13088              		.loc 13 75 39
 13089 000a 1846     		mov	r0, r3
 13090 000c 0C37     		adds	r7, r7, #12
 13091              	.LCFI1009:
 13092              		.cfi_def_cfa_offset 4
 13093 000e BD46     		mov	sp, r7
 13094              	.LCFI1010:
 13095              		.cfi_def_cfa_register 13
 13096              		@ sp needed
 13097 0010 5DF8047B 		ldr	r7, [sp], #4
 13098              	.LCFI1011:
 13099              		.cfi_restore 7
 13100              		.cfi_def_cfa_offset 0
 13101 0014 7047     		bx	lr
 13102              		.cfi_endproc
 13103              	.LFE4808:
 13105              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18
 13106              		.align	1
 13107              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_casca
 13108              		.syntax unified
 13109              		.thumb
 13110              		.thumb_func
 13111              		.fpu fpv4-sp-d16
 13113              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_cascade_colo
 13114              	.LFB4809:
 239:Cpp/fixed_size_function.hpp ****   {
 13115              		.loc 12 239 8
 13116              		.cfi_startproc
 13117              		@ args = 0, pretend = 0, frame = 16
 13118              		@ frame_needed = 1, uses_anonymous_args = 0
 13119 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13120              	.LCFI1012:
 13121              		.cfi_def_cfa_offset 20
 13122              		.cfi_offset 4, -20
 13123              		.cfi_offset 5, -16
 13124              		.cfi_offset 6, -12
 13125              		.cfi_offset 7, -8
 13126              		.cfi_offset 14, -4
 13127 0002 85B0     		sub	sp, sp, #20
 13128              	.LCFI1013:
 13129              		.cfi_def_cfa_offset 40
 13130 0004 00AF     		add	r7, sp, #0
 13131              	.LCFI1014:
 13132              		.cfi_def_cfa_register 7
 13133 0006 7860     		str	r0, [r7, #4]
 13134 0008 3960     		str	r1, [r7]
 244:Cpp/fixed_size_function.hpp **** 
 13135              		.loc 12 244 55
 13136 000a 3868     		ldr	r0, [r7]
ARM GAS  /tmp/ccU23Djm.s 			page 405


 13137 000c FFF7FEFF 		bl	_ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EO
 13138 0010 0446     		mov	r4, r0
 244:Cpp/fixed_size_function.hpp **** 
 13139              		.loc 12 244 5
 13140 0012 7B68     		ldr	r3, [r7, #4]
 13141 0014 1033     		adds	r3, r3, #16
 13142 0016 1946     		mov	r1, r3
 13143 0018 0C20     		movs	r0, #12
 13144 001a FFF7FEFF 		bl	_ZnwjPv
 13145 001e 0346     		mov	r3, r0
 13146 0020 2246     		mov	r2, r4
 13147 0022 07CA     		ldm	r2, {r0, r1, r2}
 13148 0024 83E80700 		stm	r3, {r0, r1, r2}
 246:Cpp/fixed_size_function.hpp ****     vtable_.destroy = &destroy_impl<functor_type>;
 13149              		.loc 12 246 5
 13150 0028 7B68     		ldr	r3, [r7, #4]
 13151 002a 084A     		ldr	r2, .L514
 13152 002c 1A60     		str	r2, [r3]
 247:Cpp/fixed_size_function.hpp ****     init_copy<functor_type>(is_copyable());
 13153              		.loc 12 247 5
 13154 002e 7B68     		ldr	r3, [r7, #4]
 13155 0030 074A     		ldr	r2, .L514+4
 13156 0032 5A60     		str	r2, [r3, #4]
 248:Cpp/fixed_size_function.hpp ****     init_move<functor_type>(is_movable());
 13157              		.loc 12 248 5
 13158 0034 3146     		mov	r1, r6
 13159 0036 7868     		ldr	r0, [r7, #4]
 13160 0038 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812b18led_casca
 249:Cpp/fixed_size_function.hpp ****   }
 13161              		.loc 12 249 5
 13162 003c 2946     		mov	r1, r5
 13163 003e 7868     		ldr	r0, [r7, #4]
 13164 0040 FFF7FEFF 		bl	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_casca
 250:Cpp/fixed_size_function.hpp **** 
 13165              		.loc 12 250 3
 13166 0044 00BF     		nop
 13167 0046 1437     		adds	r7, r7, #20
 13168              	.LCFI1015:
 13169              		.cfi_def_cfa_offset 20
 13170 0048 BD46     		mov	sp, r7
 13171              	.LCFI1016:
 13172              		.cfi_def_cfa_register 13
 13173              		@ sp needed
 13174 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 13175              	.L515:
 13176              		.align	2
 13177              	.L514:
 13178 004c 00000000 		.word	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812b18led_ca
 13179 0050 00000000 		.word	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws2812b18le
 13180              		.cfi_endproc
 13181              	.LFE4809:
 13183              		.section	.text._ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j,"axG",%progbits,_ZN
 13184              		.align	1
 13185              		.weak	_ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j
 13186              		.syntax unified
 13187              		.thumb
 13188              		.thumb_func
ARM GAS  /tmp/ccU23Djm.s 			page 406


 13189              		.fpu fpv4-sp-d16
 13191              	_ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j:
 13192              	.LFB4810:
  55:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp&>(__t[__n]); }
 13193              		.loc 8 55 7
 13194              		.cfi_startproc
 13195              		@ args = 0, pretend = 0, frame = 8
 13196              		@ frame_needed = 1, uses_anonymous_args = 0
 13197              		@ link register save eliminated.
 13198 0000 80B4     		push	{r7}
 13199              	.LCFI1017:
 13200              		.cfi_def_cfa_offset 4
 13201              		.cfi_offset 7, -4
 13202 0002 83B0     		sub	sp, sp, #12
 13203              	.LCFI1018:
 13204              		.cfi_def_cfa_offset 16
 13205 0004 00AF     		add	r7, sp, #0
 13206              	.LCFI1019:
 13207              		.cfi_def_cfa_register 7
 13208 0006 7860     		str	r0, [r7, #4]
 13209 0008 3960     		str	r1, [r7]
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13210              		.loc 8 56 41
 13211 000a 3A68     		ldr	r2, [r7]
 13212 000c 1346     		mov	r3, r2
 13213 000e 5B00     		lsls	r3, r3, #1
 13214 0010 1344     		add	r3, r3, r2
 13215 0012 9B00     		lsls	r3, r3, #2
 13216 0014 7A68     		ldr	r2, [r7, #4]
 13217 0016 1344     		add	r3, r3, r2
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13218              		.loc 8 56 44
 13219 0018 1846     		mov	r0, r3
 13220 001a 0C37     		adds	r7, r7, #12
 13221              	.LCFI1020:
 13222              		.cfi_def_cfa_offset 4
 13223 001c BD46     		mov	sp, r7
 13224              	.LCFI1021:
 13225              		.cfi_def_cfa_register 13
 13226              		@ sp needed
 13227 001e 5DF8047B 		ldr	r7, [sp], #4
 13228              	.LCFI1022:
 13229              		.cfi_restore 7
 13230              		.cfi_def_cfa_offset 0
 13231 0022 7047     		bx	lr
 13232              		.cfi_endproc
 13233              	.LFE4810:
 13235              		.section	.text._ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8
 13236              		.align	1
 13237              		.weak	_ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EE6_
 13238              		.syntax unified
 13239              		.thumb
 13240              		.thumb_func
 13241              		.fpu fpv4-sp-d16
 13243              	_ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EE6_S_refER
 13244              	.LFB4811:
  55:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp&>(__t[__n]); }
ARM GAS  /tmp/ccU23Djm.s 			page 407


 13245              		.loc 8 55 7
 13246              		.cfi_startproc
 13247              		@ args = 0, pretend = 0, frame = 8
 13248              		@ frame_needed = 1, uses_anonymous_args = 0
 13249              		@ link register save eliminated.
 13250 0000 80B4     		push	{r7}
 13251              	.LCFI1023:
 13252              		.cfi_def_cfa_offset 4
 13253              		.cfi_offset 7, -4
 13254 0002 83B0     		sub	sp, sp, #12
 13255              	.LCFI1024:
 13256              		.cfi_def_cfa_offset 16
 13257 0004 00AF     		add	r7, sp, #0
 13258              	.LCFI1025:
 13259              		.cfi_def_cfa_register 7
 13260 0006 7860     		str	r0, [r7, #4]
 13261 0008 3960     		str	r1, [r7]
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13262              		.loc 8 56 41
 13263 000a 3B68     		ldr	r3, [r7]
 13264 000c 9B01     		lsls	r3, r3, #6
 13265 000e 7A68     		ldr	r2, [r7, #4]
 13266 0010 1344     		add	r3, r3, r2
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13267              		.loc 8 56 44
 13268 0012 1846     		mov	r0, r3
 13269 0014 0C37     		adds	r7, r7, #12
 13270              	.LCFI1026:
 13271              		.cfi_def_cfa_offset 4
 13272 0016 BD46     		mov	sp, r7
 13273              	.LCFI1027:
 13274              		.cfi_def_cfa_register 13
 13275              		@ sp needed
 13276 0018 5DF8047B 		ldr	r7, [sp], #4
 13277              	.LCFI1028:
 13278              		.cfi_restore 7
 13279              		.cfi_def_cfa_offset 0
 13280 001c 7047     		bx	lr
 13281              		.cfi_endproc
 13282              	.LFE4811:
 13284              		.section	.text._ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ref
 13285              		.align	1
 13286              		.weak	_ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_refERA8_KS6_
 13287              		.syntax unified
 13288              		.thumb
 13289              		.thumb_func
 13290              		.fpu fpv4-sp-d16
 13292              	_ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_refERA8_KS6_j:
 13293              	.LFB4812:
  55:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp&>(__t[__n]); }
 13294              		.loc 8 55 7
 13295              		.cfi_startproc
 13296              		@ args = 0, pretend = 0, frame = 8
 13297              		@ frame_needed = 1, uses_anonymous_args = 0
 13298              		@ link register save eliminated.
 13299 0000 80B4     		push	{r7}
 13300              	.LCFI1029:
ARM GAS  /tmp/ccU23Djm.s 			page 408


 13301              		.cfi_def_cfa_offset 4
 13302              		.cfi_offset 7, -4
 13303 0002 83B0     		sub	sp, sp, #12
 13304              	.LCFI1030:
 13305              		.cfi_def_cfa_offset 16
 13306 0004 00AF     		add	r7, sp, #0
 13307              	.LCFI1031:
 13308              		.cfi_def_cfa_register 7
 13309 0006 7860     		str	r0, [r7, #4]
 13310 0008 3960     		str	r1, [r7]
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13311              		.loc 8 56 41
 13312 000a 3B68     		ldr	r3, [r7]
 13313 000c DB00     		lsls	r3, r3, #3
 13314 000e 7A68     		ldr	r2, [r7, #4]
 13315 0010 1344     		add	r3, r3, r2
  56:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13316              		.loc 8 56 44
 13317 0012 1846     		mov	r0, r3
 13318 0014 0C37     		adds	r7, r7, #12
 13319              	.LCFI1032:
 13320              		.cfi_def_cfa_offset 4
 13321 0016 BD46     		mov	sp, r7
 13322              	.LCFI1033:
 13323              		.cfi_def_cfa_register 13
 13324              		@ sp needed
 13325 0018 5DF8047B 		ldr	r7, [sp], #4
 13326              	.LCFI1034:
 13327              		.cfi_restore 7
 13328              		.cfi_def_cfa_offset 0
 13329 001c 7047     		bx	lr
 13330              		.cfi_endproc
 13331              	.LFE4812:
 13333              		.section	.text._ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh,"axG",%progbits,_ZNSt14__array_trait
 13334              		.align	1
 13335              		.weak	_ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh
 13336              		.syntax unified
 13337              		.thumb
 13338              		.thumb_func
 13339              		.fpu fpv4-sp-d16
 13341              	_ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh:
 13342              	.LFB4813:
  59:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp*>(__t); }
 13343              		.loc 8 59 7
 13344              		.cfi_startproc
 13345              		@ args = 0, pretend = 0, frame = 8
 13346              		@ frame_needed = 1, uses_anonymous_args = 0
 13347              		@ link register save eliminated.
 13348 0000 80B4     		push	{r7}
 13349              	.LCFI1035:
 13350              		.cfi_def_cfa_offset 4
 13351              		.cfi_offset 7, -4
 13352 0002 83B0     		sub	sp, sp, #12
 13353              	.LCFI1036:
 13354              		.cfi_def_cfa_offset 16
 13355 0004 00AF     		add	r7, sp, #0
 13356              	.LCFI1037:
ARM GAS  /tmp/ccU23Djm.s 			page 409


 13357              		.cfi_def_cfa_register 7
 13358 0006 7860     		str	r0, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 13359              		.loc 8 60 36
 13360 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 13361              		.loc 8 60 39
 13362 000a 1846     		mov	r0, r3
 13363 000c 0C37     		adds	r7, r7, #12
 13364              	.LCFI1038:
 13365              		.cfi_def_cfa_offset 4
 13366 000e BD46     		mov	sp, r7
 13367              	.LCFI1039:
 13368              		.cfi_def_cfa_register 13
 13369              		@ sp needed
 13370 0010 5DF8047B 		ldr	r7, [sp], #4
 13371              	.LCFI1040:
 13372              		.cfi_restore 7
 13373              		.cfi_def_cfa_offset 0
 13374 0014 7047     		bx	lr
 13375              		.cfi_endproc
 13376              	.LFE4813:
 13378              		.section	.rodata
 13379 0017 00       		.align	2
 13380              	.LC10:
 13381 0018 4552524F 		.ascii	"ERROR\000"
 13381      5200
 13382              		.section	.text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv,"axG",%progbits,_ZN4otto3mcu7w
 13383              		.align	1
 13384              		.weak	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv
 13385              		.syntax unified
 13386              		.thumb
 13387              		.thumb_func
 13388              		.fpu fpv4-sp-d16
 13390              	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv:
 13391              	.LFB4814:
 185:Cpp/ws2812b.hpp ****     {
 13392              		.loc 9 185 10
 13393              		.cfi_startproc
 13394              		@ args = 0, pretend = 0, frame = 16
 13395              		@ frame_needed = 1, uses_anonymous_args = 0
 13396 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13397              	.LCFI1041:
 13398              		.cfi_def_cfa_offset 20
 13399              		.cfi_offset 4, -20
 13400              		.cfi_offset 5, -16
 13401              		.cfi_offset 6, -12
 13402              		.cfi_offset 7, -8
 13403              		.cfi_offset 14, -4
 13404 0002 85B0     		sub	sp, sp, #20
 13405              	.LCFI1042:
 13406              		.cfi_def_cfa_offset 40
 13407 0004 00AF     		add	r7, sp, #0
 13408              	.LCFI1043:
 13409              		.cfi_def_cfa_register 7
 13410 0006 7860     		str	r0, [r7, #4]
 187:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
ARM GAS  /tmp/ccU23Djm.s 			page 410


 13411              		.loc 9 187 40
 13412 0008 7B68     		ldr	r3, [r7, #4]
 13413 000a 1D68     		ldr	r5, [r3]
 187:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 13414              		.loc 9 187 38
 13415 000c 7B68     		ldr	r3, [r7, #4]
 13416 000e 0533     		adds	r3, r3, #5
 13417 0010 1846     		mov	r0, r3
 13418 0012 FFF7FEFF 		bl	_ZNSt5arrayIhLj648EE4dataEv
 13419 0016 0646     		mov	r6, r0
 187:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 13420              		.loc 9 187 80
 13421 0018 7B68     		ldr	r3, [r7, #4]
 13422 001a 0533     		adds	r3, r3, #5
 13423 001c 1846     		mov	r0, r3
 13424 001e FFF7FEFF 		bl	_ZNKSt5arrayIhLj648EE4sizeEv
 13425 0022 0346     		mov	r3, r0
 187:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 13426              		.loc 9 187 38
 13427 0024 9CB2     		uxth	r4, r3
 187:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 13428              		.loc 9 187 93
 13429 0026 7B68     		ldr	r3, [r7, #4]
 13430 0028 03F28D23 		addw	r3, r3, #653
 13431 002c 1846     		mov	r0, r3
 13432 002e FFF7FEFF 		bl	_ZNKSt5arrayIhLj2EE4sizeEv
 13433 0032 0346     		mov	r3, r0
 187:Cpp/ws2812b.hpp ****       while (__HAL_SPI_GET_FLAG(&hspi_, SPI_FLAG_BSY))
 13434              		.loc 9 187 38
 13435 0034 9BB2     		uxth	r3, r3
 13436 0036 2344     		add	r3, r3, r4
 13437 0038 9BB2     		uxth	r3, r3
 13438 003a 1A46     		mov	r2, r3
 13439 003c 3146     		mov	r1, r6
 13440 003e 2846     		mov	r0, r5
 13441 0040 FFF7FEFF 		bl	HAL_SPI_Transmit_DMA
 13442 0044 0346     		mov	r3, r0
 13443 0046 FB73     		strb	r3, [r7, #15]
 13444              	.L526:
 188:Cpp/ws2812b.hpp ****         ;
 13445              		.loc 9 188 14
 13446 0048 7B68     		ldr	r3, [r7, #4]
 13447 004a 1B68     		ldr	r3, [r3]
 13448 004c 1B68     		ldr	r3, [r3]
 13449 004e 9B68     		ldr	r3, [r3, #8]
 13450 0050 03F08003 		and	r3, r3, #128
 13451 0054 802B     		cmp	r3, #128
 13452 0056 0CBF     		ite	eq
 13453 0058 0123     		moveq	r3, #1
 13454 005a 0023     		movne	r3, #0
 13455 005c DBB2     		uxtb	r3, r3
 13456 005e 002B     		cmp	r3, #0
 13457 0060 00D0     		beq	.L525
 188:Cpp/ws2812b.hpp ****         ;
 13458              		.loc 9 188 7
 13459 0062 F1E7     		b	.L526
 13460              	.L525:
ARM GAS  /tmp/ccU23Djm.s 			page 411


 190:Cpp/ws2812b.hpp ****         printf("ERROR");
 13461              		.loc 9 190 7
 13462 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 13463 0066 002B     		cmp	r3, #0
 13464 0068 02D0     		beq	.L528
 191:Cpp/ws2812b.hpp ****       }
 13465              		.loc 9 191 15
 13466 006a 0348     		ldr	r0, .L529
 13467 006c FFF7FEFF 		bl	printf
 13468              	.L528:
 193:Cpp/ws2812b.hpp **** 
 13469              		.loc 9 193 5
 13470 0070 00BF     		nop
 13471 0072 1437     		adds	r7, r7, #20
 13472              	.LCFI1044:
 13473              		.cfi_def_cfa_offset 20
 13474 0074 BD46     		mov	sp, r7
 13475              	.LCFI1045:
 13476              		.cfi_def_cfa_register 13
 13477              		@ sp needed
 13478 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 13479              	.L530:
 13480              		.align	2
 13481              	.L529:
 13482 0078 18000000 		.word	.LC10
 13483              		.cfi_endproc
 13484              	.LFE4814:
 13486              		.section	.text._ZNSt5arrayIhLj648EE5beginEv,"axG",%progbits,_ZNSt5arrayIhLj648EE5beginEv,comdat
 13487              		.align	1
 13488              		.weak	_ZNSt5arrayIhLj648EE5beginEv
 13489              		.syntax unified
 13490              		.thumb
 13491              		.thumb_func
 13492              		.fpu fpv4-sp-d16
 13494              	_ZNSt5arrayIhLj648EE5beginEv:
 13495              	.LFB4815:
 126:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return iterator(data()); }
 13496              		.loc 8 126 7
 13497              		.cfi_startproc
 13498              		@ args = 0, pretend = 0, frame = 8
 13499              		@ frame_needed = 1, uses_anonymous_args = 0
 13500 0000 80B5     		push	{r7, lr}
 13501              	.LCFI1046:
 13502              		.cfi_def_cfa_offset 8
 13503              		.cfi_offset 7, -8
 13504              		.cfi_offset 14, -4
 13505 0002 82B0     		sub	sp, sp, #8
 13506              	.LCFI1047:
 13507              		.cfi_def_cfa_offset 16
 13508 0004 00AF     		add	r7, sp, #0
 13509              	.LCFI1048:
 13510              		.cfi_def_cfa_register 7
 13511 0006 7860     		str	r0, [r7, #4]
 127:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13512              		.loc 8 127 16
 13513 0008 7868     		ldr	r0, [r7, #4]
 13514 000a FFF7FEFF 		bl	_ZNSt5arrayIhLj648EE4dataEv
ARM GAS  /tmp/ccU23Djm.s 			page 412


 13515 000e 0346     		mov	r3, r0
 127:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13516              		.loc 8 127 34
 13517 0010 1846     		mov	r0, r3
 13518 0012 0837     		adds	r7, r7, #8
 13519              	.LCFI1049:
 13520              		.cfi_def_cfa_offset 8
 13521 0014 BD46     		mov	sp, r7
 13522              	.LCFI1050:
 13523              		.cfi_def_cfa_register 13
 13524              		@ sp needed
 13525 0016 80BD     		pop	{r7, pc}
 13526              		.cfi_endproc
 13527              	.LFE4815:
 13529              		.section	.text._ZNSt5arrayIhLj648EE3endEv,"axG",%progbits,_ZNSt5arrayIhLj648EE3endEv,comdat
 13530              		.align	1
 13531              		.weak	_ZNSt5arrayIhLj648EE3endEv
 13532              		.syntax unified
 13533              		.thumb
 13534              		.thumb_func
 13535              		.fpu fpv4-sp-d16
 13537              	_ZNSt5arrayIhLj648EE3endEv:
 13538              	.LFB4816:
 134:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return iterator(data() + _Nm); }
 13539              		.loc 8 134 7
 13540              		.cfi_startproc
 13541              		@ args = 0, pretend = 0, frame = 8
 13542              		@ frame_needed = 1, uses_anonymous_args = 0
 13543 0000 80B5     		push	{r7, lr}
 13544              	.LCFI1051:
 13545              		.cfi_def_cfa_offset 8
 13546              		.cfi_offset 7, -8
 13547              		.cfi_offset 14, -4
 13548 0002 82B0     		sub	sp, sp, #8
 13549              	.LCFI1052:
 13550              		.cfi_def_cfa_offset 16
 13551 0004 00AF     		add	r7, sp, #0
 13552              	.LCFI1053:
 13553              		.cfi_def_cfa_register 7
 13554 0006 7860     		str	r0, [r7, #4]
 135:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13555              		.loc 8 135 32
 13556 0008 7868     		ldr	r0, [r7, #4]
 13557 000a FFF7FEFF 		bl	_ZNSt5arrayIhLj648EE4dataEv
 13558 000e 0346     		mov	r3, r0
 135:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13559              		.loc 8 135 37
 13560 0010 03F52273 		add	r3, r3, #648
 135:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13561              		.loc 8 135 40
 13562 0014 1846     		mov	r0, r3
 13563 0016 0837     		adds	r7, r7, #8
 13564              	.LCFI1054:
 13565              		.cfi_def_cfa_offset 8
 13566 0018 BD46     		mov	sp, r7
 13567              	.LCFI1055:
 13568              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccU23Djm.s 			page 413


 13569              		@ sp needed
 13570 001a 80BD     		pop	{r7, pc}
 13571              		.cfi_endproc
 13572              	.LFE4816:
 13574              		.section	.text._ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_
 13575              		.align	1
 13576              		.weak	_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_
 13577              		.syntax unified
 13578              		.thumb
 13579              		.thumb_func
 13580              		.fpu fpv4-sp-d16
 13582              	_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_:
 13583              	.LFB4817:
 721:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     {
 13584              		.loc 16 721 5
 13585              		.cfi_startproc
 13586              		@ args = 0, pretend = 0, frame = 24
 13587              		@ frame_needed = 1, uses_anonymous_args = 0
 13588 0000 80B5     		push	{r7, lr}
 13589              	.LCFI1056:
 13590              		.cfi_def_cfa_offset 8
 13591              		.cfi_offset 7, -8
 13592              		.cfi_offset 14, -4
 13593 0002 86B0     		sub	sp, sp, #24
 13594              	.LCFI1057:
 13595              		.cfi_def_cfa_offset 32
 13596 0004 00AF     		add	r7, sp, #0
 13597              	.LCFI1058:
 13598              		.cfi_def_cfa_register 7
 13599 0006 F860     		str	r0, [r7, #12]
 13600 0008 B960     		str	r1, [r7, #8]
 13601 000a 7A60     		str	r2, [r7, #4]
 723:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 13602              		.loc 16 723 17
 13603 000c 7B68     		ldr	r3, [r7, #4]
 13604 000e 1B78     		ldrb	r3, [r3]
 13605 0010 FB75     		strb	r3, [r7, #23]
 13606              	.LBB84:
 724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 13607              		.loc 16 724 39
 13608 0012 BA68     		ldr	r2, [r7, #8]
 13609 0014 FB68     		ldr	r3, [r7, #12]
 13610 0016 D31A     		subs	r3, r2, r3
 724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 13611              		.loc 16 724 24
 13612 0018 3B61     		str	r3, [r7, #16]
 724:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 13613              		.loc 16 724 7
 13614 001a 3B69     		ldr	r3, [r7, #16]
 13615 001c 002B     		cmp	r3, #0
 13616 001e 05D0     		beq	.L537
 725:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     }
 13617              		.loc 16 725 18
 13618 0020 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 13619 0022 3A69     		ldr	r2, [r7, #16]
 13620 0024 1946     		mov	r1, r3
 13621 0026 F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccU23Djm.s 			page 414


 13622 0028 FFF7FEFF 		bl	memset
 13623              	.L537:
 13624              	.LBE84:
 726:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 
 13625              		.loc 16 726 5
 13626 002c 00BF     		nop
 13627 002e 1837     		adds	r7, r7, #24
 13628              	.LCFI1059:
 13629              		.cfi_def_cfa_offset 8
 13630 0030 BD46     		mov	sp, r7
 13631              	.LCFI1060:
 13632              		.cfi_def_cfa_register 13
 13633              		@ sp needed
 13634 0032 80BD     		pop	{r7, pc}
 13635              		.cfi_endproc
 13636              	.LFE4817:
 13638              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv,"axG",%p
 13639              		.align	1
 13640              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv
 13641              		.syntax unified
 13642              		.thumb
 13643              		.thumb_func
 13644              		.fpu fpv4-sp-d16
 13646              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv:
 13647              	.LFB4818:
 277:Cpp/fixed_size_function.hpp ****   {
 13648              		.loc 12 277 14
 13649              		.cfi_startproc
 13650              		@ args = 0, pretend = 0, frame = 8
 13651              		@ frame_needed = 1, uses_anonymous_args = 0
 13652 0000 80B5     		push	{r7, lr}
 13653              	.LCFI1061:
 13654              		.cfi_def_cfa_offset 8
 13655              		.cfi_offset 7, -8
 13656              		.cfi_offset 14, -4
 13657 0002 82B0     		sub	sp, sp, #8
 13658              	.LCFI1062:
 13659              		.cfi_def_cfa_offset 16
 13660 0004 00AF     		add	r7, sp, #0
 13661              	.LCFI1063:
 13662              		.cfi_def_cfa_register 7
 13663 0006 7860     		str	r0, [r7, #4]
 279:Cpp/fixed_size_function.hpp ****   }
 13664              		.loc 12 279 45
 13665 0008 7B68     		ldr	r3, [r7, #4]
 13666 000a 1B68     		ldr	r3, [r3]
 13667 000c 9847     		blx	r3
 13668              	.LVL13:
 279:Cpp/fixed_size_function.hpp ****   }
 13669              		.loc 12 279 73
 13670 000e 00BF     		nop
 280:Cpp/fixed_size_function.hpp **** 
 13671              		.loc 12 280 3
 13672 0010 0837     		adds	r7, r7, #8
 13673              	.LCFI1064:
 13674              		.cfi_def_cfa_offset 8
 13675 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/ccU23Djm.s 			page 415


 13676              	.LCFI1065:
 13677              		.cfi_def_cfa_register 13
 13678              		@ sp needed
 13679 0014 80BD     		pop	{r7, pc}
 13680              		.cfi_endproc
 13681              	.LFE4818:
 13683              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv,"axG
 13684              		.align	1
 13685              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv
 13686              		.syntax unified
 13687              		.thumb
 13688              		.thumb_func
 13689              		.fpu fpv4-sp-d16
 13691              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv:
 13692              	.LFB4819:
 283:Cpp/fixed_size_function.hpp ****   {
 13693              		.loc 12 283 15
 13694              		.cfi_startproc
 13695              		@ args = 0, pretend = 0, frame = 8
 13696              		@ frame_needed = 1, uses_anonymous_args = 0
 13697              		@ link register save eliminated.
 13698 0000 80B4     		push	{r7}
 13699              	.LCFI1066:
 13700              		.cfi_def_cfa_offset 4
 13701              		.cfi_offset 7, -4
 13702 0002 83B0     		sub	sp, sp, #12
 13703              	.LCFI1067:
 13704              		.cfi_def_cfa_offset 16
 13705 0004 00AF     		add	r7, sp, #0
 13706              	.LCFI1068:
 13707              		.cfi_def_cfa_register 7
 13708 0006 7860     		str	r0, [r7, #4]
 286:Cpp/fixed_size_function.hpp **** 
 13709              		.loc 12 286 3
 13710 0008 00BF     		nop
 13711 000a 0C37     		adds	r7, r7, #12
 13712              	.LCFI1069:
 13713              		.cfi_def_cfa_offset 4
 13714 000c BD46     		mov	sp, r7
 13715              	.LCFI1070:
 13716              		.cfi_def_cfa_register 13
 13717              		@ sp needed
 13718 000e 5DF8047B 		ldr	r7, [sp], #4
 13719              	.LCFI1071:
 13720              		.cfi_restore 7
 13721              		.cfi_def_cfa_offset 0
 13722 0012 7047     		bx	lr
 13723              		.cfi_endproc
 13724              	.LFE4819:
 13726              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integra
 13727              		.align	1
 13728              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integral_constan
 13729              		.syntax unified
 13730              		.thumb
 13731              		.thumb_func
 13732              		.fpu fpv4-sp-d16
 13734              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integral_constantIbLb0E
ARM GAS  /tmp/ccU23Djm.s 			page 416


 13735              	.LFB4820:
 307:Cpp/fixed_size_function.hpp ****   {}
 13736              		.loc 12 307 8
 13737              		.cfi_startproc
 13738              		@ args = 0, pretend = 0, frame = 8
 13739              		@ frame_needed = 1, uses_anonymous_args = 0
 13740              		@ link register save eliminated.
 13741 0000 80B4     		push	{r7}
 13742              	.LCFI1072:
 13743              		.cfi_def_cfa_offset 4
 13744              		.cfi_offset 7, -4
 13745 0002 83B0     		sub	sp, sp, #12
 13746              	.LCFI1073:
 13747              		.cfi_def_cfa_offset 16
 13748 0004 00AF     		add	r7, sp, #0
 13749              	.LCFI1074:
 13750              		.cfi_def_cfa_register 7
 13751 0006 7860     		str	r0, [r7, #4]
 13752 0008 3970     		strb	r1, [r7]
 308:Cpp/fixed_size_function.hpp **** 
 13753              		.loc 12 308 4
 13754 000a 00BF     		nop
 13755 000c 0C37     		adds	r7, r7, #12
 13756              	.LCFI1075:
 13757              		.cfi_def_cfa_offset 4
 13758 000e BD46     		mov	sp, r7
 13759              	.LCFI1076:
 13760              		.cfi_def_cfa_register 13
 13761              		@ sp needed
 13762 0010 5DF8047B 		ldr	r7, [sp], #4
 13763              	.LCFI1077:
 13764              		.cfi_restore 7
 13765              		.cfi_def_cfa_offset 0
 13766 0014 7047     		bx	lr
 13767              		.cfi_endproc
 13768              	.LFE4820:
 13770              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integra
 13771              		.align	1
 13772              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constan
 13773              		.syntax unified
 13774              		.thumb
 13775              		.thumb_func
 13776              		.fpu fpv4-sp-d16
 13778              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constantIbLb1E
 13779              	.LFB4821:
 311:Cpp/fixed_size_function.hpp ****   {
 13780              		.loc 12 311 8
 13781              		.cfi_startproc
 13782              		@ args = 0, pretend = 0, frame = 8
 13783              		@ frame_needed = 1, uses_anonymous_args = 0
 13784              		@ link register save eliminated.
 13785 0000 80B4     		push	{r7}
 13786              	.LCFI1078:
 13787              		.cfi_def_cfa_offset 4
 13788              		.cfi_offset 7, -4
 13789 0002 83B0     		sub	sp, sp, #12
 13790              	.LCFI1079:
ARM GAS  /tmp/ccU23Djm.s 			page 417


 13791              		.cfi_def_cfa_offset 16
 13792 0004 00AF     		add	r7, sp, #0
 13793              	.LCFI1080:
 13794              		.cfi_def_cfa_register 7
 13795 0006 7860     		str	r0, [r7, #4]
 13796 0008 3970     		strb	r1, [r7]
 313:Cpp/fixed_size_function.hpp ****   }
 13797              		.loc 12 313 5
 13798 000a 7B68     		ldr	r3, [r7, #4]
 13799 000c 034A     		ldr	r2, .L543
 13800 000e 9A60     		str	r2, [r3, #8]
 13801              		.loc 12 314 3
 13802 0010 00BF     		nop
 13803 0012 0C37     		adds	r7, r7, #12
 13804              	.LCFI1081:
 13805              		.cfi_def_cfa_offset 4
 13806 0014 BD46     		mov	sp, r7
 13807              	.LCFI1082:
 13808              		.cfi_def_cfa_register 13
 13809              		@ sp needed
 13810 0016 5DF8047B 		ldr	r7, [sp], #4
 13811              	.LCFI1083:
 13812              		.cfi_restore 7
 13813              		.cfi_def_cfa_offset 0
 13814 001a 7047     		bx	lr
 13815              	.L544:
 13816              		.align	2
 13817              	.L543:
 13818 001c 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_
 13819              		.cfi_endproc
 13820              	.LFE4821:
 13822              		.section	.text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv,"axG",%progbits,_ZNSt5arrayIN4otto3mcu7
 13823              		.align	1
 13824              		.weak	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv
 13825              		.syntax unified
 13826              		.thumb
 13827              		.thumb_func
 13828              		.fpu fpv4-sp-d16
 13830              	_ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv:
 13831              	.LFB4822:
 234:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 13832              		.loc 8 234 7
 13833              		.cfi_startproc
 13834              		@ args = 0, pretend = 0, frame = 8
 13835              		@ frame_needed = 1, uses_anonymous_args = 0
 13836 0000 80B5     		push	{r7, lr}
 13837              	.LCFI1084:
 13838              		.cfi_def_cfa_offset 8
 13839              		.cfi_offset 7, -8
 13840              		.cfi_offset 14, -4
 13841 0002 82B0     		sub	sp, sp, #8
 13842              	.LCFI1085:
 13843              		.cfi_def_cfa_offset 16
 13844 0004 00AF     		add	r7, sp, #0
 13845              	.LCFI1086:
 13846              		.cfi_def_cfa_register 7
 13847 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccU23Djm.s 			page 418


 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13848              		.loc 8 235 33
 13849 0008 7B68     		ldr	r3, [r7, #4]
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13850              		.loc 8 235 32
 13851 000a 1846     		mov	r0, r3
 13852 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_
 13853 0010 0346     		mov	r3, r0
 235:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 13854              		.loc 8 235 44
 13855 0012 1846     		mov	r0, r3
 13856 0014 0837     		adds	r7, r7, #8
 13857              	.LCFI1087:
 13858              		.cfi_def_cfa_offset 8
 13859 0016 BD46     		mov	sp, r7
 13860              	.LCFI1088:
 13861              		.cfi_def_cfa_register 13
 13862              		@ sp needed
 13863 0018 80BD     		pop	{r7, pc}
 13864              		.cfi_endproc
 13865              	.LFE4822:
 13867              		.section	.text._ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh,"axG",%progbits,_ZNSt14__array_traitsIhL
 13868              		.align	1
 13869              		.weak	_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh
 13870              		.syntax unified
 13871              		.thumb
 13872              		.thumb_func
 13873              		.fpu fpv4-sp-d16
 13875              	_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh:
 13876              	.LFB4823:
  59:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp*>(__t); }
 13877              		.loc 8 59 7
 13878              		.cfi_startproc
 13879              		@ args = 0, pretend = 0, frame = 8
 13880              		@ frame_needed = 1, uses_anonymous_args = 0
 13881              		@ link register save eliminated.
 13882 0000 80B4     		push	{r7}
 13883              	.LCFI1089:
 13884              		.cfi_def_cfa_offset 4
 13885              		.cfi_offset 7, -4
 13886 0002 83B0     		sub	sp, sp, #12
 13887              	.LCFI1090:
 13888              		.cfi_def_cfa_offset 16
 13889 0004 00AF     		add	r7, sp, #0
 13890              	.LCFI1091:
 13891              		.cfi_def_cfa_register 7
 13892 0006 7860     		str	r0, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 13893              		.loc 8 60 36
 13894 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 13895              		.loc 8 60 39
 13896 000a 1846     		mov	r0, r3
 13897 000c 0C37     		adds	r7, r7, #12
 13898              	.LCFI1092:
 13899              		.cfi_def_cfa_offset 4
 13900 000e BD46     		mov	sp, r7
ARM GAS  /tmp/ccU23Djm.s 			page 419


 13901              	.LCFI1093:
 13902              		.cfi_def_cfa_register 13
 13903              		@ sp needed
 13904 0010 5DF8047B 		ldr	r7, [sp], #4
 13905              	.LCFI1094:
 13906              		.cfi_restore 7
 13907              		.cfi_def_cfa_offset 0
 13908 0014 7047     		bx	lr
 13909              		.cfi_endproc
 13910              	.LFE4823:
 13912              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZ14OTTO_main_loopE
 13913              		.align	1
 13914              		.syntax unified
 13915              		.thumb
 13916              		.thumb_func
 13917              		.fpu fpv4-sp-d16
 13919              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZ14OTTO_main_loopEUlvE_EEvPv:
 13920              	.LFB4824:
 277:Cpp/fixed_size_function.hpp ****   {
 13921              		.loc 12 277 14
 13922              		.cfi_startproc
 13923              		@ args = 0, pretend = 0, frame = 8
 13924              		@ frame_needed = 1, uses_anonymous_args = 0
 13925 0000 80B5     		push	{r7, lr}
 13926              	.LCFI1095:
 13927              		.cfi_def_cfa_offset 8
 13928              		.cfi_offset 7, -8
 13929              		.cfi_offset 14, -4
 13930 0002 82B0     		sub	sp, sp, #8
 13931              	.LCFI1096:
 13932              		.cfi_def_cfa_offset 16
 13933 0004 00AF     		add	r7, sp, #0
 13934              	.LCFI1097:
 13935              		.cfi_def_cfa_register 7
 13936 0006 7860     		str	r0, [r7, #4]
 279:Cpp/fixed_size_function.hpp ****   }
 13937              		.loc 12 279 45
 13938 0008 7868     		ldr	r0, [r7, #4]
 13939 000a FFF7FEFF 		bl	_ZZ14OTTO_main_loopENKUlvE_clEv
 279:Cpp/fixed_size_function.hpp ****   }
 13940              		.loc 12 279 73
 13941 000e 00BF     		nop
 280:Cpp/fixed_size_function.hpp **** 
 13942              		.loc 12 280 3
 13943 0010 0837     		adds	r7, r7, #8
 13944              	.LCFI1098:
 13945              		.cfi_def_cfa_offset 8
 13946 0012 BD46     		mov	sp, r7
 13947              	.LCFI1099:
 13948              		.cfi_def_cfa_register 13
 13949              		@ sp needed
 13950 0014 80BD     		pop	{r7, pc}
 13951              		.cfi_endproc
 13952              	.LFE4824:
 13954              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZ14OTTO_main_l
 13955              		.align	1
 13956              		.syntax unified
ARM GAS  /tmp/ccU23Djm.s 			page 420


 13957              		.thumb
 13958              		.thumb_func
 13959              		.fpu fpv4-sp-d16
 13961              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZ14OTTO_main_loopEUlvE_EEvPv:
 13962              	.LFB4825:
 283:Cpp/fixed_size_function.hpp ****   {
 13963              		.loc 12 283 15
 13964              		.cfi_startproc
 13965              		@ args = 0, pretend = 0, frame = 8
 13966              		@ frame_needed = 1, uses_anonymous_args = 0
 13967              		@ link register save eliminated.
 13968 0000 80B4     		push	{r7}
 13969              	.LCFI1100:
 13970              		.cfi_def_cfa_offset 4
 13971              		.cfi_offset 7, -4
 13972 0002 83B0     		sub	sp, sp, #12
 13973              	.LCFI1101:
 13974              		.cfi_def_cfa_offset 16
 13975 0004 00AF     		add	r7, sp, #0
 13976              	.LCFI1102:
 13977              		.cfi_def_cfa_register 7
 13978 0006 7860     		str	r0, [r7, #4]
 286:Cpp/fixed_size_function.hpp **** 
 13979              		.loc 12 286 3
 13980 0008 00BF     		nop
 13981 000a 0C37     		adds	r7, r7, #12
 13982              	.LCFI1103:
 13983              		.cfi_def_cfa_offset 4
 13984 000c BD46     		mov	sp, r7
 13985              	.LCFI1104:
 13986              		.cfi_def_cfa_register 13
 13987              		@ sp needed
 13988 000e 5DF8047B 		ldr	r7, [sp], #4
 13989              	.LCFI1105:
 13990              		.cfi_restore 7
 13991              		.cfi_def_cfa_offset 0
 13992 0012 7047     		bx	lr
 13993              		.cfi_endproc
 13994              	.LFE4825:
 13996              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZ14OTTO_main_loopE
 13997              		.align	1
 13998              		.syntax unified
 13999              		.thumb
 14000              		.thumb_func
 14001              		.fpu fpv4-sp-d16
 14003              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZ14OTTO_main_loopEUlvE_EEvSt17inte
 14004              	.LFB4826:
 307:Cpp/fixed_size_function.hpp ****   {}
 14005              		.loc 12 307 8
 14006              		.cfi_startproc
 14007              		@ args = 0, pretend = 0, frame = 8
 14008              		@ frame_needed = 1, uses_anonymous_args = 0
 14009              		@ link register save eliminated.
 14010 0000 80B4     		push	{r7}
 14011              	.LCFI1106:
 14012              		.cfi_def_cfa_offset 4
 14013              		.cfi_offset 7, -4
ARM GAS  /tmp/ccU23Djm.s 			page 421


 14014 0002 83B0     		sub	sp, sp, #12
 14015              	.LCFI1107:
 14016              		.cfi_def_cfa_offset 16
 14017 0004 00AF     		add	r7, sp, #0
 14018              	.LCFI1108:
 14019              		.cfi_def_cfa_register 7
 14020 0006 7860     		str	r0, [r7, #4]
 14021 0008 3970     		strb	r1, [r7]
 308:Cpp/fixed_size_function.hpp **** 
 14022              		.loc 12 308 4
 14023 000a 00BF     		nop
 14024 000c 0C37     		adds	r7, r7, #12
 14025              	.LCFI1109:
 14026              		.cfi_def_cfa_offset 4
 14027 000e BD46     		mov	sp, r7
 14028              	.LCFI1110:
 14029              		.cfi_def_cfa_register 13
 14030              		@ sp needed
 14031 0010 5DF8047B 		ldr	r7, [sp], #4
 14032              	.LCFI1111:
 14033              		.cfi_restore 7
 14034              		.cfi_def_cfa_offset 0
 14035 0014 7047     		bx	lr
 14036              		.cfi_endproc
 14037              	.LFE4826:
 14039              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopE
 14040              		.align	1
 14041              		.syntax unified
 14042              		.thumb
 14043              		.thumb_func
 14044              		.fpu fpv4-sp-d16
 14046              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopEUlvE_EEvSt17inte
 14047              	.LFB4827:
 311:Cpp/fixed_size_function.hpp ****   {
 14048              		.loc 12 311 8
 14049              		.cfi_startproc
 14050              		@ args = 0, pretend = 0, frame = 8
 14051              		@ frame_needed = 1, uses_anonymous_args = 0
 14052              		@ link register save eliminated.
 14053 0000 80B4     		push	{r7}
 14054              	.LCFI1112:
 14055              		.cfi_def_cfa_offset 4
 14056              		.cfi_offset 7, -4
 14057 0002 83B0     		sub	sp, sp, #12
 14058              	.LCFI1113:
 14059              		.cfi_def_cfa_offset 16
 14060 0004 00AF     		add	r7, sp, #0
 14061              	.LCFI1114:
 14062              		.cfi_def_cfa_register 7
 14063 0006 7860     		str	r0, [r7, #4]
 14064 0008 3970     		strb	r1, [r7]
 313:Cpp/fixed_size_function.hpp ****   }
 14065              		.loc 12 313 5
 14066 000a 7B68     		ldr	r3, [r7, #4]
 14067 000c 034A     		ldr	r2, .L554
 14068 000e 9A60     		str	r2, [r3, #8]
 14069              		.loc 12 314 3
ARM GAS  /tmp/ccU23Djm.s 			page 422


 14070 0010 00BF     		nop
 14071 0012 0C37     		adds	r7, r7, #12
 14072              	.LCFI1115:
 14073              		.cfi_def_cfa_offset 4
 14074 0014 BD46     		mov	sp, r7
 14075              	.LCFI1116:
 14076              		.cfi_def_cfa_register 13
 14077              		@ sp needed
 14078 0016 5DF8047B 		ldr	r7, [sp], #4
 14079              	.LCFI1117:
 14080              		.cfi_restore 7
 14081              		.cfi_def_cfa_offset 0
 14082 001a 7047     		bx	lr
 14083              	.L555:
 14084              		.align	2
 14085              	.L554:
 14086 001c 00000000 		.word	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZ14OTTO_main_loopEUlvE_EEvP
 14087              		.cfi_endproc
 14088              	.LFE4827:
 14090              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Schedu
 14091              		.align	1
 14092              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Scheduler20sche
 14093              		.syntax unified
 14094              		.thumb
 14095              		.thumb_func
 14096              		.fpu fpv4-sp-d16
 14098              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Scheduler20schedule_co
 14099              	.LFB4878:
 295:Cpp/fixed_size_function.hpp ****   {
 14100              		.loc 12 295 15
 14101              		.cfi_startproc
 14102              		@ args = 0, pretend = 0, frame = 8
 14103              		@ frame_needed = 1, uses_anonymous_args = 0
 14104 0000 90B5     		push	{r4, r7, lr}
 14105              	.LCFI1118:
 14106              		.cfi_def_cfa_offset 12
 14107              		.cfi_offset 4, -12
 14108              		.cfi_offset 7, -8
 14109              		.cfi_offset 14, -4
 14110 0002 83B0     		sub	sp, sp, #12
 14111              	.LCFI1119:
 14112              		.cfi_def_cfa_offset 24
 14113 0004 00AF     		add	r7, sp, #0
 14114              	.LCFI1120:
 14115              		.cfi_def_cfa_register 7
 14116 0006 7860     		str	r0, [r7, #4]
 14117 0008 3960     		str	r1, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14118              		.loc 12 297 33
 14119 000a 7868     		ldr	r0, [r7, #4]
 14120 000c FFF7FEFF 		bl	_ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14constr
 14121 0010 0446     		mov	r4, r0
 297:Cpp/fixed_size_function.hpp ****   }
 14122              		.loc 12 297 10
 14123 0012 3B68     		ldr	r3, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14124              		.loc 12 297 5
ARM GAS  /tmp/ccU23Djm.s 			page 423


 14125 0014 1946     		mov	r1, r3
 14126 0016 3020     		movs	r0, #48
 14127 0018 FFF7FEFF 		bl	_ZnwjPv
 14128 001c 0346     		mov	r3, r0
 14129 001e 2146     		mov	r1, r4
 14130 0020 1846     		mov	r0, r3
 14131 0022 FFF7FEFF 		bl	_ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2
 298:Cpp/fixed_size_function.hpp **** 
 14132              		.loc 12 298 3
 14133 0026 00BF     		nop
 14134 0028 0C37     		adds	r7, r7, #12
 14135              	.LCFI1121:
 14136              		.cfi_def_cfa_offset 12
 14137 002a BD46     		mov	sp, r7
 14138              	.LCFI1122:
 14139              		.cfi_def_cfa_register 13
 14140              		@ sp needed
 14141 002c 90BD     		pop	{r4, r7, pc}
 14142              		.cfi_endproc
 14143              	.LFE4878:
 14145              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_,"axG",%progbits,
 14146              		.align	1
 14147              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_
 14148              		.syntax unified
 14149              		.thumb
 14150              		.thumb_func
 14151              		.fpu fpv4-sp-d16
 14153              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_:
 14154              	.LFB4879:
 172:Cpp/fixed_size_function.hpp ****   {
 14155              		.loc 12 172 8
 14156              		.cfi_startproc
 14157              		@ args = 0, pretend = 0, frame = 8
 14158              		@ frame_needed = 1, uses_anonymous_args = 0
 14159 0000 80B5     		push	{r7, lr}
 14160              	.LCFI1123:
 14161              		.cfi_def_cfa_offset 8
 14162              		.cfi_offset 7, -8
 14163              		.cfi_offset 14, -4
 14164 0002 82B0     		sub	sp, sp, #8
 14165              	.LCFI1124:
 14166              		.cfi_def_cfa_offset 16
 14167 0004 00AF     		add	r7, sp, #0
 14168              	.LCFI1125:
 14169              		.cfi_def_cfa_register 7
 14170 0006 7860     		str	r0, [r7, #4]
 14171 0008 3960     		str	r1, [r7]
 174:Cpp/fixed_size_function.hpp ****     move(std::move(src));
 14172              		.loc 12 174 5
 14173 000a 7868     		ldr	r0, [r7, #4]
 14174 000c FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv
 175:Cpp/fixed_size_function.hpp ****   }
 14175              		.loc 12 175 19
 14176 0010 3868     		ldr	r0, [r7]
 14177 0012 FFF7FEFF 		bl	_ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeE
 14178 0016 0346     		mov	r3, r0
 175:Cpp/fixed_size_function.hpp ****   }
ARM GAS  /tmp/ccU23Djm.s 			page 424


 14179              		.loc 12 175 5
 14180 0018 1946     		mov	r1, r3
 14181 001a 7868     		ldr	r0, [r7, #4]
 14182 001c FFF7FEFF 		bl	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_
 176:Cpp/fixed_size_function.hpp **** 
 14183              		.loc 12 176 3
 14184 0020 00BF     		nop
 14185 0022 0837     		adds	r7, r7, #8
 14186              	.LCFI1126:
 14187              		.cfi_def_cfa_offset 8
 14188 0024 BD46     		mov	sp, r7
 14189              	.LCFI1127:
 14190              		.cfi_def_cfa_register 13
 14191              		@ sp needed
 14192 0026 80BD     		pop	{r7, pc}
 14193              		.cfi_endproc
 14194              	.LFE4879:
 14196              		.section	.text._ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_
 14197              		.align	1
 14198              		.weak	_ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_SA_EEbT_T
 14199              		.syntax unified
 14200              		.thumb
 14201              		.thumb_func
 14202              		.fpu fpv4-sp-d16
 14204              	_ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_SA_EEbT_T0_:
 14205              	.LFB4880:
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****         { return bool(_M_comp(*__it1, *__it2)); }
 14206              		.loc 19 142 9
 14207              		.cfi_startproc
 14208              		@ args = 0, pretend = 0, frame = 16
 14209              		@ frame_needed = 1, uses_anonymous_args = 0
 14210 0000 80B5     		push	{r7, lr}
 14211              	.LCFI1128:
 14212              		.cfi_def_cfa_offset 8
 14213              		.cfi_offset 7, -8
 14214              		.cfi_offset 14, -4
 14215 0002 84B0     		sub	sp, sp, #16
 14216              	.LCFI1129:
 14217              		.cfi_def_cfa_offset 24
 14218 0004 00AF     		add	r7, sp, #0
 14219              	.LCFI1130:
 14220              		.cfi_def_cfa_register 7
 14221 0006 F860     		str	r0, [r7, #12]
 14222 0008 B960     		str	r1, [r7, #8]
 14223 000a 7A60     		str	r2, [r7, #4]
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     };
 14224              		.loc 19 143 18
 14225 000c FB68     		ldr	r3, [r7, #12]
 14226 000e 7A68     		ldr	r2, [r7, #4]
 14227 0010 B968     		ldr	r1, [r7, #8]
 14228 0012 1846     		mov	r0, r3
 14229 0014 FFF7FEFF 		bl	_ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_
 14230 0018 0346     		mov	r3, r0
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****     };
 14231              		.loc 19 143 49
 14232 001a 1846     		mov	r0, r3
 14233 001c 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccU23Djm.s 			page 425


 14234              	.LCFI1131:
 14235              		.cfi_def_cfa_offset 8
 14236 001e BD46     		mov	sp, r7
 14237              	.LCFI1132:
 14238              		.cfi_def_cfa_register 13
 14239              		@ sp needed
 14240 0020 80BD     		pop	{r7, pc}
 14241              		.cfi_endproc
 14242              	.LFE4880:
 14244              		.section	.text._ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskE
 14245              		.align	1
 14246              		.weak	_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEEEONSt1
 14247              		.syntax unified
 14248              		.thumb
 14249              		.thumb_func
 14250              		.fpu fpv4-sp-d16
 14252              	_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEEEONSt16remove
 14253              	.LFB4881:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 14254              		.loc 13 99 5
 14255              		.cfi_startproc
 14256              		@ args = 0, pretend = 0, frame = 8
 14257              		@ frame_needed = 1, uses_anonymous_args = 0
 14258              		@ link register save eliminated.
 14259 0000 80B4     		push	{r7}
 14260              	.LCFI1133:
 14261              		.cfi_def_cfa_offset 4
 14262              		.cfi_offset 7, -4
 14263 0002 83B0     		sub	sp, sp, #12
 14264              	.LCFI1134:
 14265              		.cfi_def_cfa_offset 16
 14266 0004 00AF     		add	r7, sp, #0
 14267              	.LCFI1135:
 14268              		.cfi_def_cfa_register 7
 14269 0006 7860     		str	r0, [r7, #4]
 14270              		.loc 13 100 74
 14271 0008 7B68     		ldr	r3, [r7, #4]
 14272              		.loc 13 100 77
 14273 000a 1846     		mov	r0, r3
 14274 000c 0C37     		adds	r7, r7, #12
 14275              	.LCFI1136:
 14276              		.cfi_def_cfa_offset 4
 14277 000e BD46     		mov	sp, r7
 14278              	.LCFI1137:
 14279              		.cfi_def_cfa_register 13
 14280              		@ sp needed
 14281 0010 5DF8047B 		ldr	r7, [sp], #4
 14282              	.LCFI1138:
 14283              		.cfi_restore 7
 14284              		.cfi_def_cfa_offset 0
 14285 0014 7047     		bx	lr
 14286              		.cfi_endproc
 14287              	.LFE4881:
 14289              		.section	.text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_
 14290              		.align	1
 14291              		.weak	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_15_Iter_c
 14292              		.syntax unified
ARM GAS  /tmp/ccU23Djm.s 			page 426


 14293              		.thumb
 14294              		.thumb_func
 14295              		.fpu fpv4-sp-d16
 14297              	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_15_Iter_comp_ite
 14298              	.LFB4883:
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** 	: _M_comp(std::move(__comp._M_comp))
 14299              		.loc 19 169 7
 14300              		.cfi_startproc
 14301              		@ args = 0, pretend = 0, frame = 8
 14302              		@ frame_needed = 1, uses_anonymous_args = 0
 14303 0000 80B5     		push	{r7, lr}
 14304              	.LCFI1139:
 14305              		.cfi_def_cfa_offset 8
 14306              		.cfi_offset 7, -8
 14307              		.cfi_offset 14, -4
 14308 0002 82B0     		sub	sp, sp, #8
 14309              	.LCFI1140:
 14310              		.cfi_def_cfa_offset 16
 14311 0004 00AF     		add	r7, sp, #0
 14312              	.LCFI1141:
 14313              		.cfi_def_cfa_register 7
 14314 0006 7860     		str	r0, [r7, #4]
 14315 0008 3960     		str	r1, [r7]
 14316              	.LBB85:
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { }
 14317              		.loc 19 170 29
 14318 000a 3B68     		ldr	r3, [r7]
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h ****       { }
 14319              		.loc 19 170 21
 14320 000c 1846     		mov	r0, r3
 14321 000e FFF7FEFF 		bl	_ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_
 14322              	.LBE85:
 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/predefined_ops.h **** #endif
 14323              		.loc 19 171 9
 14324 0012 7B68     		ldr	r3, [r7, #4]
 14325 0014 1846     		mov	r0, r3
 14326 0016 0837     		adds	r7, r7, #8
 14327              	.LCFI1142:
 14328              		.cfi_def_cfa_offset 8
 14329 0018 BD46     		mov	sp, r7
 14330              	.LCFI1143:
 14331              		.cfi_def_cfa_register 13
 14332              		@ sp needed
 14333 001a 80BD     		pop	{r7, pc}
 14334              		.cfi_endproc
 14335              	.LFE4883:
 14337              		.weak	_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1EONS0_15_Iter_c
 14338              		.thumb_set _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1EONS0_15_I
 14339              		.section	.text._ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_,"axG",%progbits,_ZNKSt7greate
 14340              		.align	1
 14341              		.weak	_ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_
 14342              		.syntax unified
 14343              		.thumb
 14344              		.thumb_func
 14345              		.fpu fpv4-sp-d16
 14347              	_ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_:
 14348              	.LFB4885:
ARM GAS  /tmp/ccU23Djm.s 			page 427


 14349              		.file 21 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h"
   1:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // Functor implementations -*- C++ -*-
   2:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
   3:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** //
   5:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // terms of the GNU General Public License as published by the
   8:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // any later version.
  10:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  11:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // GNU General Public License for more details.
  15:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  16:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  20:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  25:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** /*
  26:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *
  27:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * Copyright (c) 1994
  28:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * Hewlett-Packard Company
  29:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *
  30:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * representations about the suitability of this software for any
  36:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *
  38:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *
  39:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * Copyright (c) 1996-1998
  40:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *
  42:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * representations about the suitability of this software for any
  48:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  */
  50:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  51:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** /** @file bits/stl_function.h
  52:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  *  Do not attempt to use it directly. @headername{functional}
  54:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****  */
  55:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  56:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #ifndef _STL_FUNCTION_H
ARM GAS  /tmp/ccU23Djm.s 			page 428


  57:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #define _STL_FUNCTION_H 1
  58:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  59:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #if __cplusplus > 201103L
  60:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #include <bits/move.h>
  61:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #endif
  62:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  63:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** {
  65:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
  67:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   // 20.3.1 base classes
  68:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /** @defgroup functors Function Objects
  69:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    * @ingroup utilities
  70:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
  71:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  Function objects, or @e functors, are objects with an @c operator()
  72:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  defined and accessible.  They can be passed as arguments to algorithm
  73:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  templates and used in place of a function pointer.  Not only is the
  74:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  resulting expressiveness of the library increased, but the generated
  75:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  code can be more efficient than what you might write by hand.  When we
  76:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  refer to @a functors, then, generally we include function pointers in
  77:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  the description as well.
  78:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
  79:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  Often, functors are only created as temporaries passed to algorithm
  80:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  calls, rather than being created as named variables.
  81:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
  82:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  Two examples taken from the standard itself follow.  To perform a
  83:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  by-element addition of two vectors @c a and @c b containing @c double,
  84:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  and put the result in @c a, use
  85:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  \code
  86:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  transform (a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
  87:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  \endcode
  88:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  To negate every element in @c a, use
  89:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  \code
  90:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  transform(a.begin(), a.end(), a.begin(), negate<double>());
  91:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  \endcode
  92:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  The addition and negation functions will be inlined directly.
  93:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
  94:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  The standard functors are derived from structs named @c unary_function
  95:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  and @c binary_function.  These two classes contain nothing but typedefs,
  96:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  to aid in generic (template) programming.  If you write your own
  97:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  functors, you might consider doing the same.
  98:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  @{
 100:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    */
 101:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /**
 102:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 103:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    */
 104:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Arg, typename _Result>
 105:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct unary_function
 106:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 107:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       /// @c argument_type is the type of the argument
 108:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef _Arg 	argument_type;   
 109:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 110:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       /// @c result_type is the return type
 111:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef _Result 	result_type;  
 112:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 113:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 429


 114:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /**
 115:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 116:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    */
 117:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
 118:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct binary_function
 119:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 120:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       /// @c first_argument_type is the type of the first argument
 121:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef _Arg1 	first_argument_type; 
 122:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 123:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       /// @c second_argument_type is the type of the second argument
 124:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef _Arg2 	second_argument_type;
 125:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 126:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       /// @c result_type is the return type
 127:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef _Result 	result_type;
 128:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 129:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /** @}  */
 130:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 131:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   // 20.3.2 arithmetic
 132:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /** @defgroup arithmetic_functors Arithmetic Classes
 133:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    * @ingroup functors
 134:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
 135:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  Because basic math often needs to be done during an algorithm,
 136:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  the library provides functors for those operations.  See the
 137:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  documentation for @link functors the base classes@endlink
 138:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  for examples of their use.
 139:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
 140:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  @{
 141:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    */
 142:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 143:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #if __cplusplus > 201103L
 144:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   struct __is_transparent;  // undefined
 145:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 146:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 147:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct plus;
 148:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 149:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 150:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct minus;
 151:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 152:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 153:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct multiplies;
 154:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 155:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 156:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct divides;
 157:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 158:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 159:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct modulus;
 160:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 161:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 162:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct negate;
 163:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #endif
 164:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 165:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 166:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 167:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct plus : public binary_function<_Tp, _Tp, _Tp>
 168:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 169:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 170:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _Tp
ARM GAS  /tmp/ccU23Djm.s 			page 430


 171:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 172:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x + __y; }
 173:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 174:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 175:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 176:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 177:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct minus : public binary_function<_Tp, _Tp, _Tp>
 178:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 179:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 180:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _Tp
 181:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 182:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x - __y; }
 183:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 184:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 185:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 186:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 187:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct multiplies : public binary_function<_Tp, _Tp, _Tp>
 188:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 189:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 190:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _Tp
 191:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 192:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x * __y; }
 193:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 194:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 195:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 196:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 197:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct divides : public binary_function<_Tp, _Tp, _Tp>
 198:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 199:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 200:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _Tp
 201:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 202:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x / __y; }
 203:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 204:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 205:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 206:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 207:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct modulus : public binary_function<_Tp, _Tp, _Tp>
 208:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 209:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 210:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _Tp
 211:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 212:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x % __y; }
 213:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 214:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 215:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 216:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 217:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct negate : public unary_function<_Tp, _Tp>
 218:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 219:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 220:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _Tp
 221:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x) const
 222:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return -__x; }
 223:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 224:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 225:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #if __cplusplus > 201103L
 226:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 227:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #define __cpp_lib_transparent_operators 201510
ARM GAS  /tmp/ccU23Djm.s 			page 431


 228:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 229:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<>
 230:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct plus<void>
 231:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 232:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 233:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 234:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	auto
 235:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 236:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 237:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 238:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }
 239:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 240:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 241:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 242:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 243:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 244:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<>
 245:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct minus<void>
 246:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 247:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 248:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 249:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	auto
 250:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 251:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 252:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 253:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }
 254:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 255:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 256:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 257:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 258:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 259:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<>
 260:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct multiplies<void>
 261:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 262:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 263:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 264:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	auto
 265:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 266:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 267:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 268:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }
 269:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 270:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 271:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 272:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 273:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 274:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<>
 275:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct divides<void>
 276:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 277:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 278:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 279:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	auto
 280:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 281:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 282:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 283:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }
 284:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 432


 285:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 286:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 287:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 288:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 289:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<>
 290:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct modulus<void>
 291:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 292:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 293:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 294:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	auto
 295:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 296:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 297:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 298:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }
 299:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 300:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 301:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 302:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 303:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 304:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<>
 305:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct negate<void>
 306:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 307:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       template <typename _Tp>
 308:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 309:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	auto
 310:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 311:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	noexcept(noexcept(-std::forward<_Tp>(__t)))
 312:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	-> decltype(-std::forward<_Tp>(__t))
 313:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 	{ return -std::forward<_Tp>(__t); }
 314:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 315:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 316:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 317:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #endif
 318:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /** @}  */
 319:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 320:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   // 20.3.3 comparisons
 321:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /** @defgroup comparison_functors Comparison Classes
 322:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    * @ingroup functors
 323:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
 324:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  The library provides six wrapper functors for all the basic comparisons
 325:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  in C++, like @c <.
 326:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *
 327:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    *  @{
 328:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****    */
 329:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #if __cplusplus > 201103L
 330:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 331:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct equal_to;
 332:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 333:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 334:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct not_equal_to;
 335:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 336:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 337:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct greater;
 338:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 339:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 340:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct less;
 341:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
ARM GAS  /tmp/ccU23Djm.s 			page 433


 342:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 343:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct greater_equal;
 344:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 345:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp = void>
 346:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct less_equal;
 347:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** #endif
 348:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 349:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 350:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 351:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct equal_to : public binary_function<_Tp, _Tp, bool>
 352:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 353:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 354:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       bool
 355:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 356:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x == __y; }
 357:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 358:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 359:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 360:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 361:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct not_equal_to : public binary_function<_Tp, _Tp, bool>
 362:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 363:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 364:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       bool
 365:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 366:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x != __y; }
 367:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     };
 368:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h **** 
 369:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 370:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****   template<typename _Tp>
 371:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     struct greater : public binary_function<_Tp, _Tp, bool>
 372:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****     {
 373:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 374:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       bool
 375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 14350              		.loc 21 375 7
 14351              		.cfi_startproc
 14352              		@ args = 0, pretend = 0, frame = 16
 14353              		@ frame_needed = 1, uses_anonymous_args = 0
 14354 0000 80B5     		push	{r7, lr}
 14355              	.LCFI1144:
 14356              		.cfi_def_cfa_offset 8
 14357              		.cfi_offset 7, -8
 14358              		.cfi_offset 14, -4
 14359 0002 84B0     		sub	sp, sp, #16
 14360              	.LCFI1145:
 14361              		.cfi_def_cfa_offset 24
 14362 0004 00AF     		add	r7, sp, #0
 14363              	.LCFI1146:
 14364              		.cfi_def_cfa_register 7
 14365 0006 F860     		str	r0, [r7, #12]
 14366 0008 B960     		str	r1, [r7, #8]
 14367 000a 7A60     		str	r2, [r7, #4]
 376:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_function.h ****       { return __x > __y; }
 14368              		.loc 21 376 20
 14369 000c 7968     		ldr	r1, [r7, #4]
 14370 000e B868     		ldr	r0, [r7, #8]
 14371 0010 FFF7FEFF 		bl	_ZNK4otto3mcu9Scheduler4TaskgtERKS2_
ARM GAS  /tmp/ccU23Djm.s 			page 434


 14372 0014 0346     		mov	r3, r0
 14373              		.loc 21 376 27
 14374 0016 1846     		mov	r0, r3
 14375 0018 1037     		adds	r7, r7, #16
 14376              	.LCFI1147:
 14377              		.cfi_def_cfa_offset 8
 14378 001a BD46     		mov	sp, r7
 14379              	.LCFI1148:
 14380              		.cfi_def_cfa_register 13
 14381              		@ sp needed
 14382 001c 80BD     		pop	{r7, pc}
 14383              		.cfi_endproc
 14384              	.LFE4885:
 14386              		.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S
 14387              		.align	1
 14388              		.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_
 14389              		.syntax unified
 14390              		.thumb
 14391              		.thumb_func
 14392              		.fpu fpv4-sp-d16
 14394              	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_:
 14395              	.LFB4888:
 375:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	{
 14396              		.loc 16 375 2
 14397              		.cfi_startproc
 14398              		@ args = 0, pretend = 0, frame = 24
 14399              		@ frame_needed = 1, uses_anonymous_args = 0
 14400 0000 80B5     		push	{r7, lr}
 14401              	.LCFI1149:
 14402              		.cfi_def_cfa_offset 8
 14403              		.cfi_offset 7, -8
 14404              		.cfi_offset 14, -4
 14405 0002 86B0     		sub	sp, sp, #24
 14406              	.LCFI1150:
 14407              		.cfi_def_cfa_offset 32
 14408 0004 00AF     		add	r7, sp, #0
 14409              	.LCFI1151:
 14410              		.cfi_def_cfa_register 7
 14411 0006 F860     		str	r0, [r7, #12]
 14412 0008 B960     		str	r1, [r7, #8]
 14413 000a 7A60     		str	r2, [r7, #4]
 384:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  if (_Num)
 14414              		.loc 16 384 20
 14415 000c BA68     		ldr	r2, [r7, #8]
 14416 000e FB68     		ldr	r3, [r7, #12]
 14417 0010 D31A     		subs	r3, r2, r3
 14418 0012 7B61     		str	r3, [r7, #20]
 385:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 14419              		.loc 16 385 4
 14420 0014 7B69     		ldr	r3, [r7, #20]
 14421 0016 002B     		cmp	r3, #0
 14422 0018 05D0     		beq	.L567
 386:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	  return __result + _Num;
 14423              		.loc 16 386 23
 14424 001a 7B69     		ldr	r3, [r7, #20]
 14425 001c 1A46     		mov	r2, r3
 14426 001e F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccU23Djm.s 			page 435


 14427 0020 7868     		ldr	r0, [r7, #4]
 14428 0022 FFF7FEFF 		bl	memmove
 14429              	.L567:
 387:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h **** 	}
 14430              		.loc 16 387 22
 14431 0026 7B69     		ldr	r3, [r7, #20]
 14432 0028 7A68     		ldr	r2, [r7, #4]
 14433 002a 1344     		add	r3, r3, r2
 388:/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_algobase.h ****     };
 14434              		.loc 16 388 2
 14435 002c 1846     		mov	r0, r3
 14436 002e 1837     		adds	r7, r7, #24
 14437              	.LCFI1152:
 14438              		.cfi_def_cfa_offset 8
 14439 0030 BD46     		mov	sp, r7
 14440              	.LCFI1153:
 14441              		.cfi_def_cfa_register 13
 14442              		@ sp needed
 14443 0032 80BD     		pop	{r7, pc}
 14444              		.cfi_endproc
 14445              	.LFE4888:
 14447              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812
 14448              		.align	1
 14449              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812b18led_ca
 14450              		.syntax unified
 14451              		.thumb
 14452              		.thumb_func
 14453              		.fpu fpv4-sp-d16
 14455              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812b18led_cascade_c
 14456              	.LFB4889:
 277:Cpp/fixed_size_function.hpp ****   {
 14457              		.loc 12 277 14
 14458              		.cfi_startproc
 14459              		@ args = 0, pretend = 0, frame = 8
 14460              		@ frame_needed = 1, uses_anonymous_args = 0
 14461 0000 80B5     		push	{r7, lr}
 14462              	.LCFI1154:
 14463              		.cfi_def_cfa_offset 8
 14464              		.cfi_offset 7, -8
 14465              		.cfi_offset 14, -4
 14466 0002 82B0     		sub	sp, sp, #8
 14467              	.LCFI1155:
 14468              		.cfi_def_cfa_offset 16
 14469 0004 00AF     		add	r7, sp, #0
 14470              	.LCFI1156:
 14471              		.cfi_def_cfa_register 7
 14472 0006 7860     		str	r0, [r7, #4]
 279:Cpp/fixed_size_function.hpp ****   }
 14473              		.loc 12 279 45
 14474 0008 7868     		ldr	r0, [r7, #4]
 14475 000a FFF7FEFF 		bl	_ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv
 14476 000e 0346     		mov	r3, r0
 280:Cpp/fixed_size_function.hpp **** 
 14477              		.loc 12 280 3
 14478 0010 1846     		mov	r0, r3
 14479 0012 0837     		adds	r7, r7, #8
 14480              	.LCFI1157:
ARM GAS  /tmp/ccU23Djm.s 			page 436


 14481              		.cfi_def_cfa_offset 8
 14482 0014 BD46     		mov	sp, r7
 14483              	.LCFI1158:
 14484              		.cfi_def_cfa_register 13
 14485              		@ sp needed
 14486 0016 80BD     		pop	{r7, pc}
 14487              		.cfi_endproc
 14488              	.LFE4889:
 14490              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws
 14491              		.align	1
 14492              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws2812b18le
 14493              		.syntax unified
 14494              		.thumb
 14495              		.thumb_func
 14496              		.fpu fpv4-sp-d16
 14498              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws2812b18led_casca
 14499              	.LFB4890:
 283:Cpp/fixed_size_function.hpp ****   {
 14500              		.loc 12 283 15
 14501              		.cfi_startproc
 14502              		@ args = 0, pretend = 0, frame = 8
 14503              		@ frame_needed = 1, uses_anonymous_args = 0
 14504              		@ link register save eliminated.
 14505 0000 80B4     		push	{r7}
 14506              	.LCFI1159:
 14507              		.cfi_def_cfa_offset 4
 14508              		.cfi_offset 7, -4
 14509 0002 83B0     		sub	sp, sp, #12
 14510              	.LCFI1160:
 14511              		.cfi_def_cfa_offset 16
 14512 0004 00AF     		add	r7, sp, #0
 14513              	.LCFI1161:
 14514              		.cfi_def_cfa_register 7
 14515 0006 7860     		str	r0, [r7, #4]
 286:Cpp/fixed_size_function.hpp **** 
 14516              		.loc 12 286 3
 14517 0008 00BF     		nop
 14518 000a 0C37     		adds	r7, r7, #12
 14519              	.LCFI1162:
 14520              		.cfi_def_cfa_offset 4
 14521 000c BD46     		mov	sp, r7
 14522              	.LCFI1163:
 14523              		.cfi_def_cfa_register 13
 14524              		@ sp needed
 14525 000e 5DF8047B 		ldr	r7, [sp], #4
 14526              	.LCFI1164:
 14527              		.cfi_restore 7
 14528              		.cfi_def_cfa_offset 0
 14529 0012 7047     		bx	lr
 14530              		.cfi_endproc
 14531              	.LFE4890:
 14533              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812
 14534              		.align	1
 14535              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812b18led_ca
 14536              		.syntax unified
 14537              		.thumb
 14538              		.thumb_func
ARM GAS  /tmp/ccU23Djm.s 			page 437


 14539              		.fpu fpv4-sp-d16
 14541              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812b18led_cascade_c
 14542              	.LFB4891:
 307:Cpp/fixed_size_function.hpp ****   {}
 14543              		.loc 12 307 8
 14544              		.cfi_startproc
 14545              		@ args = 0, pretend = 0, frame = 8
 14546              		@ frame_needed = 1, uses_anonymous_args = 0
 14547              		@ link register save eliminated.
 14548 0000 80B4     		push	{r7}
 14549              	.LCFI1165:
 14550              		.cfi_def_cfa_offset 4
 14551              		.cfi_offset 7, -4
 14552 0002 83B0     		sub	sp, sp, #12
 14553              	.LCFI1166:
 14554              		.cfi_def_cfa_offset 16
 14555 0004 00AF     		add	r7, sp, #0
 14556              	.LCFI1167:
 14557              		.cfi_def_cfa_register 7
 14558 0006 7860     		str	r0, [r7, #4]
 14559 0008 3970     		strb	r1, [r7]
 308:Cpp/fixed_size_function.hpp **** 
 14560              		.loc 12 308 4
 14561 000a 00BF     		nop
 14562 000c 0C37     		adds	r7, r7, #12
 14563              	.LCFI1168:
 14564              		.cfi_def_cfa_offset 4
 14565 000e BD46     		mov	sp, r7
 14566              	.LCFI1169:
 14567              		.cfi_def_cfa_register 13
 14568              		@ sp needed
 14569 0010 5DF8047B 		ldr	r7, [sp], #4
 14570              	.LCFI1170:
 14571              		.cfi_restore 7
 14572              		.cfi_def_cfa_offset 0
 14573 0014 7047     		bx	lr
 14574              		.cfi_endproc
 14575              	.LFE4891:
 14577              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812
 14578              		.align	1
 14579              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_ca
 14580              		.syntax unified
 14581              		.thumb
 14582              		.thumb_func
 14583              		.fpu fpv4-sp-d16
 14585              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_cascade_c
 14586              	.LFB4892:
 311:Cpp/fixed_size_function.hpp ****   {
 14587              		.loc 12 311 8
 14588              		.cfi_startproc
 14589              		@ args = 0, pretend = 0, frame = 8
 14590              		@ frame_needed = 1, uses_anonymous_args = 0
 14591              		@ link register save eliminated.
 14592 0000 80B4     		push	{r7}
 14593              	.LCFI1171:
 14594              		.cfi_def_cfa_offset 4
 14595              		.cfi_offset 7, -4
ARM GAS  /tmp/ccU23Djm.s 			page 438


 14596 0002 83B0     		sub	sp, sp, #12
 14597              	.LCFI1172:
 14598              		.cfi_def_cfa_offset 16
 14599 0004 00AF     		add	r7, sp, #0
 14600              	.LCFI1173:
 14601              		.cfi_def_cfa_register 7
 14602 0006 7860     		str	r0, [r7, #4]
 14603 0008 3970     		strb	r1, [r7]
 313:Cpp/fixed_size_function.hpp ****   }
 14604              		.loc 12 313 5
 14605 000a 7B68     		ldr	r3, [r7, #4]
 14606 000c 034A     		ldr	r2, .L574
 14607 000e 9A60     		str	r2, [r3, #8]
 14608              		.loc 12 314 3
 14609 0010 00BF     		nop
 14610 0012 0C37     		adds	r7, r7, #12
 14611              	.LCFI1174:
 14612              		.cfi_def_cfa_offset 4
 14613 0014 BD46     		mov	sp, r7
 14614              	.LCFI1175:
 14615              		.cfi_def_cfa_register 13
 14616              		@ sp needed
 14617 0016 5DF8047B 		ldr	r7, [sp], #4
 14618              	.LCFI1176:
 14619              		.cfi_restore 7
 14620              		.cfi_def_cfa_offset 0
 14621 001a 7047     		bx	lr
 14622              	.L575:
 14623              		.align	2
 14624              	.L574:
 14625 001c 00000000 		.word	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812b18led_ca
 14626              		.cfi_endproc
 14627              	.LFE4892:
 14629              		.section	.text._ZNKSt5arrayIhLj648EE4sizeEv,"axG",%progbits,_ZNKSt5arrayIhLj648EE4sizeEv,comdat
 14630              		.align	1
 14631              		.weak	_ZNKSt5arrayIhLj648EE4sizeEv
 14632              		.syntax unified
 14633              		.thumb
 14634              		.thumb_func
 14635              		.fpu fpv4-sp-d16
 14637              	_ZNKSt5arrayIhLj648EE4sizeEv:
 14638              	.LFB4893:
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 14639              		.loc 8 175 7
 14640              		.cfi_startproc
 14641              		@ args = 0, pretend = 0, frame = 8
 14642              		@ frame_needed = 1, uses_anonymous_args = 0
 14643              		@ link register save eliminated.
 14644 0000 80B4     		push	{r7}
 14645              	.LCFI1177:
 14646              		.cfi_def_cfa_offset 4
 14647              		.cfi_offset 7, -4
 14648 0002 83B0     		sub	sp, sp, #12
 14649              	.LCFI1178:
 14650              		.cfi_def_cfa_offset 16
 14651 0004 00AF     		add	r7, sp, #0
 14652              	.LCFI1179:
ARM GAS  /tmp/ccU23Djm.s 			page 439


 14653              		.cfi_def_cfa_register 7
 14654 0006 7860     		str	r0, [r7, #4]
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 14655              		.loc 8 175 38
 14656 0008 4FF42273 		mov	r3, #648
 175:/usr/arm-none-eabi/include/c++/9.3.0/array **** 
 14657              		.loc 8 175 43
 14658 000c 1846     		mov	r0, r3
 14659 000e 0C37     		adds	r7, r7, #12
 14660              	.LCFI1180:
 14661              		.cfi_def_cfa_offset 4
 14662 0010 BD46     		mov	sp, r7
 14663              	.LCFI1181:
 14664              		.cfi_def_cfa_register 13
 14665              		@ sp needed
 14666 0012 5DF8047B 		ldr	r7, [sp], #4
 14667              	.LCFI1182:
 14668              		.cfi_restore 7
 14669              		.cfi_def_cfa_offset 0
 14670 0016 7047     		bx	lr
 14671              		.cfi_endproc
 14672              	.LFE4893:
 14674              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_,"axG"
 14675              		.align	1
 14676              		.weak	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_
 14677              		.syntax unified
 14678              		.thumb
 14679              		.thumb_func
 14680              		.fpu fpv4-sp-d16
 14682              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_:
 14683              	.LFB4894:
 295:Cpp/fixed_size_function.hpp ****   {
 14684              		.loc 12 295 15
 14685              		.cfi_startproc
 14686              		@ args = 0, pretend = 0, frame = 8
 14687              		@ frame_needed = 1, uses_anonymous_args = 0
 14688 0000 90B5     		push	{r4, r7, lr}
 14689              	.LCFI1183:
 14690              		.cfi_def_cfa_offset 12
 14691              		.cfi_offset 4, -12
 14692              		.cfi_offset 7, -8
 14693              		.cfi_offset 14, -4
 14694 0002 83B0     		sub	sp, sp, #12
 14695              	.LCFI1184:
 14696              		.cfi_def_cfa_offset 24
 14697 0004 00AF     		add	r7, sp, #0
 14698              	.LCFI1185:
 14699              		.cfi_def_cfa_register 7
 14700 0006 7860     		str	r0, [r7, #4]
 14701 0008 3960     		str	r1, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14702              		.loc 12 297 33
 14703 000a 7868     		ldr	r0, [r7, #4]
 14704 000c FFF7FEFF 		bl	_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_
 14705 0010 0346     		mov	r3, r0
 297:Cpp/fixed_size_function.hpp ****   }
 14706              		.loc 12 297 5
ARM GAS  /tmp/ccU23Djm.s 			page 440


 14707 0012 1C68     		ldr	r4, [r3]
 297:Cpp/fixed_size_function.hpp ****   }
 14708              		.loc 12 297 10
 14709 0014 3B68     		ldr	r3, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14710              		.loc 12 297 5
 14711 0016 1946     		mov	r1, r3
 14712 0018 0420     		movs	r0, #4
 14713 001a FFF7FEFF 		bl	_ZnwjPv
 14714 001e 0346     		mov	r3, r0
 14715 0020 1C60     		str	r4, [r3]
 298:Cpp/fixed_size_function.hpp **** 
 14716              		.loc 12 298 3
 14717 0022 00BF     		nop
 14718 0024 0C37     		adds	r7, r7, #12
 14719              	.LCFI1186:
 14720              		.cfi_def_cfa_offset 12
 14721 0026 BD46     		mov	sp, r7
 14722              	.LCFI1187:
 14723              		.cfi_def_cfa_register 13
 14724              		@ sp needed
 14725 0028 90BD     		pop	{r4, r7, pc}
 14726              		.cfi_endproc
 14727              	.LFE4894:
 14729              		.section	.text._ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_,"axG",%progbits,_ZNS
 14730              		.align	1
 14731              		.weak	_ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_
 14732              		.syntax unified
 14733              		.thumb
 14734              		.thumb_func
 14735              		.fpu fpv4-sp-d16
 14737              	_ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_:
 14738              	.LFB4895:
  59:/usr/arm-none-eabi/include/c++/9.3.0/array ****       { return const_cast<_Tp*>(__t); }
 14739              		.loc 8 59 7
 14740              		.cfi_startproc
 14741              		@ args = 0, pretend = 0, frame = 8
 14742              		@ frame_needed = 1, uses_anonymous_args = 0
 14743              		@ link register save eliminated.
 14744 0000 80B4     		push	{r7}
 14745              	.LCFI1188:
 14746              		.cfi_def_cfa_offset 4
 14747              		.cfi_offset 7, -4
 14748 0002 83B0     		sub	sp, sp, #12
 14749              	.LCFI1189:
 14750              		.cfi_def_cfa_offset 16
 14751 0004 00AF     		add	r7, sp, #0
 14752              	.LCFI1190:
 14753              		.cfi_def_cfa_register 7
 14754 0006 7860     		str	r0, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 14755              		.loc 8 60 36
 14756 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/arm-none-eabi/include/c++/9.3.0/array ****     };
 14757              		.loc 8 60 39
 14758 000a 1846     		mov	r0, r3
 14759 000c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccU23Djm.s 			page 441


 14760              	.LCFI1191:
 14761              		.cfi_def_cfa_offset 4
 14762 000e BD46     		mov	sp, r7
 14763              	.LCFI1192:
 14764              		.cfi_def_cfa_register 13
 14765              		@ sp needed
 14766 0010 5DF8047B 		ldr	r7, [sp], #4
 14767              	.LCFI1193:
 14768              		.cfi_restore 7
 14769              		.cfi_def_cfa_offset 0
 14770 0014 7047     		bx	lr
 14771              		.cfi_endproc
 14772              	.LFE4895:
 14774              		.section	.text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZ14OTTO_main_loopE
 14775              		.align	1
 14776              		.syntax unified
 14777              		.thumb
 14778              		.thumb_func
 14779              		.fpu fpv4-sp-d16
 14781              	_ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZ14OTTO_main_loopEUlvE_EEvPvS5_:
 14782              	.LFB4896:
 295:Cpp/fixed_size_function.hpp ****   {
 14783              		.loc 12 295 15
 14784              		.cfi_startproc
 14785              		@ args = 0, pretend = 0, frame = 8
 14786              		@ frame_needed = 1, uses_anonymous_args = 0
 14787 0000 80B5     		push	{r7, lr}
 14788              	.LCFI1194:
 14789              		.cfi_def_cfa_offset 8
 14790              		.cfi_offset 7, -8
 14791              		.cfi_offset 14, -4
 14792 0002 82B0     		sub	sp, sp, #8
 14793              	.LCFI1195:
 14794              		.cfi_def_cfa_offset 16
 14795 0004 00AF     		add	r7, sp, #0
 14796              	.LCFI1196:
 14797              		.cfi_def_cfa_register 7
 14798 0006 7860     		str	r0, [r7, #4]
 14799 0008 3960     		str	r1, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14800              		.loc 12 297 33
 14801 000a 7868     		ldr	r0, [r7, #4]
 14802 000c FFF7FEFF 		bl	_ZSt4moveIRZ14OTTO_main_loopEUlvE_EONSt16remove_referenceIT_E4typeEOS3_
 297:Cpp/fixed_size_function.hpp ****   }
 14803              		.loc 12 297 10
 14804 0010 3B68     		ldr	r3, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14805              		.loc 12 297 5
 14806 0012 1946     		mov	r1, r3
 14807 0014 0120     		movs	r0, #1
 14808 0016 FFF7FEFF 		bl	_ZnwjPv
 298:Cpp/fixed_size_function.hpp **** 
 14809              		.loc 12 298 3
 14810 001a 00BF     		nop
 14811 001c 0837     		adds	r7, r7, #8
 14812              	.LCFI1197:
 14813              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccU23Djm.s 			page 442


 14814 001e BD46     		mov	sp, r7
 14815              	.LCFI1198:
 14816              		.cfi_def_cfa_register 13
 14817              		@ sp needed
 14818 0020 80BD     		pop	{r7, pc}
 14819              		.cfi_endproc
 14820              	.LFE4896:
 14822              		.section	.text._ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj
 14823              		.align	1
 14824              		.weak	_ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14con
 14825              		.syntax unified
 14826              		.thumb
 14827              		.thumb_func
 14828              		.fpu fpv4-sp-d16
 14830              	_ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_
 14831              	.LFB4954:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 14832              		.loc 13 99 5
 14833              		.cfi_startproc
 14834              		@ args = 0, pretend = 0, frame = 8
 14835              		@ frame_needed = 1, uses_anonymous_args = 0
 14836              		@ link register save eliminated.
 14837 0000 80B4     		push	{r7}
 14838              	.LCFI1199:
 14839              		.cfi_def_cfa_offset 4
 14840              		.cfi_offset 7, -4
 14841 0002 83B0     		sub	sp, sp, #12
 14842              	.LCFI1200:
 14843              		.cfi_def_cfa_offset 16
 14844 0004 00AF     		add	r7, sp, #0
 14845              	.LCFI1201:
 14846              		.cfi_def_cfa_register 7
 14847 0006 7860     		str	r0, [r7, #4]
 14848              		.loc 13 100 74
 14849 0008 7B68     		ldr	r3, [r7, #4]
 14850              		.loc 13 100 77
 14851 000a 1846     		mov	r0, r3
 14852 000c 0C37     		adds	r7, r7, #12
 14853              	.LCFI1202:
 14854              		.cfi_def_cfa_offset 4
 14855 000e BD46     		mov	sp, r7
 14856              	.LCFI1203:
 14857              		.cfi_def_cfa_register 13
 14858              		@ sp needed
 14859 0010 5DF8047B 		ldr	r7, [sp], #4
 14860              	.LCFI1204:
 14861              		.cfi_restore 7
 14862              		.cfi_def_cfa_offset 0
 14863 0014 7047     		bx	lr
 14864              		.cfi_endproc
 14865              	.LFE4954:
 14867              		.section	.text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812
 14868              		.align	1
 14869              		.weak	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812b18led_ca
 14870              		.syntax unified
 14871              		.thumb
 14872              		.thumb_func
ARM GAS  /tmp/ccU23Djm.s 			page 443


 14873              		.fpu fpv4-sp-d16
 14875              	_ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812b18led_cascade_c
 14876              	.LFB4956:
 295:Cpp/fixed_size_function.hpp ****   {
 14877              		.loc 12 295 15
 14878              		.cfi_startproc
 14879              		@ args = 0, pretend = 0, frame = 8
 14880              		@ frame_needed = 1, uses_anonymous_args = 0
 14881 0000 90B5     		push	{r4, r7, lr}
 14882              	.LCFI1205:
 14883              		.cfi_def_cfa_offset 12
 14884              		.cfi_offset 4, -12
 14885              		.cfi_offset 7, -8
 14886              		.cfi_offset 14, -4
 14887 0002 83B0     		sub	sp, sp, #12
 14888              	.LCFI1206:
 14889              		.cfi_def_cfa_offset 24
 14890 0004 00AF     		add	r7, sp, #0
 14891              	.LCFI1207:
 14892              		.cfi_def_cfa_register 7
 14893 0006 7860     		str	r0, [r7, #4]
 14894 0008 3960     		str	r1, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14895              		.loc 12 297 33
 14896 000a 7868     		ldr	r0, [r7, #4]
 14897 000c FFF7FEFF 		bl	_ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EONS
 14898 0010 0446     		mov	r4, r0
 297:Cpp/fixed_size_function.hpp ****   }
 14899              		.loc 12 297 10
 14900 0012 3B68     		ldr	r3, [r7]
 297:Cpp/fixed_size_function.hpp ****   }
 14901              		.loc 12 297 5
 14902 0014 1946     		mov	r1, r3
 14903 0016 0C20     		movs	r0, #12
 14904 0018 FFF7FEFF 		bl	_ZnwjPv
 14905 001c 0346     		mov	r3, r0
 14906 001e 2246     		mov	r2, r4
 14907 0020 07CA     		ldm	r2, {r0, r1, r2}
 14908 0022 83E80700 		stm	r3, {r0, r1, r2}
 298:Cpp/fixed_size_function.hpp **** 
 14909              		.loc 12 298 3
 14910 0026 00BF     		nop
 14911 0028 0C37     		adds	r7, r7, #12
 14912              	.LCFI1208:
 14913              		.cfi_def_cfa_offset 12
 14914 002a BD46     		mov	sp, r7
 14915              	.LCFI1209:
 14916              		.cfi_def_cfa_register 13
 14917              		@ sp needed
 14918 002c 90BD     		pop	{r4, r7, pc}
 14919              		.cfi_endproc
 14920              	.LFE4956:
 14922              		.section	.text._ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_,"axG",%progbits,_ZSt4moveIRPF
 14923              		.align	1
 14924              		.weak	_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_
 14925              		.syntax unified
 14926              		.thumb
ARM GAS  /tmp/ccU23Djm.s 			page 444


 14927              		.thumb_func
 14928              		.fpu fpv4-sp-d16
 14930              	_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_:
 14931              	.LFB4957:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 14932              		.loc 13 99 5
 14933              		.cfi_startproc
 14934              		@ args = 0, pretend = 0, frame = 8
 14935              		@ frame_needed = 1, uses_anonymous_args = 0
 14936              		@ link register save eliminated.
 14937 0000 80B4     		push	{r7}
 14938              	.LCFI1210:
 14939              		.cfi_def_cfa_offset 4
 14940              		.cfi_offset 7, -4
 14941 0002 83B0     		sub	sp, sp, #12
 14942              	.LCFI1211:
 14943              		.cfi_def_cfa_offset 16
 14944 0004 00AF     		add	r7, sp, #0
 14945              	.LCFI1212:
 14946              		.cfi_def_cfa_register 7
 14947 0006 7860     		str	r0, [r7, #4]
 14948              		.loc 13 100 74
 14949 0008 7B68     		ldr	r3, [r7, #4]
 14950              		.loc 13 100 77
 14951 000a 1846     		mov	r0, r3
 14952 000c 0C37     		adds	r7, r7, #12
 14953              	.LCFI1213:
 14954              		.cfi_def_cfa_offset 4
 14955 000e BD46     		mov	sp, r7
 14956              	.LCFI1214:
 14957              		.cfi_def_cfa_register 13
 14958              		@ sp needed
 14959 0010 5DF8047B 		ldr	r7, [sp], #4
 14960              	.LCFI1215:
 14961              		.cfi_restore 7
 14962              		.cfi_def_cfa_offset 0
 14963 0014 7047     		bx	lr
 14964              		.cfi_endproc
 14965              	.LFE4957:
 14967              		.section	.text._ZSt4moveIRZ14OTTO_main_loopEUlvE_EONSt16remove_referenceIT_E4typeEOS3_,"ax",%progb
 14968              		.align	1
 14969              		.syntax unified
 14970              		.thumb
 14971              		.thumb_func
 14972              		.fpu fpv4-sp-d16
 14974              	_ZSt4moveIRZ14OTTO_main_loopEUlvE_EONSt16remove_referenceIT_E4typeEOS3_:
 14975              	.LFB4958:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 14976              		.loc 13 99 5
 14977              		.cfi_startproc
 14978              		@ args = 0, pretend = 0, frame = 8
 14979              		@ frame_needed = 1, uses_anonymous_args = 0
 14980              		@ link register save eliminated.
 14981 0000 80B4     		push	{r7}
 14982              	.LCFI1216:
 14983              		.cfi_def_cfa_offset 4
 14984              		.cfi_offset 7, -4
ARM GAS  /tmp/ccU23Djm.s 			page 445


 14985 0002 83B0     		sub	sp, sp, #12
 14986              	.LCFI1217:
 14987              		.cfi_def_cfa_offset 16
 14988 0004 00AF     		add	r7, sp, #0
 14989              	.LCFI1218:
 14990              		.cfi_def_cfa_register 7
 14991 0006 7860     		str	r0, [r7, #4]
 14992              		.loc 13 100 74
 14993 0008 7B68     		ldr	r3, [r7, #4]
 14994              		.loc 13 100 77
 14995 000a 1846     		mov	r0, r3
 14996 000c 0C37     		adds	r7, r7, #12
 14997              	.LCFI1219:
 14998              		.cfi_def_cfa_offset 4
 14999 000e BD46     		mov	sp, r7
 15000              	.LCFI1220:
 15001              		.cfi_def_cfa_register 13
 15002              		@ sp needed
 15003 0010 5DF8047B 		ldr	r7, [sp], #4
 15004              	.LCFI1221:
 15005              		.cfi_restore 7
 15006              		.cfi_def_cfa_offset 0
 15007 0014 7047     		bx	lr
 15008              		.cfi_endproc
 15009              	.LFE4958:
 15011              		.section	.text._ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_E
 15012              		.align	1
 15013              		.weak	_ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_E
 15014              		.syntax unified
 15015              		.thumb
 15016              		.thumb_func
 15017              		.fpu fpv4-sp-d16
 15019              	_ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EONSt16r
 15020              	.LFB4990:
  99:/usr/arm-none-eabi/include/c++/9.3.0/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 15021              		.loc 13 99 5
 15022              		.cfi_startproc
 15023              		@ args = 0, pretend = 0, frame = 8
 15024              		@ frame_needed = 1, uses_anonymous_args = 0
 15025              		@ link register save eliminated.
 15026 0000 80B4     		push	{r7}
 15027              	.LCFI1222:
 15028              		.cfi_def_cfa_offset 4
 15029              		.cfi_offset 7, -4
 15030 0002 83B0     		sub	sp, sp, #12
 15031              	.LCFI1223:
 15032              		.cfi_def_cfa_offset 16
 15033 0004 00AF     		add	r7, sp, #0
 15034              	.LCFI1224:
 15035              		.cfi_def_cfa_register 7
 15036 0006 7860     		str	r0, [r7, #4]
 15037              		.loc 13 100 74
 15038 0008 7B68     		ldr	r3, [r7, #4]
 15039              		.loc 13 100 77
 15040 000a 1846     		mov	r0, r3
 15041 000c 0C37     		adds	r7, r7, #12
 15042              	.LCFI1225:
ARM GAS  /tmp/ccU23Djm.s 			page 446


 15043              		.cfi_def_cfa_offset 4
 15044 000e BD46     		mov	sp, r7
 15045              	.LCFI1226:
 15046              		.cfi_def_cfa_register 13
 15047              		@ sp needed
 15048 0010 5DF8047B 		ldr	r7, [sp], #4
 15049              	.LCFI1227:
 15050              		.cfi_restore 7
 15051              		.cfi_def_cfa_offset 0
 15052 0014 7047     		bx	lr
 15053              		.cfi_endproc
 15054              	.LFE4990:
 15056              		.section	.rodata
 15057 001e 0000     		.align	2
 15058              	.LC1:
 15059 0020 000C0240 		.word	1073875968
 15060 0024 04000000 		.word	4
 15061 0028 00       		.byte	0
 15062 0029 000000   		.space	3
 15063              		.align	2
 15064              	.LC2:
 15065 002c 000C0240 		.word	1073875968
 15066 0030 08000000 		.word	8
 15067 0034 00       		.byte	0
 15068 0035 000000   		.space	3
 15069              		.align	2
 15070              	.LC3:
 15071 0038 000C0240 		.word	1073875968
 15072 003c 10000000 		.word	16
 15073 0040 00       		.byte	0
 15074 0041 000000   		.space	3
 15075              		.align	2
 15076              	.LC4:
 15077 0044 000C0240 		.word	1073875968
 15078 0048 80000000 		.word	128
 15079 004c 00       		.byte	0
 15080 004d 000000   		.space	3
 15081              		.align	2
 15082              	.LC5:
 15083 0050 000C0240 		.word	1073875968
 15084 0054 00010000 		.word	256
 15085 0058 00       		.byte	0
 15086 0059 000000   		.space	3
 15087              		.align	2
 15088              	.LC6:
 15089 005c 000C0240 		.word	1073875968
 15090 0060 00020000 		.word	512
 15091 0064 00       		.byte	0
 15092 0065 000000   		.space	3
 15093              		.align	2
 15094              	.LC7:
 15095 0068 000C0240 		.word	1073875968
 15096 006c 00040000 		.word	1024
 15097 0070 00       		.byte	0
 15098 0071 000000   		.space	3
 15099              		.align	2
 15100              	.LC8:
ARM GAS  /tmp/ccU23Djm.s 			page 447


 15101 0074 000C0240 		.word	1073875968
 15102 0078 00080000 		.word	2048
 15103 007c 00       		.byte	0
 15104 007d 000000   		.space	3
 15105              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 15106              		.align	1
 15107              		.syntax unified
 15108              		.thumb
 15109              		.thumb_func
 15110              		.fpu fpv4-sp-d16
 15112              	_Z41__static_initialization_and_destruction_0ii:
 15113              	.LFB5017:
 159:Cpp/main.cpp  ****   }
 160:Cpp/main.cpp  **** }
 161:Cpp/main.cpp  **** }
 15114              		.loc 11 161 1
 15115              		.cfi_startproc
 15116              		@ args = 0, pretend = 0, frame = 104
 15117              		@ frame_needed = 1, uses_anonymous_args = 0
 15118 0000 90B5     		push	{r4, r7, lr}
 15119              	.LCFI1228:
 15120              		.cfi_def_cfa_offset 12
 15121              		.cfi_offset 4, -12
 15122              		.cfi_offset 7, -8
 15123              		.cfi_offset 14, -4
 15124 0002 9FB0     		sub	sp, sp, #124
 15125              	.LCFI1229:
 15126              		.cfi_def_cfa_offset 136
 15127 0004 04AF     		add	r7, sp, #16
 15128              	.LCFI1230:
 15129              		.cfi_def_cfa 7, 120
 15130 0006 7860     		str	r0, [r7, #4]
 15131 0008 3960     		str	r1, [r7]
 15132              		.loc 11 161 1
 15133 000a 7B68     		ldr	r3, [r7, #4]
 15134 000c 012B     		cmp	r3, #1
 15135 000e 40F05C82 		bne	.L593
 15136              		.loc 11 161 1 is_stmt 0 discriminator 1
 15137 0012 3B68     		ldr	r3, [r7]
 15138 0014 4FF6FF72 		movw	r2, #65535
 15139 0018 9342     		cmp	r3, r2
 15140 001a 40F05682 		bne	.L593
  10:Cpp/main.cpp  **** }
 15141              		.loc 11 10 13 is_stmt 1
 15142 001e D14A     		ldr	r2, .L594
 15143 0020 D149     		ldr	r1, .L594+4
 15144 0022 D248     		ldr	r0, .L594+8
 15145 0024 FFF7FEFF 		bl	__aeabi_atexit
  15:Cpp/main.cpp  **** 
 15146              		.loc 11 15 27
 15147 0028 D149     		ldr	r1, .L594+12
 15148 002a D248     		ldr	r0, .L594+16
 15149 002c FFF7FEFF 		bl	_ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC1ER19__SPI_HandleTypeDef
  54:Cpp/main.cpp  **** 
 15150              		.loc 11 54 1
 15151 0030 0A23     		movs	r3, #10
 15152 0032 1946     		mov	r1, r3
ARM GAS  /tmp/ccU23Djm.s 			page 448


 15153 0034 D048     		ldr	r0, .L594+20
 15154 0036 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15155 003a 0223     		movs	r3, #2
 15156 003c 1946     		mov	r1, r3
 15157 003e CF48     		ldr	r0, .L594+24
 15158 0040 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15159 0044 0523     		movs	r3, #5
 15160 0046 1946     		mov	r1, r3
 15161 0048 CD48     		ldr	r0, .L594+28
 15162 004a FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15163 004e 0823     		movs	r3, #8
 15164 0050 1946     		mov	r1, r3
 15165 0052 CC48     		ldr	r0, .L594+32
 15166 0054 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15167 0058 1F23     		movs	r3, #31
 15168 005a 1946     		mov	r1, r3
 15169 005c CA48     		ldr	r0, .L594+36
 15170 005e FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15171 0062 2A23     		movs	r3, #42
 15172 0064 1946     		mov	r1, r3
 15173 0066 C948     		ldr	r0, .L594+40
 15174 0068 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15175 006c 4FF0FF33 		mov	r3, #-1
 15176 0070 1946     		mov	r1, r3
 15177 0072 C748     		ldr	r0, .L594+44
 15178 0074 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15179 0078 3123     		movs	r3, #49
 15180 007a 1946     		mov	r1, r3
 15181 007c C548     		ldr	r0, .L594+48
 15182 007e FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15183 0082 0023     		movs	r3, #0
 15184 0084 1946     		mov	r1, r3
 15185 0086 C448     		ldr	r0, .L594+52
 15186 0088 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15187 008c 0323     		movs	r3, #3
 15188 008e 1946     		mov	r1, r3
 15189 0090 C248     		ldr	r0, .L594+56
 15190 0092 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15191 0096 0623     		movs	r3, #6
 15192 0098 1946     		mov	r1, r3
 15193 009a C148     		ldr	r0, .L594+60
 15194 009c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15195 00a0 0923     		movs	r3, #9
 15196 00a2 1946     		mov	r1, r3
 15197 00a4 BF48     		ldr	r0, .L594+64
 15198 00a6 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15199 00aa 2C23     		movs	r3, #44
 15200 00ac 1946     		mov	r1, r3
 15201 00ae BE48     		ldr	r0, .L594+68
 15202 00b0 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15203 00b4 2B23     		movs	r3, #43
 15204 00b6 1946     		mov	r1, r3
 15205 00b8 BC48     		ldr	r0, .L594+72
 15206 00ba FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15207 00be 4FF0FF33 		mov	r3, #-1
 15208 00c2 1946     		mov	r1, r3
 15209 00c4 BA48     		ldr	r0, .L594+76
ARM GAS  /tmp/ccU23Djm.s 			page 449


 15210 00c6 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15211 00ca 3323     		movs	r3, #51
 15212 00cc 1946     		mov	r1, r3
 15213 00ce B948     		ldr	r0, .L594+80
 15214 00d0 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15215 00d4 0123     		movs	r3, #1
 15216 00d6 1946     		mov	r1, r3
 15217 00d8 B748     		ldr	r0, .L594+84
 15218 00da FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15219 00de 0423     		movs	r3, #4
 15220 00e0 1946     		mov	r1, r3
 15221 00e2 B648     		ldr	r0, .L594+88
 15222 00e4 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15223 00e8 0723     		movs	r3, #7
 15224 00ea 1946     		mov	r1, r3
 15225 00ec B448     		ldr	r0, .L594+92
 15226 00ee FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15227 00f2 1923     		movs	r3, #25
 15228 00f4 1946     		mov	r1, r3
 15229 00f6 B348     		ldr	r0, .L594+96
 15230 00f8 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15231 00fc 2323     		movs	r3, #35
 15232 00fe 1946     		mov	r1, r3
 15233 0100 B148     		ldr	r0, .L594+100
 15234 0102 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15235 0106 2423     		movs	r3, #36
 15236 0108 1946     		mov	r1, r3
 15237 010a B048     		ldr	r0, .L594+104
 15238 010c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15239 0110 4FF0FF33 		mov	r3, #-1
 15240 0114 1946     		mov	r1, r3
 15241 0116 AE48     		ldr	r0, .L594+108
 15242 0118 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15243 011c 3223     		movs	r3, #50
 15244 011e 1946     		mov	r1, r3
 15245 0120 AC48     		ldr	r0, .L594+112
 15246 0122 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15247 0126 0B23     		movs	r3, #11
 15248 0128 1946     		mov	r1, r3
 15249 012a AB48     		ldr	r0, .L594+116
 15250 012c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15251 0130 1023     		movs	r3, #16
 15252 0132 1946     		mov	r1, r3
 15253 0134 A948     		ldr	r0, .L594+120
 15254 0136 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15255 013a 1523     		movs	r3, #21
 15256 013c 1946     		mov	r1, r3
 15257 013e A848     		ldr	r0, .L594+124
 15258 0140 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15259 0144 1B23     		movs	r3, #27
 15260 0146 1946     		mov	r1, r3
 15261 0148 A648     		ldr	r0, .L594+128
 15262 014a FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15263 014e 2123     		movs	r3, #33
 15264 0150 1946     		mov	r1, r3
 15265 0152 A548     		ldr	r0, .L594+132
 15266 0154 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
ARM GAS  /tmp/ccU23Djm.s 			page 450


 15267 0158 2823     		movs	r3, #40
 15268 015a 1946     		mov	r1, r3
 15269 015c A348     		ldr	r0, .L594+136
 15270 015e FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15271 0162 4FF0FF33 		mov	r3, #-1
 15272 0166 1946     		mov	r1, r3
 15273 0168 A148     		ldr	r0, .L594+140
 15274 016a FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15275 016e 2F23     		movs	r3, #47
 15276 0170 1946     		mov	r1, r3
 15277 0172 A048     		ldr	r0, .L594+144
 15278 0174 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15279 0178 0C23     		movs	r3, #12
 15280 017a 1946     		mov	r1, r3
 15281 017c 9E48     		ldr	r0, .L594+148
 15282 017e FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15283 0182 1123     		movs	r3, #17
 15284 0184 1946     		mov	r1, r3
 15285 0186 9D48     		ldr	r0, .L594+152
 15286 0188 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15287 018c 1623     		movs	r3, #22
 15288 018e 1946     		mov	r1, r3
 15289 0190 9B48     		ldr	r0, .L594+156
 15290 0192 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15291 0196 1C23     		movs	r3, #28
 15292 0198 1946     		mov	r1, r3
 15293 019a 9A48     		ldr	r0, .L594+160
 15294 019c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15295 01a0 2023     		movs	r3, #32
 15296 01a2 1946     		mov	r1, r3
 15297 01a4 9848     		ldr	r0, .L594+164
 15298 01a6 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15299 01aa 2623     		movs	r3, #38
 15300 01ac 1946     		mov	r1, r3
 15301 01ae 9748     		ldr	r0, .L594+168
 15302 01b0 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15303 01b4 4FF0FF33 		mov	r3, #-1
 15304 01b8 1946     		mov	r1, r3
 15305 01ba 9548     		ldr	r0, .L594+172
 15306 01bc FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15307 01c0 4FF0FF33 		mov	r3, #-1
 15308 01c4 1946     		mov	r1, r3
 15309 01c6 9348     		ldr	r0, .L594+176
 15310 01c8 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15311 01cc 0D23     		movs	r3, #13
 15312 01ce 1946     		mov	r1, r3
 15313 01d0 9148     		ldr	r0, .L594+180
 15314 01d2 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15315 01d6 1223     		movs	r3, #18
 15316 01d8 1946     		mov	r1, r3
 15317 01da 9048     		ldr	r0, .L594+184
 15318 01dc FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15319 01e0 1723     		movs	r3, #23
 15320 01e2 1946     		mov	r1, r3
 15321 01e4 8E48     		ldr	r0, .L594+188
 15322 01e6 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15323 01ea 1E23     		movs	r3, #30
ARM GAS  /tmp/ccU23Djm.s 			page 451


 15324 01ec 1946     		mov	r1, r3
 15325 01ee 8D48     		ldr	r0, .L594+192
 15326 01f0 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15327 01f4 2D23     		movs	r3, #45
 15328 01f6 1946     		mov	r1, r3
 15329 01f8 8B48     		ldr	r0, .L594+196
 15330 01fa FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15331 01fe 2923     		movs	r3, #41
 15332 0200 1946     		mov	r1, r3
 15333 0202 8A48     		ldr	r0, .L594+200
 15334 0204 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15335 0208 4FF0FF33 		mov	r3, #-1
 15336 020c 1946     		mov	r1, r3
 15337 020e 8848     		ldr	r0, .L594+204
 15338 0210 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15339 0214 3023     		movs	r3, #48
 15340 0216 1946     		mov	r1, r3
 15341 0218 8648     		ldr	r0, .L594+208
 15342 021a FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15343 021e 0E23     		movs	r3, #14
 15344 0220 1946     		mov	r1, r3
 15345 0222 8548     		ldr	r0, .L594+212
 15346 0224 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15347 0228 1323     		movs	r3, #19
 15348 022a 1946     		mov	r1, r3
 15349 022c 8348     		ldr	r0, .L594+216
 15350 022e FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15351 0232 1823     		movs	r3, #24
 15352 0234 1946     		mov	r1, r3
 15353 0236 8248     		ldr	r0, .L594+220
 15354 0238 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15355 023c 1D23     		movs	r3, #29
 15356 023e 1946     		mov	r1, r3
 15357 0240 8048     		ldr	r0, .L594+224
 15358 0242 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15359 0246 2223     		movs	r3, #34
 15360 0248 1946     		mov	r1, r3
 15361 024a 7F48     		ldr	r0, .L594+228
 15362 024c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15363 0250 2523     		movs	r3, #37
 15364 0252 1946     		mov	r1, r3
 15365 0254 7D48     		ldr	r0, .L594+232
 15366 0256 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15367 025a 4FF0FF33 		mov	r3, #-1
 15368 025e 1946     		mov	r1, r3
 15369 0260 7B48     		ldr	r0, .L594+236
 15370 0262 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15371 0266 3423     		movs	r3, #52
 15372 0268 1946     		mov	r1, r3
 15373 026a 7A48     		ldr	r0, .L594+240
 15374 026c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15375 0270 0F23     		movs	r3, #15
 15376 0272 1946     		mov	r1, r3
 15377 0274 7848     		ldr	r0, .L594+244
 15378 0276 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15379 027a 1423     		movs	r3, #20
 15380 027c 1946     		mov	r1, r3
ARM GAS  /tmp/ccU23Djm.s 			page 452


 15381 027e 7748     		ldr	r0, .L594+248
 15382 0280 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15383 0284 4FF0FF33 		mov	r3, #-1
 15384 0288 1946     		mov	r1, r3
 15385 028a 7548     		ldr	r0, .L594+252
 15386 028c FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15387 0290 1A23     		movs	r3, #26
 15388 0292 1946     		mov	r1, r3
 15389 0294 7348     		ldr	r0, .L594+256
 15390 0296 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15391 029a 2E23     		movs	r3, #46
 15392 029c 1946     		mov	r1, r3
 15393 029e 7248     		ldr	r0, .L594+260
 15394 02a0 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15395 02a4 2723     		movs	r3, #39
 15396 02a6 1946     		mov	r1, r3
 15397 02a8 7048     		ldr	r0, .L594+264
 15398 02aa FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15399 02ae 4FF0FF33 		mov	r3, #-1
 15400 02b2 1946     		mov	r1, r3
 15401 02b4 6E48     		ldr	r0, .L594+268
 15402 02b6 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
 15403 02ba 3523     		movs	r3, #53
 15404 02bc 1946     		mov	r1, r3
 15405 02be 6D48     		ldr	r0, .L594+272
 15406 02c0 FFF7FEFF 		bl	_ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
  56:Cpp/main.cpp  **** Encoder green_encoder = {{ENC_2_A_GPIO_Port, ENC_2_A_Pin}, {ENC_2_B_GPIO_Port, ENC_2_B_Pin}};
 15407              		.loc 11 56 9
 15408 02c4 6C4A     		ldr	r2, .L594+276
 15409 02c6 07F10803 		add	r3, r7, #8
 15410 02ca 07CA     		ldm	r2, {r0, r1, r2}
 15411 02cc 83E80700 		stm	r3, {r0, r1, r2}
 15412 02d0 6A4A     		ldr	r2, .L594+280
 15413 02d2 07F11403 		add	r3, r7, #20
 15414 02d6 07CA     		ldm	r2, {r0, r1, r2}
 15415 02d8 83E80700 		stm	r3, {r0, r1, r2}
 15416 02dc 6C46     		mov	r4, sp
 15417 02de 07F11403 		add	r3, r7, #20
 15418 02e2 93E80700 		ldm	r3, {r0, r1, r2}
 15419 02e6 84E80700 		stm	r4, {r0, r1, r2}
 15420 02ea 07F10803 		add	r3, r7, #8
 15421 02ee 0ECB     		ldm	r3, {r1, r2, r3}
 15422 02f0 6348     		ldr	r0, .L594+284
 15423 02f2 FFF7FEFF 		bl	_ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_
  57:Cpp/main.cpp  **** Encoder yellow_encoder = {{ENC_3_A_GPIO_Port, ENC_3_A_Pin}, {ENC_3_B_GPIO_Port, ENC_3_B_Pin}};
 15424              		.loc 11 57 9
 15425 02f6 634A     		ldr	r2, .L594+288
 15426 02f8 07F12003 		add	r3, r7, #32
 15427 02fc 07CA     		ldm	r2, {r0, r1, r2}
 15428 02fe 83E80700 		stm	r3, {r0, r1, r2}
 15429 0302 614A     		ldr	r2, .L594+292
 15430 0304 07F12C03 		add	r3, r7, #44
 15431 0308 07CA     		ldm	r2, {r0, r1, r2}
 15432 030a 83E80700 		stm	r3, {r0, r1, r2}
 15433 030e 6C46     		mov	r4, sp
 15434 0310 07F12C03 		add	r3, r7, #44
 15435 0314 93E80700 		ldm	r3, {r0, r1, r2}
ARM GAS  /tmp/ccU23Djm.s 			page 453


 15436 0318 84E80700 		stm	r4, {r0, r1, r2}
 15437 031c 07F12003 		add	r3, r7, #32
 15438 0320 0ECB     		ldm	r3, {r1, r2, r3}
 15439 0322 5A48     		ldr	r0, .L594+296
 15440 0324 FFF7FEFF 		bl	_ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_
  58:Cpp/main.cpp  **** Encoder red_encoder = {{ENC_4_A_GPIO_Port, ENC_4_A_Pin}, {ENC_4_B_GPIO_Port, ENC_4_B_Pin}};
 15441              		.loc 11 58 9
 15442 0328 594A     		ldr	r2, .L594+300
 15443 032a 07F13803 		add	r3, r7, #56
 15444 032e 07CA     		ldm	r2, {r0, r1, r2}
 15445 0330 83E80700 		stm	r3, {r0, r1, r2}
 15446 0334 574A     		ldr	r2, .L594+304
 15447 0336 07F14403 		add	r3, r7, #68
 15448 033a 07CA     		ldm	r2, {r0, r1, r2}
 15449 033c 83E80700 		stm	r3, {r0, r1, r2}
 15450 0340 6C46     		mov	r4, sp
 15451 0342 07F14403 		add	r3, r7, #68
 15452 0346 93E80700 		ldm	r3, {r0, r1, r2}
 15453 034a 84E80700 		stm	r4, {r0, r1, r2}
 15454 034e 07F13803 		add	r3, r7, #56
 15455 0352 0ECB     		ldm	r3, {r1, r2, r3}
 15456 0354 5048     		ldr	r0, .L594+308
 15457 0356 FFF7FEFF 		bl	_ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_
  59:Cpp/main.cpp  **** 
 15458              		.loc 11 59 9
 15459 035a 504A     		ldr	r2, .L594+312
 15460 035c 07F15003 		add	r3, r7, #80
 15461 0360 07CA     		ldm	r2, {r0, r1, r2}
 15462 0362 9DE0     		b	.L595
 15463              	.L596:
 15464              		.align	2
 15465              	.L594:
 15466 0364 00000000 		.word	__dso_handle
 15467 0368 00000000 		.word	_ZN4otto3mcu9SchedulerD1Ev
 15468 036c 00000000 		.word	_ZN4otto3mcu9main_loopE
 15469 0370 00000000 		.word	hspi3
 15470 0374 00000000 		.word	leds
 15471 0378 00000000 		.word	key_table
 15472 037c 08000000 		.word	key_table+8
 15473 0380 10000000 		.word	key_table+16
 15474 0384 18000000 		.word	key_table+24
 15475 0388 20000000 		.word	key_table+32
 15476 038c 28000000 		.word	key_table+40
 15477 0390 30000000 		.word	key_table+48
 15478 0394 38000000 		.word	key_table+56
 15479 0398 40000000 		.word	key_table+64
 15480 039c 48000000 		.word	key_table+72
 15481 03a0 50000000 		.word	key_table+80
 15482 03a4 58000000 		.word	key_table+88
 15483 03a8 60000000 		.word	key_table+96
 15484 03ac 68000000 		.word	key_table+104
 15485 03b0 70000000 		.word	key_table+112
 15486 03b4 78000000 		.word	key_table+120
 15487 03b8 80000000 		.word	key_table+128
 15488 03bc 88000000 		.word	key_table+136
 15489 03c0 90000000 		.word	key_table+144
 15490 03c4 98000000 		.word	key_table+152
ARM GAS  /tmp/ccU23Djm.s 			page 454


 15491 03c8 A0000000 		.word	key_table+160
 15492 03cc A8000000 		.word	key_table+168
 15493 03d0 B0000000 		.word	key_table+176
 15494 03d4 B8000000 		.word	key_table+184
 15495 03d8 C0000000 		.word	key_table+192
 15496 03dc C8000000 		.word	key_table+200
 15497 03e0 D0000000 		.word	key_table+208
 15498 03e4 D8000000 		.word	key_table+216
 15499 03e8 E0000000 		.word	key_table+224
 15500 03ec E8000000 		.word	key_table+232
 15501 03f0 F0000000 		.word	key_table+240
 15502 03f4 F8000000 		.word	key_table+248
 15503 03f8 00010000 		.word	key_table+256
 15504 03fc 08010000 		.word	key_table+264
 15505 0400 10010000 		.word	key_table+272
 15506 0404 18010000 		.word	key_table+280
 15507 0408 20010000 		.word	key_table+288
 15508 040c 28010000 		.word	key_table+296
 15509 0410 30010000 		.word	key_table+304
 15510 0414 38010000 		.word	key_table+312
 15511 0418 40010000 		.word	key_table+320
 15512 041c 48010000 		.word	key_table+328
 15513 0420 50010000 		.word	key_table+336
 15514 0424 58010000 		.word	key_table+344
 15515 0428 60010000 		.word	key_table+352
 15516 042c 68010000 		.word	key_table+360
 15517 0430 70010000 		.word	key_table+368
 15518 0434 78010000 		.word	key_table+376
 15519 0438 80010000 		.word	key_table+384
 15520 043c 88010000 		.word	key_table+392
 15521 0440 90010000 		.word	key_table+400
 15522 0444 98010000 		.word	key_table+408
 15523 0448 A0010000 		.word	key_table+416
 15524 044c A8010000 		.word	key_table+424
 15525 0450 B0010000 		.word	key_table+432
 15526 0454 B8010000 		.word	key_table+440
 15527 0458 C0010000 		.word	key_table+448
 15528 045c C8010000 		.word	key_table+456
 15529 0460 D0010000 		.word	key_table+464
 15530 0464 D8010000 		.word	key_table+472
 15531 0468 E0010000 		.word	key_table+480
 15532 046c E8010000 		.word	key_table+488
 15533 0470 F0010000 		.word	key_table+496
 15534 0474 F8010000 		.word	key_table+504
 15535 0478 20000000 		.word	.LC1
 15536 047c 2C000000 		.word	.LC2
 15537 0480 00000000 		.word	blue_encoder
 15538 0484 38000000 		.word	.LC3
 15539 0488 44000000 		.word	.LC4
 15540 048c 00000000 		.word	green_encoder
 15541 0490 50000000 		.word	.LC5
 15542 0494 5C000000 		.word	.LC6
 15543 0498 00000000 		.word	yellow_encoder
 15544 049c 68000000 		.word	.LC7
 15545              	.L595:
 15546 04a0 83E80700 		stm	r3, {r0, r1, r2}
 15547 04a4 0B4A     		ldr	r2, .L597
ARM GAS  /tmp/ccU23Djm.s 			page 455


 15548 04a6 07F15C03 		add	r3, r7, #92
 15549 04aa 07CA     		ldm	r2, {r0, r1, r2}
 15550 04ac 83E80700 		stm	r3, {r0, r1, r2}
 15551 04b0 6C46     		mov	r4, sp
 15552 04b2 07F15C03 		add	r3, r7, #92
 15553 04b6 93E80700 		ldm	r3, {r0, r1, r2}
 15554 04ba 84E80700 		stm	r4, {r0, r1, r2}
 15555 04be 07F15003 		add	r3, r7, #80
 15556 04c2 0ECB     		ldm	r3, {r1, r2, r3}
 15557 04c4 0448     		ldr	r0, .L597+4
 15558 04c6 FFF7FEFF 		bl	_ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_
 15559              	.L593:
 15560              		.loc 11 161 1
 15561 04ca 00BF     		nop
 15562 04cc 6C37     		adds	r7, r7, #108
 15563              	.LCFI1231:
 15564              		.cfi_def_cfa_offset 12
 15565 04ce BD46     		mov	sp, r7
 15566              	.LCFI1232:
 15567              		.cfi_def_cfa_register 13
 15568              		@ sp needed
 15569 04d0 90BD     		pop	{r4, r7, pc}
 15570              	.L598:
 15571 04d2 00BF     		.align	2
 15572              	.L597:
 15573 04d4 74000000 		.word	.LC8
 15574 04d8 00000000 		.word	red_encoder
 15575              		.cfi_endproc
 15576              	.LFE5017:
 15578              		.section	.text._GLOBAL__sub_I__ZN4otto3mcu9main_loopE,"ax",%progbits
 15579              		.align	1
 15580              		.syntax unified
 15581              		.thumb
 15582              		.thumb_func
 15583              		.fpu fpv4-sp-d16
 15585              	_GLOBAL__sub_I__ZN4otto3mcu9main_loopE:
 15586              	.LFB5018:
 15587              		.loc 11 161 1
 15588              		.cfi_startproc
 15589              		@ args = 0, pretend = 0, frame = 0
 15590              		@ frame_needed = 1, uses_anonymous_args = 0
 15591 0000 80B5     		push	{r7, lr}
 15592              	.LCFI1233:
 15593              		.cfi_def_cfa_offset 8
 15594              		.cfi_offset 7, -8
 15595              		.cfi_offset 14, -4
 15596 0002 00AF     		add	r7, sp, #0
 15597              	.LCFI1234:
 15598              		.cfi_def_cfa_register 7
 15599              		.loc 11 161 1
 15600 0004 4FF6FF71 		movw	r1, #65535
 15601 0008 0120     		movs	r0, #1
 15602 000a FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 15603 000e 80BD     		pop	{r7, pc}
 15604              		.cfi_endproc
 15605              	.LFE5018:
 15607              		.section	.init_array,"aw",%init_array
ARM GAS  /tmp/ccU23Djm.s 			page 456


 15608              		.align	2
 15609 0000 00000000 		.word	_GLOBAL__sub_I__ZN4otto3mcu9main_loopE(target1)
 15610              		.text
 15611              	.Letext0:
 15612              		.file 22 "/usr/arm-none-eabi/include/c++/9.3.0/bits/basic_string.h"
 15613              		.file 23 "/usr/arm-none-eabi/include/c++/9.3.0/cstdint"
 15614              		.file 24 "/usr/arm-none-eabi/include/c++/9.3.0/type_traits"
 15615              		.file 25 "/usr/arm-none-eabi/include/c++/9.3.0/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h"
 15616              		.file 26 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_pair.h"
 15617              		.file 27 "/usr/arm-none-eabi/include/c++/9.3.0/utility"
 15618              		.file 28 "/usr/arm-none-eabi/include/c++/9.3.0/bits/exception_ptr.h"
 15619              		.file 29 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_iterator_base_types.h"
 15620              		.file 30 "/usr/arm-none-eabi/include/c++/9.3.0/debug/debug.h"
 15621              		.file 31 "/usr/arm-none-eabi/include/c++/9.3.0/cwchar"
 15622              		.file 32 "/usr/arm-none-eabi/include/c++/9.3.0/bits/char_traits.h"
 15623              		.file 33 "/usr/arm-none-eabi/include/c++/9.3.0/bits/allocator.h"
 15624              		.file 34 "/usr/arm-none-eabi/include/c++/9.3.0/clocale"
 15625              		.file 35 "/usr/arm-none-eabi/include/c++/9.3.0/cstdlib"
 15626              		.file 36 "/usr/arm-none-eabi/include/c++/9.3.0/bits/algorithmfwd.h"
 15627              		.file 37 "/usr/arm-none-eabi/include/c++/9.3.0/limits"
 15628              		.file 38 "/usr/arm-none-eabi/include/c++/9.3.0/string_view"
 15629              		.file 39 "/usr/arm-none-eabi/include/c++/9.3.0/cstdio"
 15630              		.file 40 "/usr/arm-none-eabi/include/c++/9.3.0/bits/alloc_traits.h"
 15631              		.file 41 "/usr/arm-none-eabi/include/c++/9.3.0/initializer_list"
 15632              		.file 42 "/usr/arm-none-eabi/include/c++/9.3.0/cwctype"
 15633              		.file 43 "/usr/arm-none-eabi/include/c++/9.3.0/istream"
 15634              		.file 44 "/usr/arm-none-eabi/include/c++/9.3.0/bits/uses_allocator.h"
 15635              		.file 45 "/usr/arm-none-eabi/include/c++/9.3.0/tuple"
 15636              		.file 46 "/usr/arm-none-eabi/include/c++/9.3.0/bits/uniform_int_dist.h"
 15637              		.file 47 "/usr/arm-none-eabi/include/c++/9.3.0/optional"
 15638              		.file 48 "/usr/arm-none-eabi/include/c++/9.3.0/functional"
 15639              		.file 49 "/usr/arm-none-eabi/include/c++/9.3.0/ext/new_allocator.h"
 15640              		.file 50 "/usr/arm-none-eabi/include/c++/9.3.0/ext/numeric_traits.h"
 15641              		.file 51 "/usr/arm-none-eabi/include/c++/9.3.0/ext/alloc_traits.h"
 15642              		.file 52 "/usr/arm-none-eabi/include/c++/9.3.0/bits/stl_iterator.h"
 15643              		.file 53 "/usr/arm-none-eabi/include/machine/_default_types.h"
 15644              		.file 54 "/usr/arm-none-eabi/include/sys/_stdint.h"
 15645              		.file 55 "/usr/arm-none-eabi/include/stdint.h"
 15646              		.file 56 "Drivers/CMSIS/Include/core_cm4.h"
 15647              		.file 57 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 15648              		.file 58 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 15649              		.file 59 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 15650              		.file 60 "/usr/lib/gcc/arm-none-eabi/9.3.0/include/stddef.h"
 15651              		.file 61 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 15652              		.file 62 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 15653              		.file 63 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 15654              		.file 64 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 15655              		.file 65 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 15656              		.file 66 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 15657              		.file 67 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 15658              		.file 68 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usb.h"
 15659              		.file 69 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pcd.h"
 15660              		.file 70 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 15661              		.file 71 "Inc/main.h"
 15662              		.file 72 "Cpp/otto.hpp"
 15663              		.file 73 "/usr/arm-none-eabi/include/sys/_types.h"
 15664              		.file 74 "<built-in>"
ARM GAS  /tmp/ccU23Djm.s 			page 457


 15665              		.file 75 "/usr/arm-none-eabi/include/sys/reent.h"
 15666              		.file 76 "/usr/arm-none-eabi/include/sys/lock.h"
 15667              		.file 77 "/usr/lib/gcc/arm-none-eabi/9.3.0/include/stdarg.h"
 15668              		.file 78 "/usr/arm-none-eabi/include/wchar.h"
 15669              		.file 79 "/usr/arm-none-eabi/include/locale.h"
 15670              		.file 80 "/usr/arm-none-eabi/include/ctype.h"
 15671              		.file 81 "/usr/arm-none-eabi/include/stdlib.h"
 15672              		.file 82 "/usr/arm-none-eabi/include/stdio.h"
 15673              		.file 83 "/usr/arm-none-eabi/include/sys/errno.h"
 15674              		.file 84 "/usr/arm-none-eabi/include/wctype.h"
 15675              		.file 85 "/usr/arm-none-eabi/include/c++/9.3.0/pstl/execution_defs.h"
ARM GAS  /tmp/ccU23Djm.s 			page 458


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccU23Djm.s:18     .text._ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE:0000000000000000 $t
     /tmp/ccU23Djm.s:26     .text._ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE:0000000000000000 _ZN4otto3mcu7GpioPin4initENS1_4ModeENS1_4PullENS1_5SpeedE
     /tmp/ccU23Djm.s:88     .text._ZNK4otto3mcu7GpioPin4readEv:0000000000000000 $t
     /tmp/ccU23Djm.s:95     .text._ZNK4otto3mcu7GpioPin4readEv:0000000000000000 _ZNK4otto3mcu7GpioPin4readEv
     /tmp/ccU23Djm.s:166    .text._ZNK4otto3mcu7GpioPin5writeEb:0000000000000000 $t
     /tmp/ccU23Djm.s:173    .text._ZNK4otto3mcu7GpioPin5writeEb:0000000000000000 _ZNK4otto3mcu7GpioPin5writeEb
     /tmp/ccU23Djm.s:239    .rodata._ZN4otto3mcuL10status_ledE:0000000000000000 $d
     /tmp/ccU23Djm.s:242    .rodata._ZN4otto3mcuL10status_ledE:0000000000000000 _ZN4otto3mcuL10status_ledE
     /tmp/ccU23Djm.s:248    .text._ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_:0000000000000000 $t
     /tmp/ccU23Djm.s:255    .text._ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_:0000000000000000 _ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_
     /tmp/ccU23Djm.s:255    .text._ZN4otto3mcu7EncoderC2ENS0_7GpioPinES2_:0000000000000000 _ZN4otto3mcu7EncoderC1ENS0_7GpioPinES2_
     /tmp/ccU23Djm.s:321    .text._ZN4otto3mcu7Encoder4initEv:0000000000000000 $t
     /tmp/ccU23Djm.s:328    .text._ZN4otto3mcu7Encoder4initEv:0000000000000000 _ZN4otto3mcu7Encoder4initEv
     /tmp/ccU23Djm.s:372    .text._ZN4otto3mcu7Encoder4initEv:000000000000002c $d
     /tmp/ccU23Djm.s:377    .text._ZN4otto3mcu7Encoder11irq_checkedEt:0000000000000000 $t
     /tmp/ccU23Djm.s:384    .text._ZN4otto3mcu7Encoder11irq_checkedEt:0000000000000000 _ZN4otto3mcu7Encoder11irq_checkedEt
     /tmp/ccU23Djm.s:440    .text._ZN4otto3mcu7Encoder3irqEv:0000000000000000 _ZN4otto3mcu7Encoder3irqEv
     /tmp/ccU23Djm.s:433    .text._ZN4otto3mcu7Encoder3irqEv:0000000000000000 $t
     /tmp/ccU23Djm.s:535    .text._ZnwjPv:0000000000000000 $t
     /tmp/ccU23Djm.s:542    .text._ZnwjPv:0000000000000000 _ZnwjPv
     /tmp/ccU23Djm.s:582    .text._ZL20__gthread_key_deletei:0000000000000000 $t
     /tmp/ccU23Djm.s:588    .text._ZL20__gthread_key_deletei:0000000000000000 _ZL20__gthread_key_deletei
     /tmp/ccU23Djm.s:627    .rodata._ZN2tlL8in_placeE:0000000000000000 $d
     /tmp/ccU23Djm.s:630    .rodata._ZN2tlL8in_placeE:0000000000000000 _ZN2tlL8in_placeE
     /tmp/ccU23Djm.s:633    .rodata._ZN2tlL8unexpectE:0000000000000000 $d
     /tmp/ccU23Djm.s:636    .rodata._ZN2tlL8unexpectE:0000000000000000 _ZN2tlL8unexpectE
     /tmp/ccU23Djm.s:639    .rodata._ZN2tl6detailL7no_initE:0000000000000000 $d
     /tmp/ccU23Djm.s:642    .rodata._ZN2tl6detailL7no_initE:0000000000000000 _ZN2tl6detailL7no_initE
     /tmp/ccU23Djm.s:645    .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv:0000000000000000 $t
     /tmp/ccU23Djm.s:652    .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8capacityEv
     /tmp/ccU23Djm.s:684    .text._ZNK4otto3mcu9Scheduler4TaskgtERKS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:691    .text._ZNK4otto3mcu9Scheduler4TaskgtERKS2_:0000000000000000 _ZNK4otto3mcu9Scheduler4TaskgtERKS2_
     /tmp/ccU23Djm.s:740    .text._ZN4otto3mcu9Scheduler4TaskD2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:747    .text._ZN4otto3mcu9Scheduler4TaskD2Ev:0000000000000000 _ZN4otto3mcu9Scheduler4TaskD2Ev
     /tmp/ccU23Djm.s:5676   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EED1Ev
     /tmp/ccU23Djm.s:747    .text._ZN4otto3mcu9Scheduler4TaskD2Ev:0000000000000000 _ZN4otto3mcu9Scheduler4TaskD1Ev
     /tmp/ccU23Djm.s:787    .rodata:0000000000000000 $d
     /tmp/ccU23Djm.s:791    .text._ZN4otto3mcu9Scheduler4execEv:0000000000000000 $t
     /tmp/ccU23Djm.s:798    .text._ZN4otto3mcu9Scheduler4execEv:0000000000000000 _ZN4otto3mcu9Scheduler4execEv
     /tmp/ccU23Djm.s:1401   .text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv:0000000000000000 _ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv
     /tmp/ccU23Djm.s:5633   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv
     /tmp/ccU23Djm.s:1827   .text._ZN4otto3mcu9Scheduler3popEv:0000000000000000 _ZN4otto3mcu9Scheduler3popEv
     /tmp/ccU23Djm.s:5724   .text._ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv:0000000000000000 _ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv
     /tmp/ccU23Djm.s:5776   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv
     /tmp/ccU23Djm.s:5826   .text._ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 _ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_
     /tmp/ccU23Djm.s:2062   .text._ZN4otto3mcu9Scheduler4pushEONS1_4TaskE:0000000000000000 _ZN4otto3mcu9Scheduler4pushEONS1_4TaskE
     /tmp/ccU23Djm.s:921    .text._ZN4otto3mcu9Scheduler4execEv:00000000000000a8 $d
     /tmp/ccU23Djm.s:926    .text._ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm:0000000000000000 $t
     /tmp/ccU23Djm.s:933    .text._ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm:0000000000000000 _ZN4otto3mcu9Scheduler8scheduleE19fixed_size_functionIFvvELj64EL14construct_type2EEmm
     /tmp/ccU23Djm.s:5872   .text._ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 _ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_
     /tmp/ccU23Djm.s:6021   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1EOS2_
     /tmp/ccU23Djm.s:995    .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1002   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_clEv:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_clEv
     /tmp/ccU23Djm.s:6123   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv
     /tmp/ccU23Djm.s:6078   .text._ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 _ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_
ARM GAS  /tmp/ccU23Djm.s 			page 459


     /tmp/ccU23Djm.s:6277   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1EOS2_
     /tmp/ccU23Djm.s:1127   .text._ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEm:0000000000000000 _ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEm
     /tmp/ccU23Djm.s:6334   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EED1Ev
     /tmp/ccU23Djm.s:1072   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_D2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1079   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_D2Ev:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_D2Ev
     /tmp/ccU23Djm.s:1079   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_D2Ev:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_D1Ev
     /tmp/ccU23Djm.s:1120   .text._ZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEm:0000000000000000 $t
     /tmp/ccU23Djm.s:6381   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEOT_
     /tmp/ccU23Djm.s:1192   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1199   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5beginEv
     /tmp/ccU23Djm.s:6437   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv
     /tmp/ccU23Djm.s:1235   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1242   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE3endEv
     /tmp/ccU23Djm.s:1289   .text._ZN4otto3mcu9Scheduler4TaskC2EOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:1296   .text._ZN4otto3mcu9Scheduler4TaskC2EOS2_:0000000000000000 _ZN4otto3mcu9Scheduler4TaskC2EOS2_
     /tmp/ccU23Djm.s:1296   .text._ZN4otto3mcu9Scheduler4TaskC2EOS2_:0000000000000000 _ZN4otto3mcu9Scheduler4TaskC1EOS2_
     /tmp/ccU23Djm.s:1347   .text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1354   .text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv:0000000000000000 _ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4sizeEv
     /tmp/ccU23Djm.s:1394   .text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5emptyEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1443   .text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1450   .text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:0000000000000000 _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev
     /tmp/ccU23Djm.s:7024   .text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2Ev:0000000000000000 _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2Ev
     /tmp/ccU23Djm.s:1450   .text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:0000000000000000 _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEEC1Ev
     /tmp/ccU23Djm.s:1491   .text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1498   .text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev
     /tmp/ccU23Djm.s:1498   .text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC1Ev
     /tmp/ccU23Djm.s:1538   .text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1545   .text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev
     /tmp/ccU23Djm.s:1545   .text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC1Ev
     /tmp/ccU23Djm.s:1585   .text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1592   .text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev
     /tmp/ccU23Djm.s:1592   .text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC1Ev
     /tmp/ccU23Djm.s:1632   .text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1639   .text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev
     /tmp/ccU23Djm.s:1639   .text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2Ev:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC1Ev
     /tmp/ccU23Djm.s:1679   .text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:1686   .text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:0000000000000000 _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev
     /tmp/ccU23Djm.s:1686   .text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2Ev:0000000000000000 _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1Ev
     /tmp/ccU23Djm.s:1726   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1733   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE8pop_backEv
     /tmp/ccU23Djm.s:6646   .text._ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2EOS8_:0000000000000000 _ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1EOS8_
     /tmp/ccU23Djm.s:6959   .text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2IS8_LPv0ELSB_0EEEONS_10unexpectedIT_EE:0000000000000000 _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC1IS8_LPv0ELSB_0EEEONS_10unexpectedIT_EE
     /tmp/ccU23Djm.s:1820   .text._ZN4otto3mcu9Scheduler3popEv:0000000000000000 $t
     /tmp/ccU23Djm.s:6527   .text._ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:0000000000000000 _ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_
     /tmp/ccU23Djm.s:6591   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv
     /tmp/ccU23Djm.s:1895   .text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv:0000000000000000 $t
     /tmp/ccU23Djm.s:1902   .text._ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv:0000000000000000 _ZNK4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4fullEv
     /tmp/ccU23Djm.s:1948   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN2tl8expectedIPS4_NS5_5errorEEEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:1955   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN2tl8expectedIPS4_NS5_5errorEEEDpOT_:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE12emplace_backIJS4_EvEEN2tl8expectedIPS4_NS5_5errorEEEDpOT_
     /tmp/ccU23Djm.s:7336   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS9_LPv0ELSC_0EEEONS_10unexpectedIT_EE:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IS9_LPv0ELSC_0EEEONS_10unexpectedIT_EE
     /tmp/ccU23Djm.s:7401   .text._ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE:0000000000000000 _ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE
     /tmp/ccU23Djm.s:7812   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS5_LPv0ELSC_0EEEOT_:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IS5_LPv0ELSC_0EEEOT_
     /tmp/ccU23Djm.s:2055   .text._ZN4otto3mcu9Scheduler4pushEONS1_4TaskE:0000000000000000 $t
     /tmp/ccU23Djm.s:7866   .text._ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:0000000000000000 _ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_
     /tmp/ccU23Djm.s:2121   .rodata._ZN6__pstl9execution2v1L3seqE:0000000000000000 $d
     /tmp/ccU23Djm.s:2124   .rodata._ZN6__pstl9execution2v1L3seqE:0000000000000000 _ZN6__pstl9execution2v1L3seqE
     /tmp/ccU23Djm.s:2127   .rodata._ZN6__pstl9execution2v1L3parE:0000000000000000 $d
ARM GAS  /tmp/ccU23Djm.s 			page 460


     /tmp/ccU23Djm.s:2130   .rodata._ZN6__pstl9execution2v1L3parE:0000000000000000 _ZN6__pstl9execution2v1L3parE
     /tmp/ccU23Djm.s:2133   .rodata._ZN6__pstl9execution2v1L9par_unseqE:0000000000000000 $d
     /tmp/ccU23Djm.s:2136   .rodata._ZN6__pstl9execution2v1L9par_unseqE:0000000000000000 _ZN6__pstl9execution2v1L9par_unseqE
     /tmp/ccU23Djm.s:2139   .rodata._ZN6__pstl9execution2v1L5unseqE:0000000000000000 $d
     /tmp/ccU23Djm.s:2142   .rodata._ZN6__pstl9execution2v1L5unseqE:0000000000000000 _ZN6__pstl9execution2v1L5unseqE
     /tmp/ccU23Djm.s:2145   .rodata._ZN4otto4util9algorithmL8identityE:0000000000000000 $d
     /tmp/ccU23Djm.s:2148   .rodata._ZN4otto4util9algorithmL8identityE:0000000000000000 _ZN4otto4util9algorithmL8identityE
     /tmp/ccU23Djm.s:2151   .rodata._ZN4otto3mcu7ws2812bL12ws2812b_bitsE:0000000000000000 $d
     /tmp/ccU23Djm.s:2154   .rodata._ZN4otto3mcu7ws2812bL12ws2812b_bitsE:0000000000000000 _ZN4otto3mcu7ws2812bL12ws2812b_bitsE
     /tmp/ccU23Djm.s:2157   .text._ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j:0000000000000000 $t
     /tmp/ccU23Djm.s:2164   .text._ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j:0000000000000000 _ZNSt14__array_traitsISt5arrayIhLj4EELj256EE6_S_refERA256_KS1_j
     /tmp/ccU23Djm.s:2207   .text._ZNSt5arrayIhLj4EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:2214   .text._ZNSt5arrayIhLj4EEixEj:0000000000000000 _ZNSt5arrayIhLj4EEixEj
     /tmp/ccU23Djm.s:2261   .text._ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj:0000000000000000 _ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
     /tmp/ccU23Djm.s:2254   .text._ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj:0000000000000000 $t
     /tmp/ccU23Djm.s:2302   .rodata._ZN4otto3mcu7ws2812bL15ws2812b_mappingE:0000000000000000 $d
     /tmp/ccU23Djm.s:2305   .rodata._ZN4otto3mcu7ws2812bL15ws2812b_mappingE:0000000000000000 _ZN4otto3mcu7ws2812bL15ws2812b_mappingE
     /tmp/ccU23Djm.s:3331   .text._ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:3338   .text._ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv:0000000000000000 _ZZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EEENKUlvE_clEv
     /tmp/ccU23Djm.s:3416   .text._ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE:0000000000000000 $t
     /tmp/ccU23Djm.s:3423   .text._ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE:0000000000000000 _ZN4otto3mcu7ws2812b17byte_from_mappingESt5arrayIhLj4EE
     /tmp/ccU23Djm.s:3504   .text._ZNK4otto3mcu7ws2812b8RGBColormlEf:0000000000000000 $t
     /tmp/ccU23Djm.s:3511   .text._ZNK4otto3mcu7ws2812b8RGBColormlEf:0000000000000000 _ZNK4otto3mcu7ws2812b8RGBColormlEf
     /tmp/ccU23Djm.s:3600   .text._ZN4otto3mcu7ws2812b8RGBColoreqERKS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:3607   .text._ZN4otto3mcu7ws2812b8RGBColoreqERKS2_:0000000000000000 _ZN4otto3mcu7ws2812b8RGBColoreqERKS2_
     /tmp/ccU23Djm.s:3678   .text._ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb:0000000000000000 $t
     /tmp/ccU23Djm.s:3685   .text._ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb:0000000000000000 _ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb
     /tmp/ccU23Djm.s:3685   .text._ZN4otto3mcu7ws2812b10Ws2812bRefC2EPhRb:0000000000000000 _ZN4otto3mcu7ws2812b10Ws2812bRefC1EPhRb
     /tmp/ccU23Djm.s:3735   .text._ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_:0000000000000000 $t
     /tmp/ccU23Djm.s:3742   .text._ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_:0000000000000000 _ZN4otto4util9algorithm4copyIRKSt5arrayIhLj4EERPhEEDcOT_OT0_
     /tmp/ccU23Djm.s:8013   .text._ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_:0000000000000000 _ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_
     /tmp/ccU23Djm.s:8057   .text._ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_:0000000000000000 _ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_
     /tmp/ccU23Djm.s:8100   .text._ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 _ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE
     /tmp/ccU23Djm.s:8145   .text._ZSt4copyIPKhPhET0_T_S4_S3_:0000000000000000 _ZSt4copyIPKhPhET0_T_S4_S3_
     /tmp/ccU23Djm.s:3796   .text._ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE:0000000000000000 $t
     /tmp/ccU23Djm.s:3803   .text._ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE:0000000000000000 _ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE
     /tmp/ccU23Djm.s:3930   .text._ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv:0000000000000000 _ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv
     /tmp/ccU23Djm.s:7966   .text._ZNKSt5arrayIS_IhLj4EELj256EEixEj:0000000000000000 _ZNKSt5arrayIS_IhLj4EELj256EEixEj
     /tmp/ccU23Djm.s:3918   .text._ZN4otto3mcu7ws2812b10Ws2812bRefaSENS1_8RGBColorE:00000000000000a8 $d
     /tmp/ccU23Djm.s:3923   .text._ZN4otto3mcu7ws2812b10Ws2812bRefcvNS1_8RGBColorEEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4057   .data._ZN4otto3mcu7ws2812bL6colorsE:0000000000000000 $d
     /tmp/ccU23Djm.s:4060   .data._ZN4otto3mcu7ws2812bL6colorsE:0000000000000000 _ZN4otto3mcu7ws2812bL6colorsE
     /tmp/ccU23Djm.s:4083   .text._ZN4otto3mcu9SchedulerD2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:4090   .text._ZN4otto3mcu9SchedulerD2Ev:0000000000000000 _ZN4otto3mcu9SchedulerD2Ev
     /tmp/ccU23Djm.s:8200   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED1Ev
     /tmp/ccU23Djm.s:4090   .text._ZN4otto3mcu9SchedulerD2Ev:0000000000000000 _ZN4otto3mcu9SchedulerD1Ev
     /tmp/ccU23Djm.s:4134   .bss._ZN4otto3mcu9main_loopE:0000000000000000 _ZN4otto3mcu9main_loopE
     /tmp/ccU23Djm.s:4131   .bss._ZN4otto3mcu9main_loopE:0000000000000000 $d
     /tmp/ccU23Djm.s:4137   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4144   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4sizeEv
     /tmp/ccU23Djm.s:4179   .bss.leds:0000000000000000 leds
     /tmp/ccU23Djm.s:4176   .bss.leds:0000000000000000 $d
     /tmp/ccU23Djm.s:4186   .data.key_table:0000000000000000 key_table
     /tmp/ccU23Djm.s:4183   .data.key_table:0000000000000000 $d
     /tmp/ccU23Djm.s:4257   .bss.blue_encoder:0000000000000000 blue_encoder
     /tmp/ccU23Djm.s:4254   .bss.blue_encoder:0000000000000000 $d
     /tmp/ccU23Djm.s:4264   .bss.green_encoder:0000000000000000 green_encoder
ARM GAS  /tmp/ccU23Djm.s 			page 461


     /tmp/ccU23Djm.s:4261   .bss.green_encoder:0000000000000000 $d
     /tmp/ccU23Djm.s:4271   .bss.yellow_encoder:0000000000000000 yellow_encoder
     /tmp/ccU23Djm.s:4268   .bss.yellow_encoder:0000000000000000 $d
     /tmp/ccU23Djm.s:4278   .bss.red_encoder:0000000000000000 red_encoder
     /tmp/ccU23Djm.s:4275   .bss.red_encoder:0000000000000000 $d
     /tmp/ccU23Djm.s:4281   .text._Z9test_ledsv:0000000000000000 $t
     /tmp/ccU23Djm.s:4288   .text._Z9test_ledsv:0000000000000000 _Z9test_ledsv
     /tmp/ccU23Djm.s:8370   .text._ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:0000000000000000 _ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE
     /tmp/ccU23Djm.s:8789   .text._ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:0000000000000000 _ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE
     /tmp/ccU23Djm.s:4315   .text._Z9test_ledsv:0000000000000014 $d
     /tmp/ccU23Djm.s:4320   .text._Z9test_keysv:0000000000000000 $t
     /tmp/ccU23Djm.s:4327   .text._Z9test_keysv:0000000000000000 _Z9test_keysv
     /tmp/ccU23Djm.s:8852   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv:0000000000000000 _ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv
     /tmp/ccU23Djm.s:8984   .text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv:0000000000000000 _ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv
     /tmp/ccU23Djm.s:9027   .text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv:0000000000000000 _ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv
     /tmp/ccU23Djm.s:9072   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi
     /tmp/ccU23Djm.s:9134   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv
     /tmp/ccU23Djm.s:4465   .text._Z9test_keysv:00000000000000b4 $d
     /tmp/ccU23Djm.s:4472   .text._ZZ13test_encodersvENKUlvE_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4478   .text._ZZ13test_encodersvENKUlvE_clEv:0000000000000000 _ZZ13test_encodersvENKUlvE_clEv
     /tmp/ccU23Djm.s:9183   .text._ZSt5clampIiERKT_S2_S2_S2_:0000000000000000 _ZSt5clampIiERKT_S2_S2_S2_
     /tmp/ccU23Djm.s:9315   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv
     /tmp/ccU23Djm.s:4555   .text._ZZ13test_encodersvENKUlvE_clEv:0000000000000068 $d
     /tmp/ccU23Djm.s:4561   .text._ZZ13test_encodersvENUlvE_4_FUNEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4567   .text._ZZ13test_encodersvENUlvE_4_FUNEv:0000000000000000 _ZZ13test_encodersvENUlvE_4_FUNEv
     /tmp/ccU23Djm.s:4589   .text._ZZ13test_encodersvENKUlvE_cvPFvvEEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4595   .text._ZZ13test_encodersvENKUlvE_cvPFvvEEv:0000000000000000 _ZZ13test_encodersvENKUlvE_cvPFvvEEv
     /tmp/ccU23Djm.s:4631   .text._ZZ13test_encodersvENKUlvE_cvPFvvEEv:0000000000000018 $d
     /tmp/ccU23Djm.s:4636   .text._ZZ13test_encodersvENKUlvE0_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4642   .text._ZZ13test_encodersvENKUlvE0_clEv:0000000000000000 _ZZ13test_encodersvENKUlvE0_clEv
     /tmp/ccU23Djm.s:4719   .text._ZZ13test_encodersvENKUlvE0_clEv:0000000000000068 $d
     /tmp/ccU23Djm.s:4725   .text._ZZ13test_encodersvENUlvE0_4_FUNEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4731   .text._ZZ13test_encodersvENUlvE0_4_FUNEv:0000000000000000 _ZZ13test_encodersvENUlvE0_4_FUNEv
     /tmp/ccU23Djm.s:4753   .text._ZZ13test_encodersvENKUlvE0_cvPFvvEEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4759   .text._ZZ13test_encodersvENKUlvE0_cvPFvvEEv:0000000000000000 _ZZ13test_encodersvENKUlvE0_cvPFvvEEv
     /tmp/ccU23Djm.s:4795   .text._ZZ13test_encodersvENKUlvE0_cvPFvvEEv:0000000000000018 $d
     /tmp/ccU23Djm.s:4806   .text._ZZ13test_encodersvENKUlvE1_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4812   .text._ZZ13test_encodersvENKUlvE1_clEv:0000000000000000 _ZZ13test_encodersvENKUlvE1_clEv
     /tmp/ccU23Djm.s:4891   .text._ZZ13test_encodersvENKUlvE1_clEv:000000000000006c $d
     /tmp/ccU23Djm.s:4898   .text._ZZ13test_encodersvENUlvE1_4_FUNEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4904   .text._ZZ13test_encodersvENUlvE1_4_FUNEv:0000000000000000 _ZZ13test_encodersvENUlvE1_4_FUNEv
     /tmp/ccU23Djm.s:4926   .text._ZZ13test_encodersvENKUlvE1_cvPFvvEEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4932   .text._ZZ13test_encodersvENKUlvE1_cvPFvvEEv:0000000000000000 _ZZ13test_encodersvENKUlvE1_cvPFvvEEv
     /tmp/ccU23Djm.s:4968   .text._ZZ13test_encodersvENKUlvE1_cvPFvvEEv:0000000000000018 $d
     /tmp/ccU23Djm.s:4973   .text._ZZ13test_encodersvENKUlvE2_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:4979   .text._ZZ13test_encodersvENKUlvE2_clEv:0000000000000000 _ZZ13test_encodersvENKUlvE2_clEv
     /tmp/ccU23Djm.s:5056   .text._ZZ13test_encodersvENKUlvE2_clEv:0000000000000068 $d
     /tmp/ccU23Djm.s:5062   .text._ZZ13test_encodersvENUlvE2_4_FUNEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5068   .text._ZZ13test_encodersvENUlvE2_4_FUNEv:0000000000000000 _ZZ13test_encodersvENUlvE2_4_FUNEv
     /tmp/ccU23Djm.s:5090   .text._ZZ13test_encodersvENKUlvE2_cvPFvvEEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5096   .text._ZZ13test_encodersvENKUlvE2_cvPFvvEEv:0000000000000000 _ZZ13test_encodersvENKUlvE2_cvPFvvEEv
     /tmp/ccU23Djm.s:5132   .text._ZZ13test_encodersvENKUlvE2_cvPFvvEEv:0000000000000018 $d
     /tmp/ccU23Djm.s:5137   .text._Z13test_encodersv:0000000000000000 $t
     /tmp/ccU23Djm.s:5144   .text._Z13test_encodersv:0000000000000000 _Z13test_encodersv
     /tmp/ccU23Djm.s:5206   .text._Z13test_encodersv:000000000000004c $d
     /tmp/ccU23Djm.s:5217   .bss._ZN4otto3mcu5power5stateE:0000000000000000 _ZN4otto3mcu5power5stateE
     /tmp/ccU23Djm.s:5218   .bss._ZN4otto3mcu5power5stateE:0000000000000000 $d
ARM GAS  /tmp/ccU23Djm.s 			page 462


     /tmp/ccU23Djm.s:5224   .data._ZN4otto3mcu5power12power_switchE:0000000000000000 _ZN4otto3mcu5power12power_switchE
     /tmp/ccU23Djm.s:5221   .data._ZN4otto3mcu5power12power_switchE:0000000000000000 $d
     /tmp/ccU23Djm.s:5234   .data._ZN4otto3mcu5power9rpi_powerE:0000000000000000 _ZN4otto3mcu5power9rpi_powerE
     /tmp/ccU23Djm.s:5231   .data._ZN4otto3mcu5power9rpi_powerE:0000000000000000 $d
     /tmp/ccU23Djm.s:5244   .data._ZN4otto3mcu5power9led_powerE:0000000000000000 _ZN4otto3mcu5power9led_powerE
     /tmp/ccU23Djm.s:5241   .data._ZN4otto3mcu5power9led_powerE:0000000000000000 $d
     /tmp/ccU23Djm.s:5250   .text._ZN4otto3mcu5power13state_changedEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5257   .text._ZN4otto3mcu5power13state_changedEv:0000000000000000 _ZN4otto3mcu5power13state_changedEv
     /tmp/ccU23Djm.s:5295   .text._ZN4otto3mcu5power13state_changedEv:000000000000002c $d
     /tmp/ccU23Djm.s:5303   .text._ZN4otto3mcu5power4pollEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5310   .text._ZN4otto3mcu5power4pollEv:0000000000000000 _ZN4otto3mcu5power4pollEv
     /tmp/ccU23Djm.s:5362   .text._ZN4otto3mcu5power4pollEv:0000000000000030 $d
     /tmp/ccU23Djm.s:5368   .text._ZN4otto3mcu5power4initEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5375   .text._ZN4otto3mcu5power4initEv:0000000000000000 _ZN4otto3mcu5power4initEv
     /tmp/ccU23Djm.s:9378   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IRS0_EEOT_
     /tmp/ccU23Djm.s:5427   .text._ZN4otto3mcu5power4initEv:0000000000000040 $d
     /tmp/ccU23Djm.s:5434   .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccU23Djm.s:5441   .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccU23Djm.s:5493   .text.HAL_GPIO_EXTI_Callback:000000000000003c $d
     /tmp/ccU23Djm.s:5501   .text._ZZ14OTTO_main_loopENKUlvE_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5507   .text._ZZ14OTTO_main_loopENKUlvE_clEv:0000000000000000 _ZZ14OTTO_main_loopENKUlvE_clEv
     /tmp/ccU23Djm.s:5541   .text._ZZ14OTTO_main_loopENKUlvE_clEv:0000000000000018 $d
     /tmp/ccU23Djm.s:5546   .text.OTTO_main_loop:0000000000000000 $t
     /tmp/ccU23Djm.s:5553   .text.OTTO_main_loop:0000000000000000 OTTO_main_loop
     /tmp/ccU23Djm.s:9434   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv:0000000000000000 _ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv
     /tmp/ccU23Djm.s:9539   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv
     /tmp/ccU23Djm.s:9617   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZ14OTTO_main_loopEUlvE_EEOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC1IZ14OTTO_main_loopEUlvE_EEOT_
     /tmp/ccU23Djm.s:5615   .text.OTTO_main_loop:000000000000005c $d
     /tmp/ccU23Djm.s:5626   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5frontEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5669   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:5676   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EED2Ev
     /tmp/ccU23Djm.s:9672   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv
     /tmp/ccU23Djm.s:5717   .text._ZNK19fixed_size_functionIFvvELj64EL14construct_type2EEcvbEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5769   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEclEv:0000000000000000 $t
     /tmp/ccU23Djm.s:5819   .text._ZSt4moveIRN4otto3mcu9Scheduler4TaskEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 $t
     /tmp/ccU23Djm.s:5865   .text._ZSt4moveIR19fixed_size_functionIFvvELj64EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 $t
     /tmp/ccU23Djm.s:5910   .text._ZN7details26fixed_function_vtable_baseIvJEEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:5917   .text._ZN7details26fixed_function_vtable_baseIvJEEC2Ev:0000000000000000 _ZN7details26fixed_function_vtable_baseIvJEEC2Ev
     /tmp/ccU23Djm.s:5917   .text._ZN7details26fixed_function_vtable_baseIvJEEC2Ev:0000000000000000 _ZN7details26fixed_function_vtable_baseIvJEEC1Ev
     /tmp/ccU23Djm.s:5964   .text._ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:5971   .text._ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev:0000000000000000 _ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev
     /tmp/ccU23Djm.s:5971   .text._ZN7details21fixed_function_vtableIL14construct_type2EvJEEC2Ev:0000000000000000 _ZN7details21fixed_function_vtableIL14construct_type2EvJEEC1Ev
     /tmp/ccU23Djm.s:6014   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:6021   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2EOS2_
     /tmp/ccU23Djm.s:9745   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_
     /tmp/ccU23Djm.s:6071   .text._ZSt4moveIR19fixed_size_functionIFmvELj32EL14construct_type2EEEONSt16remove_referenceIT_E4typeEOS6_:0000000000000000 $t
     /tmp/ccU23Djm.s:6116   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEclEv:0000000000000000 $t
     /tmp/ccU23Djm.s:6166   .text._ZN7details26fixed_function_vtable_baseImJEEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:6173   .text._ZN7details26fixed_function_vtable_baseImJEEC2Ev:0000000000000000 _ZN7details26fixed_function_vtable_baseImJEEC2Ev
     /tmp/ccU23Djm.s:6173   .text._ZN7details26fixed_function_vtable_baseImJEEC2Ev:0000000000000000 _ZN7details26fixed_function_vtable_baseImJEEC1Ev
     /tmp/ccU23Djm.s:6220   .text._ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:6227   .text._ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev:0000000000000000 _ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev
     /tmp/ccU23Djm.s:6227   .text._ZN7details21fixed_function_vtableIL14construct_type2EmJEEC2Ev:0000000000000000 _ZN7details21fixed_function_vtableIL14construct_type2EmJEEC1Ev
     /tmp/ccU23Djm.s:6270   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:6277   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2EOS2_
     /tmp/ccU23Djm.s:9813   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_
     /tmp/ccU23Djm.s:6327   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev:0000000000000000 $t
ARM GAS  /tmp/ccU23Djm.s 			page 463


     /tmp/ccU23Djm.s:6334   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EED2Ev
     /tmp/ccU23Djm.s:9881   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv
     /tmp/ccU23Djm.s:6374   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:6381   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEOT_
     /tmp/ccU23Djm.s:9954   .text._ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmEUlvE_EOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 _ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmEUlvE_EOT_RNSt16remove_referenceIS8_E4typeE
     /tmp/ccU23Djm.s:10055  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvOT_
     /tmp/ccU23Djm.s:6430   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4dataEv:0000000000000000 $t
     /tmp/ccU23Djm.s:10133  .text._ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_:0000000000000000 _ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_
     /tmp/ccU23Djm.s:6475   .text._ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_:0000000000000000 $t
     /tmp/ccU23Djm.s:6482   .text._ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_:0000000000000000 _ZSt4moveIRSt7greaterIN4otto3mcu9Scheduler4TaskEEEONSt16remove_referenceIT_E4typeEOS8_
     /tmp/ccU23Djm.s:6520   .text._ZSt8pop_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:0000000000000000 $t
     /tmp/ccU23Djm.s:10232  .text._ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_SB_SB_RT0_:0000000000000000 _ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_SB_SB_RT0_
     /tmp/ccU23Djm.s:6584   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE4backEv:0000000000000000 $t
     /tmp/ccU23Djm.s:6639   .text._ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2EOS8_:0000000000000000 $t
     /tmp/ccU23Djm.s:6646   .text._ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2EOS8_:0000000000000000 _ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2EOS8_
     /tmp/ccU23Djm.s:10330  .text._ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_referenceIT_E4typeEOSA_:0000000000000000 _ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_referenceIT_E4typeEOSA_
     /tmp/ccU23Djm.s:6692   .text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:6699   .text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:10465  .text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2IJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2IJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6699   .text._ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEECI1NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6744   .text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:6751   .text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6751   .text._ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI1NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6796   .text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:6803   .text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6803   .text._ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI1NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6848   .text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:6855   .text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6855   .text._ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI1NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6900   .text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:6907   .text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6907   .text._ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI2NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI1NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:6952   .text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2IS8_LPv0ELSB_0EEEONS_10unexpectedIT_EE:0000000000000000 $t
     /tmp/ccU23Djm.s:6959   .text._ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2IS8_LPv0ELSB_0EEEONS_10unexpectedIT_EE:0000000000000000 _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC2IS8_LPv0ELSB_0EEEONS_10unexpectedIT_EE
     /tmp/ccU23Djm.s:10375  .text._ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5valueEv:0000000000000000 _ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5valueEv
     /tmp/ccU23Djm.s:10523  .text._ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE:0000000000000000 _ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE
     /tmp/ccU23Djm.s:7017   .text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:7024   .text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2Ev:0000000000000000 _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC1Ev
     /tmp/ccU23Djm.s:7069   .text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7076   .text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:10570  .text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7076   .text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7121   .text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7128   .text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7128   .text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7173   .text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7180   .text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7180   .text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7225   .text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7232   .text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7232   .text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7277   .text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7284   .text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7284   .text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:7329   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS9_LPv0ELSC_0EEEONS_10unexpectedIT_EE:0000000000000000 $t
     /tmp/ccU23Djm.s:7336   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS9_LPv0ELSC_0EEEONS_10unexpectedIT_EE:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS9_LPv0ELSC_0EEEONS_10unexpectedIT_EE
     /tmp/ccU23Djm.s:10628  .text._ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE:0000000000000000 _ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE
ARM GAS  /tmp/ccU23Djm.s 			page 464


     /tmp/ccU23Djm.s:7394   .text._ZSt7forwardIN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS4_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:7439   .text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7446   .text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:10675  .text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7446   .text._ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7491   .text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7498   .text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7498   .text._ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7543   .text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7550   .text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7550   .text._ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7595   .text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7602   .text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7602   .text._ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7647   .text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7654   .text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7654   .text._ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI2NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI1NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7699   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IJS5_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7706   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IJS5_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IJS5_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7767   .text._ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE:0000000000000000 _ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE
     /tmp/ccU23Djm.s:7706   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IJS5_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC1IJS5_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:7760   .text._ZSt7forwardIPN4otto3mcu9Scheduler4TaskEEOT_RNSt16remove_referenceIS5_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:7805   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS5_LPv0ELSC_0EEEOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:7812   .text._ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS5_LPv0ELSC_0EEEOT_:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC2IS5_LPv0ELSC_0EEEOT_
     /tmp/ccU23Djm.s:7859   .text._ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:0000000000000000 $t
     /tmp/ccU23Djm.s:10732  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1ES7_
     /tmp/ccU23Djm.s:10782  .text._ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SC_T1_RT2_:0000000000000000 _ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SC_T1_RT2_
     /tmp/ccU23Djm.s:7954   .text._ZSt9push_heapIPN4otto3mcu9Scheduler4TaskESt7greaterIS3_EEvT_S7_T0_:0000000000000094 $d
     /tmp/ccU23Djm.s:7959   .text._ZNKSt5arrayIS_IhLj4EELj256EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:8006   .text._ZSt5beginISt5arrayIhLj4EEEDTcldtfp_5beginEERKT_:0000000000000000 $t
     /tmp/ccU23Djm.s:10923  .text._ZNKSt5arrayIhLj4EE5beginEv:0000000000000000 _ZNKSt5arrayIhLj4EE5beginEv
     /tmp/ccU23Djm.s:8050   .text._ZSt3endISt5arrayIhLj4EEEDTcldtfp_3endEERKT_:0000000000000000 $t
     /tmp/ccU23Djm.s:10966  .text._ZNKSt5arrayIhLj4EE3endEv:0000000000000000 _ZNKSt5arrayIhLj4EE3endEv
     /tmp/ccU23Djm.s:8093   .text._ZSt7forwardIRPhEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:8138   .text._ZSt4copyIPKhPhET0_T_S4_S3_:0000000000000000 $t
     /tmp/ccU23Djm.s:11011  .text._ZSt12__miter_baseIPKhET_S2_:0000000000000000 _ZSt12__miter_baseIPKhET_S2_
     /tmp/ccU23Djm.s:11057  .text._ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_:0000000000000000 _ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_
     /tmp/ccU23Djm.s:8193   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev:0000000000000000 $t
     /tmp/ccU23Djm.s:8200   .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED2Ev
     /tmp/ccU23Djm.s:11121  .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv
     /tmp/ccU23Djm.s:8240   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef:0000000000000000 $t
     /tmp/ccU23Djm.s:8247   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef
     /tmp/ccU23Djm.s:8247   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC2ER19__SPI_HandleTypeDef:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC1ER19__SPI_HandleTypeDef
     /tmp/ccU23Djm.s:8302   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_:0000000000000000 $t
     /tmp/ccU23Djm.s:8309   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_:0000000000000000 _ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_
     /tmp/ccU23Djm.s:8309   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC2ES3_:0000000000000000 _ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC1ES3_
     /tmp/ccU23Djm.s:8363   .text._ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:0000000000000000 $t
     /tmp/ccU23Djm.s:8600   .text._ZN4otto3mcu7ws2812b16led_pulse_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:0000000000000180 $d
     /tmp/ccU23Djm.s:8608   .text._ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv:0000000000000000 $t
     /tmp/ccU23Djm.s:8615   .text._ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv:0000000000000000 _ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv
     /tmp/ccU23Djm.s:11177  .text._ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj:0000000000000000 _ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj
     /tmp/ccU23Djm.s:8744   .text._ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv:0000000000000000 _ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv
     /tmp/ccU23Djm.s:8732   .text._ZZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEEENUlvE_clEv:00000000000000a0 $d
     /tmp/ccU23Djm.s:8737   .text._ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EE4sizeEv:0000000000000000 $t
     /tmp/ccU23Djm.s:8782   .text._ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:0000000000000000 $t
     /tmp/ccU23Djm.s:11224  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEOT_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC1IZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEOT_
     /tmp/ccU23Djm.s:8840   .text._ZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS1_12Ws2812bArrayIXT_EEE:0000000000000044 $d
ARM GAS  /tmp/ccU23Djm.s 			page 465


     /tmp/ccU23Djm.s:8845   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4scanEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11280  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj:0000000000000000 _ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj
     /tmp/ccU23Djm.s:11327  .text._ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj:0000000000000000 _ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj
     /tmp/ccU23Djm.s:11374  .text._ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj:0000000000000000 _ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj
     /tmp/ccU23Djm.s:8977   .text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE5beginEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11466  .text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv:0000000000000000 _ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv
     /tmp/ccU23Djm.s:9020   .text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE3endEv:0000000000000000 $t
     /tmp/ccU23Djm.s:9065   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEixEi:0000000000000000 $t
     /tmp/ccU23Djm.s:11511  .text._ZNSt5arrayIhLj648EE4dataEv:0000000000000000 _ZNSt5arrayIhLj648EE4dataEv
     /tmp/ccU23Djm.s:9127   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE12maybe_updateEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11556  .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv
     /tmp/ccU23Djm.s:9176   .text._ZSt5clampIiERKT_S2_S2_S2_:0000000000000000 $t
     /tmp/ccU23Djm.s:9251   .text._ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_:0000000000000000 $t
     /tmp/ccU23Djm.s:9258   .text._ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_:0000000000000000 _ZN4otto4util9algorithm4fillIRSt5arrayIhLj648EERKhEEDcOT_OT0_
     /tmp/ccU23Djm.s:11649  .text._ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_:0000000000000000 _ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_
     /tmp/ccU23Djm.s:11692  .text._ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_:0000000000000000 _ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_
     /tmp/ccU23Djm.s:11735  .text._ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 _ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE
     /tmp/ccU23Djm.s:11780  .text._ZSt4fillIPhhEvT_S1_RKT0_:0000000000000000 _ZSt4fillIPhhEvT_S1_RKT0_
     /tmp/ccU23Djm.s:9308   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11602  .text._ZNKSt5arrayIhLj4EEixEj:0000000000000000 _ZNKSt5arrayIhLj4EEixEj
     /tmp/ccU23Djm.s:9366   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE5clearEv:0000000000000038 $d
     /tmp/ccU23Djm.s:9371   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:9378   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IRS0_EEOT_
     /tmp/ccU23Djm.s:11833  .text._ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 _ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE
     /tmp/ccU23Djm.s:11878  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_
     /tmp/ccU23Djm.s:9427   .text._ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4initEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11954  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv:0000000000000000 _ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv
     /tmp/ccU23Djm.s:11997  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv:0000000000000000 _ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv
     /tmp/ccU23Djm.s:9532   .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE4initEv:0000000000000000 $t
     /tmp/ccU23Djm.s:12042  .text._ZNSt5arrayIhLj2EE4dataEv:0000000000000000 _ZNSt5arrayIhLj2EE4dataEv
     /tmp/ccU23Djm.s:12087  .text._ZNKSt5arrayIhLj2EE4sizeEv:0000000000000000 _ZNKSt5arrayIhLj2EE4sizeEv
     /tmp/ccU23Djm.s:9611   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZ14OTTO_main_loopEUlvE_EEOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:9617   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZ14OTTO_main_loopEUlvE_EEOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC2IZ14OTTO_main_loopEUlvE_EEOT_
     /tmp/ccU23Djm.s:12131  .text._ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 _ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE
     /tmp/ccU23Djm.s:12175  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlvE_EEvOT_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlvE_EEvOT_
     /tmp/ccU23Djm.s:9665   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE5resetEv:0000000000000000 $t
     /tmp/ccU23Djm.s:9738   .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE4moveEOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:9806   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE4moveEOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:9874   .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE5resetEv:0000000000000000 $t
     /tmp/ccU23Djm.s:9947   .text._ZSt7forwardIZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmEUlvE_EOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:9992   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_C2EOS6_:0000000000000000 $t
     /tmp/ccU23Djm.s:9999   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_C2EOS6_:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_C2EOS6_
     /tmp/ccU23Djm.s:9999   .text._ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_C2EOS6_:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_C1EOS6_
     /tmp/ccU23Djm.s:10048  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:12332  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb0EE:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb0EE
     /tmp/ccU23Djm.s:12376  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb1EE:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb1EE
     /tmp/ccU23Djm.s:10120  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvOT_:000000000000004c $d
     /tmp/ccU23Djm.s:12247  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPv
     /tmp/ccU23Djm.s:12290  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPv
     /tmp/ccU23Djm.s:10126  .text._ZSt7launderIN4otto3mcu9Scheduler4TaskEEPT_S5_:0000000000000000 $t
     /tmp/ccU23Djm.s:10171  .text._ZN4otto3mcu9Scheduler4TaskaSEOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:10178  .text._ZN4otto3mcu9Scheduler4TaskaSEOS2_:0000000000000000 _ZN4otto3mcu9Scheduler4TaskaSEOS2_
     /tmp/ccU23Djm.s:12428  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_
     /tmp/ccU23Djm.s:10225  .text._ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_SB_SB_RT0_:0000000000000000 $t
     /tmp/ccU23Djm.s:12478  .text._ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SC_T1_T2_:0000000000000000 _ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SC_T1_T2_
     /tmp/ccU23Djm.s:10318  .text._ZSt10__pop_heapIPN4otto3mcu9Scheduler4TaskEN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_SB_SB_RT0_:0000000000000090 $d
     /tmp/ccU23Djm.s:10323  .text._ZSt4moveIRN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEONSt16remove_referenceIT_E4typeEOSA_:0000000000000000 $t
ARM GAS  /tmp/ccU23Djm.s 			page 466


     /tmp/ccU23Djm.s:10368  .text._ZNR2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEE5valueEv:0000000000000000 $t
     /tmp/ccU23Djm.s:10413  .text._ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:10420  .text._ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 _ZSt7forwardIN4otto4util12local_vectorINS0_3mcu9Scheduler4TaskELj1024EE5errorEEOT_RNSt16remove_referenceIS8_E4typeE
     /tmp/ccU23Djm.s:10458  .text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2IJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:10465  .text._ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC2IJS9_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC1IJS9_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:10516  .text._ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE:0000000000000000 $t
     /tmp/ccU23Djm.s:10523  .text._ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE:0000000000000000 _ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC1ENS0_23default_constructor_tagE
     /tmp/ccU23Djm.s:10563  .text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:10570  .text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJSA_ELPv0EEENS_10unexpect_tEDpOT_:0000000000000000 _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC1IJSA_ELPv0EEENS_10unexpect_tEDpOT_
     /tmp/ccU23Djm.s:10621  .text._ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE:0000000000000000 $t
     /tmp/ccU23Djm.s:10628  .text._ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EEC2ENS0_23default_constructor_tagE:0000000000000000 _ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EEC1ENS0_23default_constructor_tagE
     /tmp/ccU23Djm.s:10668  .text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:10675  .text._ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC2IJS6_ELPv0EEENS_10in_place_tEDpOT_:0000000000000000 _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC1IJS6_ELPv0EEENS_10in_place_tEDpOT_
     /tmp/ccU23Djm.s:10725  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_:0000000000000000 $t
     /tmp/ccU23Djm.s:10732  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2ES7_
     /tmp/ccU23Djm.s:10775  .text._ZSt11__push_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SC_T1_RT2_:0000000000000000 $t
     /tmp/ccU23Djm.s:12693  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S6_EEbT_RT0_:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S6_EEbT_RT0_
     /tmp/ccU23Djm.s:10916  .text._ZNKSt5arrayIhLj4EE5beginEv:0000000000000000 $t
     /tmp/ccU23Djm.s:12786  .text._ZNKSt5arrayIhLj4EE4dataEv:0000000000000000 _ZNKSt5arrayIhLj4EE4dataEv
     /tmp/ccU23Djm.s:10959  .text._ZNKSt5arrayIhLj4EE3endEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11004  .text._ZSt12__miter_baseIPKhET_S2_:0000000000000000 $t
     /tmp/ccU23Djm.s:11050  .text._ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_:0000000000000000 $t
     /tmp/ccU23Djm.s:12831  .text._ZSt12__niter_baseIPKhET_S2_:0000000000000000 _ZSt12__niter_baseIPKhET_S2_
     /tmp/ccU23Djm.s:12876  .text._ZSt12__niter_baseIPhET_S1_:0000000000000000 _ZSt12__niter_baseIPhET_S1_
     /tmp/ccU23Djm.s:12921  .text._ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_:0000000000000000 _ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_
     /tmp/ccU23Djm.s:12971  .text._ZSt12__niter_wrapIPhET_RKS1_S1_:0000000000000000 _ZSt12__niter_wrapIPhET_RKS1_S1_
     /tmp/ccU23Djm.s:11114  .text._ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EE5clearEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11170  .text._ZNKSt5arrayIN4otto3mcu7ws2812b8RGBColorELj7EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:13017  .text._ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j:0000000000000000 _ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j
     /tmp/ccU23Djm.s:11217  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:11224  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEOT_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC2IZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEOT_
     /tmp/ccU23Djm.s:13068  .text._ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 _ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EOT_RNSt16remove_referenceIS8_E4typeE
     /tmp/ccU23Djm.s:13113  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvOT_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvOT_
     /tmp/ccU23Djm.s:11273  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:13191  .text._ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j:0000000000000000 _ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j
     /tmp/ccU23Djm.s:11320  .text._ZNSt5arrayIS_IN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:13243  .text._ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EE6_S_refERA8_KS8_j:0000000000000000 _ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EE6_S_refERA8_KS8_j
     /tmp/ccU23Djm.s:11367  .text._ZNSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:13292  .text._ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_refERA8_KS6_j:0000000000000000 _ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_refERA8_KS6_j
     /tmp/ccU23Djm.s:11414  .text._ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptrERA8_KS6_:0000000000000000 $t
     /tmp/ccU23Djm.s:11421  .text._ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptrERA8_KS6_:0000000000000000 _ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_ptrERA8_KS6_
     /tmp/ccU23Djm.s:11459  .text._ZNKSt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE4dataEv:0000000000000000 $t
     /tmp/ccU23Djm.s:11504  .text._ZNSt5arrayIhLj648EE4dataEv:0000000000000000 $t
     /tmp/ccU23Djm.s:13341  .text._ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh:0000000000000000 _ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh
     /tmp/ccU23Djm.s:11549  .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE11send_updateEv:0000000000000000 $t
     /tmp/ccU23Djm.s:13390  .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv
     /tmp/ccU23Djm.s:11595  .text._ZNKSt5arrayIhLj4EEixEj:0000000000000000 $t
     /tmp/ccU23Djm.s:11642  .text._ZSt5beginISt5arrayIhLj648EEEDTcldtfp_5beginEERT_:0000000000000000 $t
     /tmp/ccU23Djm.s:13494  .text._ZNSt5arrayIhLj648EE5beginEv:0000000000000000 _ZNSt5arrayIhLj648EE5beginEv
     /tmp/ccU23Djm.s:11685  .text._ZSt3endISt5arrayIhLj648EEEDTcldtfp_3endEERT_:0000000000000000 $t
     /tmp/ccU23Djm.s:13537  .text._ZNSt5arrayIhLj648EE3endEv:0000000000000000 _ZNSt5arrayIhLj648EE3endEv
     /tmp/ccU23Djm.s:11728  .text._ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:11773  .text._ZSt4fillIPhhEvT_S1_RKT0_:0000000000000000 $t
     /tmp/ccU23Djm.s:13582  .text._ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_:0000000000000000 _ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_
     /tmp/ccU23Djm.s:11826  .text._ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:11871  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:13734  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integral_constantIbLb0EE:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integral_constantIbLb0EE
ARM GAS  /tmp/ccU23Djm.s 			page 467


     /tmp/ccU23Djm.s:13778  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constantIbLb1EE:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constantIbLb1EE
     /tmp/ccU23Djm.s:11941  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIRS0_EEvOT_:0000000000000048 $d
     /tmp/ccU23Djm.s:13646  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv
     /tmp/ccU23Djm.s:13691  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv
     /tmp/ccU23Djm.s:11947  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE5beginEv:0000000000000000 $t
     /tmp/ccU23Djm.s:13830  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv:0000000000000000 _ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv
     /tmp/ccU23Djm.s:11990  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE3endEv:0000000000000000 $t
     /tmp/ccU23Djm.s:12035  .text._ZNSt5arrayIhLj2EE4dataEv:0000000000000000 $t
     /tmp/ccU23Djm.s:13875  .text._ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh:0000000000000000 _ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh
     /tmp/ccU23Djm.s:12080  .text._ZNKSt5arrayIhLj2EE4sizeEv:0000000000000000 $t
     /tmp/ccU23Djm.s:12125  .text._ZSt7forwardIZ14OTTO_main_loopEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:12169  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlvE_EEvOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:14003  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb0EE:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb0EE
     /tmp/ccU23Djm.s:14046  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb1EE:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb1EE
     /tmp/ccU23Djm.s:12234  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6createIZ14OTTO_main_loopEUlvE_EEvOT_:0000000000000040 $d
     /tmp/ccU23Djm.s:13919  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZ14OTTO_main_loopEUlvE_EEvPv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZ14OTTO_main_loopEUlvE_EEvPv
     /tmp/ccU23Djm.s:13961  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZ14OTTO_main_loopEUlvE_EEvPv:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZ14OTTO_main_loopEUlvE_EEvPv
     /tmp/ccU23Djm.s:12240  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:12283  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:12325  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb0EE:0000000000000000 $t
     /tmp/ccU23Djm.s:12369  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb1EE:0000000000000000 $t
     /tmp/ccU23Djm.s:12416  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvSt17integral_constantIbLb1EE:000000000000001c $d
     /tmp/ccU23Djm.s:14098  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPvSA_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPvSA_
     /tmp/ccU23Djm.s:12421  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EEaSEOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:14153  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_
     /tmp/ccU23Djm.s:12471  .text._ZSt13__adjust_heapIPN4otto3mcu9Scheduler4TaskEiS3_N9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SC_T1_T2_:0000000000000000 $t
     /tmp/ccU23Djm.s:14204  .text._ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_SA_EEbT_T0_:0000000000000000 _ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_SA_EEbT_T0_
     /tmp/ccU23Djm.s:14252  .text._ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEEEONSt16remove_referenceIT_E4typeEOSC_:0000000000000000 _ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEEEONSt16remove_referenceIT_E4typeEOSC_
     /tmp/ccU23Djm.s:14297  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_15_Iter_comp_iterIS7_EE:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC1EONS0_15_Iter_comp_iterIS7_EE
     /tmp/ccU23Djm.s:12686  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_S6_EEbT_RT0_:0000000000000000 $t
     /tmp/ccU23Djm.s:14347  .text._ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_:0000000000000000 _ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_
     /tmp/ccU23Djm.s:12734  .text._ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh:0000000000000000 $t
     /tmp/ccU23Djm.s:12741  .text._ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh:0000000000000000 _ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
     /tmp/ccU23Djm.s:12779  .text._ZNKSt5arrayIhLj4EE4dataEv:0000000000000000 $t
     /tmp/ccU23Djm.s:12824  .text._ZSt12__niter_baseIPKhET_S2_:0000000000000000 $t
     /tmp/ccU23Djm.s:12869  .text._ZSt12__niter_baseIPhET_S1_:0000000000000000 $t
     /tmp/ccU23Djm.s:12914  .text._ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_:0000000000000000 $t
     /tmp/ccU23Djm.s:14394  .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_:0000000000000000 _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_
     /tmp/ccU23Djm.s:12964  .text._ZSt12__niter_wrapIPhET_RKS1_S1_:0000000000000000 $t
     /tmp/ccU23Djm.s:13010  .text._ZNSt14__array_traitsIN4otto3mcu7ws2812b8RGBColorELj7EE6_S_refERA7_KS3_j:0000000000000000 $t
     /tmp/ccU23Djm.s:13061  .text._ZSt7forwardIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 $t
     /tmp/ccU23Djm.s:13106  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvOT_:0000000000000000 $t
     /tmp/ccU23Djm.s:14541  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb0EE:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb0EE
     /tmp/ccU23Djm.s:14585  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb1EE:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb1EE
     /tmp/ccU23Djm.s:13178  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE6createIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvOT_:000000000000004c $d
     /tmp/ccU23Djm.s:14455  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEmPv:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEmPv
     /tmp/ccU23Djm.s:14498  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvPv:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvPv
     /tmp/ccU23Djm.s:13184  .text._ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_refERA8_KS2_j:0000000000000000 $t
     /tmp/ccU23Djm.s:13236  .text._ZNSt14__array_traitsISt5arrayIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EELj8EE6_S_refERA8_KS8_j:0000000000000000 $t
     /tmp/ccU23Djm.s:13285  .text._ZNSt14__array_traitsIN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellELj8EE6_S_refERA8_KS6_j:0000000000000000 $t
     /tmp/ccU23Djm.s:13334  .text._ZNSt14__array_traitsIhLj648EE6_S_ptrERA648_Kh:0000000000000000 $t
     /tmp/ccU23Djm.s:13383  .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv:0000000000000000 $t
     /tmp/ccU23Djm.s:14637  .text._ZNKSt5arrayIhLj648EE4sizeEv:0000000000000000 _ZNKSt5arrayIhLj648EE4sizeEv
     /tmp/ccU23Djm.s:13482  .text._ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EE8transmitEv:0000000000000078 $d
     /tmp/ccU23Djm.s:13487  .text._ZNSt5arrayIhLj648EE5beginEv:0000000000000000 $t
     /tmp/ccU23Djm.s:13530  .text._ZNSt5arrayIhLj648EE3endEv:0000000000000000 $t
     /tmp/ccU23Djm.s:13575  .text._ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_:0000000000000000 $t
ARM GAS  /tmp/ccU23Djm.s 			page 468


     /tmp/ccU23Djm.s:13639  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIPS0_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:13684  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIPS0_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:13727  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIPS0_EEvSt17integral_constantIbLb0EE:0000000000000000 $t
     /tmp/ccU23Djm.s:13771  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constantIbLb1EE:0000000000000000 $t
     /tmp/ccU23Djm.s:13818  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIPS0_EEvSt17integral_constantIbLb1EE:000000000000001c $d
     /tmp/ccU23Djm.s:14682  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_
     /tmp/ccU23Djm.s:13823  .text._ZNSt5arrayIN4otto3mcu7GpioPinELj8EE4dataEv:0000000000000000 $t
     /tmp/ccU23Djm.s:14737  .text._ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_:0000000000000000 _ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_
     /tmp/ccU23Djm.s:13868  .text._ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh:0000000000000000 $t
     /tmp/ccU23Djm.s:13913  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9call_implIZ14OTTO_main_loopEUlvE_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:13955  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE12destroy_implIZ14OTTO_main_loopEUlvE_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:13997  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_copyIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb0EE:0000000000000000 $t
     /tmp/ccU23Djm.s:14040  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb1EE:0000000000000000 $t
     /tmp/ccU23Djm.s:14086  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9init_moveIZ14OTTO_main_loopEUlvE_EEvSt17integral_constantIbLb1EE:000000000000001c $d
     /tmp/ccU23Djm.s:14781  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZ14OTTO_main_loopEUlvE_EEvPvS5_:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZ14OTTO_main_loopEUlvE_EEvPvS5_
     /tmp/ccU23Djm.s:14091  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEvPvSA_:0000000000000000 $t
     /tmp/ccU23Djm.s:14830  .text._ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmEUlvE_EONSt16remove_referenceIT_E4typeEOSA_:0000000000000000 _ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmEUlvE_EONSt16remove_referenceIT_E4typeEOSA_
     /tmp/ccU23Djm.s:14146  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE6assignEOS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:14197  .text._ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEclIPS6_SA_EEbT_T0_:0000000000000000 $t
     /tmp/ccU23Djm.s:14245  .text._ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterIN4otto3mcu9Scheduler4TaskEEEEEONSt16remove_referenceIT_E4typeEOSC_:0000000000000000 $t
     /tmp/ccU23Djm.s:14290  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_15_Iter_comp_iterIS7_EE:0000000000000000 $t
     /tmp/ccU23Djm.s:14297  .text._ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_15_Iter_comp_iterIS7_EE:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC2EONS0_15_Iter_comp_iterIS7_EE
     /tmp/ccU23Djm.s:14340  .text._ZNKSt7greaterIN4otto3mcu9Scheduler4TaskEEclERKS3_S6_:0000000000000000 $t
     /tmp/ccU23Djm.s:14387  .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_:0000000000000000 $t
     /tmp/ccU23Djm.s:14448  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9call_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEmPv:0000000000000000 $t
     /tmp/ccU23Djm.s:14491  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE12destroy_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvPv:0000000000000000 $t
     /tmp/ccU23Djm.s:14534  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_copyIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb0EE:0000000000000000 $t
     /tmp/ccU23Djm.s:14578  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb1EE:0000000000000000 $t
     /tmp/ccU23Djm.s:14625  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9init_moveIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvSt17integral_constantIbLb1EE:000000000000001c $d
     /tmp/ccU23Djm.s:14875  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvPvSC_:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvPvSC_
     /tmp/ccU23Djm.s:14630  .text._ZNKSt5arrayIhLj648EE4sizeEv:0000000000000000 $t
     /tmp/ccU23Djm.s:14675  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIPS0_EEvPvS5_:0000000000000000 $t
     /tmp/ccU23Djm.s:14930  .text._ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_:0000000000000000 _ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_
     /tmp/ccU23Djm.s:14730  .text._ZNSt14__array_traitsIN4otto3mcu7GpioPinELj8EE6_S_ptrERA8_KS2_:0000000000000000 $t
     /tmp/ccU23Djm.s:14775  .text._ZN19fixed_size_functionIFvvELj64EL14construct_type2EE9move_implIZ14OTTO_main_loopEUlvE_EEvPvS5_:0000000000000000 $t
     /tmp/ccU23Djm.s:14974  .text._ZSt4moveIRZ14OTTO_main_loopEUlvE_EONSt16remove_referenceIT_E4typeEOS3_:0000000000000000 _ZSt4moveIRZ14OTTO_main_loopEUlvE_EONSt16remove_referenceIT_E4typeEOS3_
     /tmp/ccU23Djm.s:14823  .text._ZSt4moveIRZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmEUlvE_EONSt16remove_referenceIT_E4typeEOSA_:0000000000000000 $t
     /tmp/ccU23Djm.s:14868  .text._ZN19fixed_size_functionIFmvELj32EL14construct_type2EE9move_implIZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEvPvSC_:0000000000000000 $t
     /tmp/ccU23Djm.s:15019  .text._ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSA_:0000000000000000 _ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSA_
     /tmp/ccU23Djm.s:14923  .text._ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_:0000000000000000 $t
     /tmp/ccU23Djm.s:14968  .text._ZSt4moveIRZ14OTTO_main_loopEUlvE_EONSt16remove_referenceIT_E4typeEOS3_:0000000000000000 $t
     /tmp/ccU23Djm.s:15012  .text._ZSt4moveIRZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS2_12Ws2812bArrayIXT_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSA_:0000000000000000 $t
     /tmp/ccU23Djm.s:15106  .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
     /tmp/ccU23Djm.s:15112  .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccU23Djm.s:15466  .text._Z41__static_initialization_and_destruction_0ii:0000000000000364 $d
     /tmp/ccU23Djm.s:15546  .text._Z41__static_initialization_and_destruction_0ii:00000000000004a0 $t
     /tmp/ccU23Djm.s:15573  .text._Z41__static_initialization_and_destruction_0ii:00000000000004d4 $d
     /tmp/ccU23Djm.s:15579  .text._GLOBAL__sub_I__ZN4otto3mcu9main_loopE:0000000000000000 $t
     /tmp/ccU23Djm.s:15585  .text._GLOBAL__sub_I__ZN4otto3mcu9main_loopE:0000000000000000 _GLOBAL__sub_I__ZN4otto3mcu9main_loopE
     /tmp/ccU23Djm.s:15608  .init_array:0000000000000000 $d
                           .group:0000000000000000 _ZN4otto3mcu7EncoderC5ENS0_7GpioPinES2_
                           .group:0000000000000000 _ZN4otto3mcu9Scheduler4TaskD5Ev
                           .group:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_D5Ev
                           .group:0000000000000000 _ZN4otto3mcu9Scheduler4TaskC5EOS2_
                           .group:0000000000000000 _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEEC5Ev
                           .group:0000000000000000 _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC5Ev
                           .group:0000000000000000 _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC5Ev
ARM GAS  /tmp/ccU23Djm.s 			page 469


                           .group:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC5Ev
                           .group:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC5Ev
                           .group:0000000000000000 _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC5Ev
                           .group:0000000000000000 _ZN4otto3mcu7ws2812b10Ws2812bRefC5EPhRb
                           .group:0000000000000000 _ZN4otto3mcu9SchedulerD5Ev
                           .group:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EED5Ev
                           .group:0000000000000000 _ZN7details26fixed_function_vtable_baseIvJEEC5Ev
                           .group:0000000000000000 _ZN7details21fixed_function_vtableIL14construct_type2EvJEEC5Ev
                           .group:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC5EOS2_
                           .group:0000000000000000 _ZN7details26fixed_function_vtable_baseImJEEC5Ev
                           .group:0000000000000000 _ZN7details21fixed_function_vtableIL14construct_type2EmJEEC5Ev
                           .group:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC5EOS2_
                           .group:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EED5Ev
                           .group:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC5IZN4otto3mcu9Scheduler20schedule_cond_repeatES_IFmvELj32ELS1_2EEmEUlvE_EEOT_
                           .group:0000000000000000 _ZN2tl10unexpectedIN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC5EOS8_
                           .group:0000000000000000 _ZN2tl6detail24expected_operations_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorEECI5NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail18expected_copy_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI5NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail18expected_move_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI5NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI5NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EECI5NS0_21expected_storage_baseIvS9_Lb0ELb1EEEIJS9_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl8expectedIvN4otto4util12local_vectorINS1_3mcu9Scheduler4TaskELj1024EE5errorEEC5IS8_LPv0ELSB_0EEEONS_10unexpectedIT_EE
                           .group:0000000000000000 _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC5Ev
                           .group:0000000000000000 _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJSA_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC5IS9_LPv0ELSC_0EEEONS_10unexpectedIT_EE
                           .group:0000000000000000 _ZN2tl6detail24expected_operations_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorEECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail18expected_copy_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail18expected_move_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail25expected_copy_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail25expected_move_assign_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EECI5NS0_21expected_storage_baseIS6_SA_Lb1ELb1EEEIJS6_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC5IJS5_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN2tl8expectedIPN4otto3mcu9Scheduler4TaskENS1_4util12local_vectorIS4_Lj1024EE5errorEEC5IS5_LPv0ELSC_0EEEOT_
                           .group:0000000000000000 _ZN4otto4util12local_vectorINS_3mcu9Scheduler4TaskELj1024EED5Ev
                           .group:0000000000000000 _ZN4otto3mcu7ws2812b12Ws2812bArrayILi54EEC5ER19__SPI_HandleTypeDef
                           .group:0000000000000000 _ZN4otto3mcu4keys9KeyMatrixI7KeyDataLi8ELi8EE4CellC5ES3_
                           .group:0000000000000000 _ZN19fixed_size_functionIFvvELj64EL14construct_type2EEC5IRS0_EEOT_
                           .group:0000000000000000 _ZZN4otto3mcu9Scheduler20schedule_cond_repeatE19fixed_size_functionIFmvELj32EL14construct_type2EEmENUlvE_C5EOS6_
                           .group:0000000000000000 _ZN2tl6detail21expected_storage_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb0ELb1EEC5IJS9_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail26expected_default_ctor_baseIvN4otto4util12local_vectorINS2_3mcu9Scheduler4TaskELj1024EE5errorELb1EEC5ENS0_23default_constructor_tagE
                           .group:0000000000000000 _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC5IJSA_ELPv0EEENS_10unexpect_tEDpOT_
                           .group:0000000000000000 _ZN2tl6detail26expected_default_ctor_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1EEC5ENS0_23default_constructor_tagE
                           .group:0000000000000000 _ZN2tl6detail21expected_storage_baseIPN4otto3mcu9Scheduler4TaskENS2_4util12local_vectorIS5_Lj1024EE5errorELb1ELb1EEC5IJS6_ELPv0EEENS_10in_place_tEDpOT_
                           .group:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC5ES7_
                           .group:0000000000000000 _ZN19fixed_size_functionIFmvELj32EL14construct_type2EEC5IZN4otto3mcu7ws2812b18led_cascade_colorsILi54EEEvRNS6_12Ws2812bArrayIXT_EEEEUlvE_EEOT_
                           .group:0000000000000000 _ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterIN4otto3mcu9Scheduler4TaskEEEC5EONS0_15_Iter_comp_iterIS7_EE

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_GPIO_ReadPin
HAL_GPIO_WritePin
HAL_GetTick
assert_failed
HAL_Delay
memset
ARM GAS  /tmp/ccU23Djm.s 			page 470


__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
HAL_SPI_Transmit_DMA
printf
memmove
__aeabi_atexit
__dso_handle
hspi3
